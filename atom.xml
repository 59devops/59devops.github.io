<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>59Devops</title>
  
  <subtitle>一个运维小菜鸡的个人博客网站。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-30T06:20:48.305Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>StaryJie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>phpize命令在安装AMQP插件是报错phpize：Cannot find autoconf. Please check your autoconf installation and the  envir的解决方法</title>
    <link href="http://yoursite.com/2019/09/30/phpize%E5%91%BD%E4%BB%A4%E5%9C%A8%E5%AE%89%E8%A3%85AMQP%E6%8F%92%E4%BB%B6%E6%98%AF%E6%8A%A5%E9%94%99phpize%EF%BC%9ACannot-find-autoconf-Please-check-your-autoconf-installation-and-the-envir%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/30/phpize命令在安装AMQP插件是报错phpize：Cannot-find-autoconf-Please-check-your-autoconf-installation-and-the-envir的解决方法/</id>
    <published>2019-09-30T06:05:08.000Z</published>
    <updated>2019-09-30T06:20:48.305Z</updated>
    
    <content type="html"><![CDATA[<p>1、出现错误的场合：</p><p>运行/usr/local/php/bin/phpize时出现：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Configuring <span class="keyword">for</span>: PHP Api Version: 20041225 Zend Module Api No: 20060613 Zend Extension Api No: 220060519 Cannot find autoconf. Please check your autoconf installation and the <span class="variable">$PHP_AUTOCONF</span> environment variable. Then, rerun this script.</span><br></pre></td></tr></table></figure></p><p>解决办法是：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src &amp;&amp; wget http://ftp.gnu.org/gnu/m4/m4-1.4.9.tar.gz</span><br><span class="line">tar -zvxf m4-1.4.9.tar.gz <span class="comment"># cd m4-1.4.9/</span></span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install <span class="comment"># cd ../</span></span><br><span class="line">wget http://ftp.gnu.org/gnu/autoconf/autoconf-2.62.tar.gz</span><br><span class="line">tar -zvxf autoconf-2.62.tar.gz</span><br><span class="line"><span class="built_in">cd</span> autoconf-2.62/</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>当然，也可以直接yum安装就可以了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install m4 yum install autoconf</span><br></pre></td></tr></table></figure></p><p>2、解释./configure<br>    ./configure的意思是执行当前目录下面的configure文件<br>    configure一般都有可执行的权限，如果没有的话，用./configure是不能执行的，但是可以这样执行：<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh ./configure</span><br></pre></td></tr></table></figure></p><p>3、解释autoconf<br>    Autoconf是一个用于生成可以自动地配置软件源代码包以适应多种Unix类系统的 shell脚本的工具。由Autoconf生成的配置脚本在运行的时候与Autoconf是无关的， 就是说配置脚本的用户并不需要拥有Autoconf。<br>    由Autoconf生成的配置脚本在运行的时候不需要用户的手工干预；通常它们甚至不需要通过给出参数以确定系统的类型。相反，它们对软件包可能需要的各种特征进行独立的测试。（在每个测试之前，它们打印一个单行的消息以说明它们正在进行的检测，以使得用户不会因为等待脚本执行完毕而焦躁。）因此，它们在混合系统或者从各种常见Unix变种定制而成的系统中工作的很好。没有必要维护文件以储存由各个Unix变种、各个发行版本所支持的特征的列表。<br>    对于每个使用了Autoconf的软件包，Autoconf从一个列举了该软件包需要的，或者可以使用的系统特征的列表的模板文件中生成配置脚本。在shell代码识别并响应了一个被列出的系统特征之后，Autoconf允许多个可能使用（或者需要）该特征的软件包共享该特征。如果后来因为某些原因需要调整shell代码，就只要在一个地方进行修改； 所有的配置脚本都将被自动地重新生成以使用更新了的代码。<br>    Metaconfig包在目的上与Autoconf很相似，但它生成的脚本需要用户的手工干预，在配置一个大的源代码树的时候这是十分不方便的。不象Metaconfig脚本，如果在编写脚本时小心谨慎， Autoconf可以支持交叉编译（cross-compiling）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、出现错误的场合：&lt;/p&gt;
&lt;p&gt;运行/usr/local/php/bin/phpize时出现：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Configuring &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;: PHP Api Version: 20041225 Zend Module Api No: 20060613 Zend Extension Api No: 220060519 Cannot find autoconf. Please check your autoconf installation and the &lt;span class=&quot;variable&quot;&gt;$PHP_AUTOCONF&lt;/span&gt; environment variable. Then, rerun this script.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解决办法是：&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="AMQP" scheme="http://yoursite.com/tags/AMQP/"/>
    
  </entry>
  
  <entry>
    <title>Nginx根据用户请求的不同参数返回不同的json值</title>
    <link href="http://yoursite.com/2019/09/30/Nginx%E6%A0%B9%E6%8D%AE%E7%94%A8%E6%88%B7%E8%AF%B7%E6%B1%82%E7%9A%84%E4%B8%8D%E5%90%8C%E5%8F%82%E6%95%B0%E8%BF%94%E5%9B%9E%E4%B8%8D%E5%90%8C%E7%9A%84json%E5%80%BC/"/>
    <id>http://yoursite.com/2019/09/30/Nginx根据用户请求的不同参数返回不同的json值/</id>
    <published>2019-09-30T06:02:40.000Z</published>
    <updated>2019-09-30T06:17:43.673Z</updated>
    
    <content type="html"><![CDATA[<p>　　用户请求url:<a href="http://localhost:8000/getconfig?v=1.03.01,根据参数v=1.03.01或者其他的值返回不同的json值。如果用户请求不带该参数，则返回默认的json值。" target="_blank" rel="noopener">http://localhost:8000/getconfig?v=1.03.01,根据参数v=1.03.01或者其他的值返回不同的json值。如果用户请求不带该参数，则返回默认的json值。</a></p><a id="more"></a><p>　　下面是nginx.conf的配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8000;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location ~ ^/getconfig &#123;</span><br><span class="line">default_type application/json;</span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$query_string</span> ~* ^(.*)v=1.03.01$ )&#123;</span><br><span class="line"><span class="built_in">return</span> 200 <span class="string">'&#123;"status": "0","message": "OK","body": &#123;"api":"http://116.62.113.124:8080/basestock000/","h5":"http://118.31.69.127:8090/","phone":"4000670019","cr":"Copyright xxxxx"&#125;&#125;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 200 <span class="string">'&#123;"status": "0","message": "OK","body": &#123;"api":"http://116.62.113.124:8080/basestock000/","h5":"http://118.31.69.127:8090/","phone":"4000670019","cr":"Copyright xxxxx"&#125;&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　用户请求<a href="http://localhost:8000/getconfig时，应该返回" target="_blank" rel="noopener">http://localhost:8000/getconfig时，应该返回</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">return</span> 200 <span class="string">'&#123;"status": "0","message": "OK","body": &#123;"api":"http://116.62.113.124:8080/basestock000/","h5":"http://118.31.69.127:8090/","phone":"4000670019","cr":"Copyright xxxxx"&#125;&#125;'</span>;</span><br></pre></td></tr></table></figure></p><p>　　浏览器模拟请求：<a href="http://localhost:8000/getconfig" target="_blank" rel="noopener">http://localhost:8000/getconfig</a><br>    <img src="http://static.staryjie.com/static/images/20190930141611-JRDNrU.png" alt>　　</p><p>　　浏览器请求：<a href="http://localhost:8000/getconfig?v=1.03.01时：" target="_blank" rel="noopener">http://localhost:8000/getconfig?v=1.03.01时：</a><br>    <img src="http://static.staryjie.com/static/images/20190930141701-jKF0zE.png" alt>　</p><p>　　可以满足需求，当有多个参数值的时候，本人没有想出来别的更好的办法，本来以为可以使用if else或者if else if的，结果我在测试的时候配置检查都不通过，没办法就采用了下面的办法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8000;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location ~ ^/getconfig &#123;</span><br><span class="line">            default_type application/json;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="variable">$query_string</span> ~* ^(.*)v=1.03.01$ )&#123;</span><br><span class="line">            <span class="built_in">return</span> 200 <span class="string">'&#123;"status": "0","message": "OK","body": &#123;"api":"http://116.62.113.124:8080/basestock000/","h5":"http://118.31.69.127:8090/","phone":"4000670019","cr":"Copyright xxxxx"&#125;&#125;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="variable">$query_string</span> ~* ^(.*)v=1.03.02$ )&#123;</span><br><span class="line">            <span class="built_in">return</span> 200 <span class="string">'&#123;"status": "0","message": "OK","body": &#123;"api":"http://116.62.113.124:8080/basestock122/","h5":"http://118.31.69.127:8092/","phone":"40006700191222","cr":"Copyright xxxxx1222"&#125;&#125;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> 200 <span class="string">'&#123;"status": "0","message": "OK","body": &#123;"api":"http://116.62.113.124:8080/basestock000/","h5":"http://118.31.69.127:8090/","phone":"4000670019","cr":"Copyright xxxxx"&#125;&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　请求<a href="http://localhost:8000/getconfig?v=1.03.02：" target="_blank" rel="noopener">http://localhost:8000/getconfig?v=1.03.02：</a><br>    <img src="http://static.staryjie.com/static/images/20190930141731-TYua5p.png" alt></p><p>　　虽然也可以达到目的，但是感觉特别low，希望哪位大神有别的比较高端的解决方法可以指导一下 ^=^!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　用户请求url:&lt;a href=&quot;http://localhost:8000/getconfig?v=1.03.01,根据参数v=1.03.01或者其他的值返回不同的json值。如果用户请求不带该参数，则返回默认的json值。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:8000/getconfig?v=1.03.01,根据参数v=1.03.01或者其他的值返回不同的json值。如果用户请求不带该参数，则返回默认的json值。&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Mac上修改MySQL默认字符集为utf8</title>
    <link href="http://yoursite.com/2019/09/30/Mac%E4%B8%8A%E4%BF%AE%E6%94%B9MySQL%E9%BB%98%E8%AE%A4%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%BAutf8/"/>
    <id>http://yoursite.com/2019/09/30/Mac上修改MySQL默认字符集为utf8/</id>
    <published>2019-09-30T05:59:58.000Z</published>
    <updated>2019-09-30T06:01:50.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、检查默认安装的mysql的字符集"><a href="#1、检查默认安装的mysql的字符集" class="headerlink" title="1、检查默认安装的mysql的字符集"></a>1、检查默认安装的mysql的字符集</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> show variables like '%char%';</span><br><span class="line">+--------------------------+-----------------------------------------------------------+</span><br><span class="line">| Variable_name            | Value                                                     |</span><br><span class="line">+--------------------------+-----------------------------------------------------------+</span><br><span class="line">| character_set_client     | utf8                                                      |</span><br><span class="line">| character_set_connection | utf8                                                      |</span><br><span class="line">| character_set_database   | latin1                                                    |</span><br><span class="line">| character_set_filesystem | binary                                                    |</span><br><span class="line"><span class="meta">#</span> For advice on how to change settings please see</span><br><span class="line">| character_set_results    | utf8                                                      |</span><br><span class="line">| character_set_server     | latin1                                                    |</span><br><span class="line">| character_set_system     | utf8                                                      |</span><br><span class="line">| character_sets_dir       | /usr/local/mysql-5.6.40-macos10.13-x86_64/share/charsets/ |</span><br><span class="line">+--------------------------+-----------------------------------------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>character_set_database和character_set_server依然是latin1的字符集，也就是说mysql后续创建的表都是latin1字符集的，不是utf8，会造成一些麻烦。所以有必要修改my.cnf。</p></blockquote><p><strong>在修改my.cnf之前一定要关闭mysql进程，不然会遇到mysql的sock不能连接的问题。</strong></p><h3 id="2、关闭mysqld后台进程"><a href="#2、关闭mysqld后台进程" class="headerlink" title="2、关闭mysqld后台进程"></a>2、关闭mysqld后台进程</h3><ul><li>系统偏好设置里面控制mysqld，避免了去找mysqld安装位置的麻烦。</li></ul><p><img src="http://static.staryjie.com/static/images/20181205093637.png" alt></p><p>点击 Stop MySQL Server</p><p><img src="http://static.staryjie.com/static/images/20181205093709.png" alt></p><p><img src="http://static.staryjie.com/static/images/20181205093754.png" alt></p><h3 id="3、修改mysql配置文件-etc-my-cnf"><a href="#3、修改mysql配置文件-etc-my-cnf" class="headerlink" title="3、修改mysql配置文件/etc/my.cnf"></a>3、修改mysql配置文件/etc/my.cnf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf</span><br><span class="line">sudo vim /etc/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[client]部分加入：  </span><br><span class="line">default-character-set=utf8  </span><br><span class="line"></span><br><span class="line">[mysqld]部分加入：  </span><br><span class="line">character-set-server=utf8</span><br></pre></td></tr></table></figure><blockquote><p>修改完成之后，启动MySQL</p></blockquote><h3 id="4、检查结果"><a href="#4、检查结果" class="headerlink" title="4、检查结果"></a>4、检查结果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> show variables like '%char%';</span><br><span class="line">+--------------------------+-----------------------------------------------------------+</span><br><span class="line">| Variable_name            | Value                                                     |</span><br><span class="line">+--------------------------+-----------------------------------------------------------+</span><br><span class="line">| character_set_client     | utf8                                                      |</span><br><span class="line">| character_set_connection | utf8                                                      |</span><br><span class="line">| character_set_database   | utf8                                                      |</span><br><span class="line">| character_set_filesystem | binary                                                    |</span><br><span class="line">| character_set_results    | utf8                                                      |</span><br><span class="line">| character_set_server     | utf8                                                      |</span><br><span class="line">| character_set_system     | utf8                                                      |</span><br><span class="line">| character_sets_dir       | /usr/local/mysql-5.6.40-macos10.13-x86_64/share/charsets/ |</span><br><span class="line">+--------------------------+-----------------------------------------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、检查默认安装的mysql的字符集&quot;&gt;&lt;a href=&quot;#1、检查默认安装的mysql的字符集&quot; class=&quot;headerlink&quot; title=&quot;1、检查默认安装的mysql的字符集&quot;&gt;&lt;/a&gt;1、检查默认安装的mysql的字符集&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;mysql&amp;gt;&lt;/span&gt; show variables like &#39;%char%&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+--------------------------+-----------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Variable_name            | Value                                                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+--------------------------+-----------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| character_set_client     | utf8                                                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| character_set_connection | utf8                                                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| character_set_database   | latin1                                                    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| character_set_filesystem | binary                                                    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; For advice on how to change settings please see&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| character_set_results    | utf8                                                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| character_set_server     | latin1                                                    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| character_set_system     | utf8                                                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| character_sets_dir       | /usr/local/mysql-5.6.40-macos10.13-x86_64/share/charsets/ |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+--------------------------+-----------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8 rows in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>b&#39;driver &#39;overlay&#39; failed to remove root filesystem 的解决方法</title>
    <link href="http://yoursite.com/2019/09/30/b-driver-overlay-failed-to-remove-root-filesystem-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/30/b-driver-overlay-failed-to-remove-root-filesystem-的解决方法/</id>
    <published>2019-09-30T05:56:41.000Z</published>
    <updated>2019-09-30T05:57:59.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、docker-compose启的nexus仓库意外dead"><a href="#1、docker-compose启的nexus仓库意外dead" class="headerlink" title="1、docker-compose启的nexus仓库意外dead"></a>1、docker-compose启的nexus仓库意外dead</h3><p>&emsp;&emsp;公司的maven私服nexus是通过docker-compose启动的，不知道什么原因意外死掉了。再次启动的时候报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@test-java nexus]# docker-compose up -d</span><br><span class="line">Removing nexus_nexus_1</span><br><span class="line">ERROR: driver "overlay" failed to remove root filesystem for 738f492a57f80951b279c3bd82f59b6230275a298ab74d7f26c4564cf3d1cf2c: remove /var/lib/docker/overlay/6031651302dba6053c5fde07937f4fd00dfc063577fa343b12c83f1c26b77887/merged: device or resource busy</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、原因分析"><a href="#2、原因分析" class="headerlink" title="2、原因分析"></a>2、原因分析</h3><p>&emsp;&emsp;看报错应该是之前的容器无法删除导致的，<code>device or resource busy</code>应该是还有某些进程在占用。</p><h3 id="3、处理问题"><a href="#3、处理问题" class="headerlink" title="3、处理问题"></a>3、处理问题</h3><p>&emsp;&emsp;先通过<code>docker rm</code>命令尝试删除该容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@test-java nexus]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS                           NAMES</span><br><span class="line">141d9363cf95        jenkins             "/bin/tini -- /usr..."   12 days ago         Exited (137) 10 days ago                                   jenkins</span><br><span class="line">85e5f06d1344        jenkins             "/bin/tini -- /usr..."   12 days ago         Exited (130) 12 days ago                                   reverent_ritchie</span><br><span class="line">738f492a57f8        sonatype/nexus3     "bin/nexus run"          2 weeks ago         Dead                                                       nexus_nexus_1</span><br><span class="line">eef939679dd1        nginx:1.13.3        "/usr/local/nginx/..."   2 months ago        Created                    443/tcp, 0.0.0.0:8087-&gt;80/tcp   nginx2</span><br><span class="line">5087229bf9aa        nginx:1.13.3        "/usr/local/nginx/..."   2 months ago        Exited (0) 2 weeks ago                                     nginx</span><br><span class="line">c67cf4bdefd9        sonatype/nexus3     "bin/nexus run"          9 months ago        Dead                                                       c67cf4bdefd9_nexus_nexus_1</span><br><span class="line">[root@test-java nexus]# docker rm 738f492a57f8</span><br><span class="line">Error response from daemon: driver "overlay" failed to remove root filesystem for 738f492a57f80951b279c3bd82f59b6230275a298ab74d7f26c4564cf3d1cf2c: remove /var/lib/docker/overlay/6031651302dba6053c5fde07937f4fd00dfc063577fa343b12c83f1c26b77887/merged: device or resource busy</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;无法正常删除，尝试强制删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test-java nexus]# docker rm -f 738f492a57f8</span><br><span class="line">Error response from daemon: driver "overlay" failed to remove root filesystem for 738f492a57f80951b279c3bd82f59b6230275a298ab74d7f26c4564cf3d1cf2c: remove /var/lib/docker/overlay/6031651302dba6053c5fde07937f4fd00dfc063577fa343b12c83f1c26b77887/merged: device or resource busy</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过<code>docker rm</code>无法删除，提示文件系统相关的问题，应该是和docker容器的文件系统有关，docker是通过挂载的形式使用宿主机文件系统的。查看一下跟报错有关的挂载信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test-java nexus]# grep docker /proc/*/mountinfo|grep 6031651302dba6053c5fde07937f4fd00dfc063577fa343b12c83f1c26b77887</span><br><span class="line">/proc/814/mountinfo:80 79 0:38 / /var/lib/docker/overlay/6031651302dba6053c5fde07937f4fd00dfc063577fa343b12c83f1c26b77887/merged rw,relatime - overlay overlay rw,lowerdir=/var/lib/docker/overlay/e580d619ecdb1aeb01f73ad07d727812a3f9776af5af0679eecfd60198884aaf/root,upperdir=/var/lib/docker/overlay/6031651302dba6053c5fde07937f4fd00dfc063577fa343b12c83f1c26b77887/upper,workdir=/var/lib/docker/overlay/6031651302dba6053c5fde07937f4fd00dfc063577fa343b12c83f1c26b77887/work</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>6031651302dba6053c5fde07937f4fd00dfc063577fa343b12c83f1c26b77887</code>这串数字是和报错中的一致的。</p></blockquote><p>&emsp;&emsp;可以看到有跟该容器相关的挂载信息仍然处于挂载中，所以导致无法删除。</p><p>&emsp;&emsp;获取该挂载进程的pid并杀掉该进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@test-java nexus]# grep docker /proc/*/mountinfo|grep 6031651302dba6053c5fde07937f4fd00dfc063577fa343b12c83f1c26b77887 | awk -F ":" '&#123;print $1&#125;' | awk -F "/" '&#123;print $3&#125;'</span><br><span class="line">814</span><br><span class="line">[root@test-java nexus]# kill -9 814</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;重新启动nexus：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@test-java nexus]# docker-compose up -d</span><br><span class="line">Removing nexus_nexus_1</span><br><span class="line">Recreating c67cf4bdefd9_nexus_nexus_1 ... error</span><br><span class="line"></span><br><span class="line">ERROR: for c67cf4bdefd9_nexus_nexus_1  b'driver "overlay" failed to remove root filesystem for c67cf4bdefd9746ab850d09960211b02d0d184aa5e7c602095b1acdee57dc813: remove /var/lib/docker/overlay/ec743b1c55a524fd85421621314aa5acd44a29601f917f1f2eaed5f1a6d6c727/merged: device or resource busy'</span><br><span class="line"></span><br><span class="line">ERROR: for nexus  b'driver "overlay" failed to remove root filesystem for c67cf4bdefd9746ab850d09960211b02d0d184aa5e7c602095b1acdee57dc813: remove /var/lib/docker/overlay/ec743b1c55a524fd85421621314aa5acd44a29601f917f1f2eaed5f1a6d6c727/merged: device or resource busy'</span><br><span class="line">ERROR: Encountered errors while bringing up the project.</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;还有这样的报错，说明还有相关的挂载进程没有停止掉。找出进程并杀掉：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@test-java nexus]# grep docker /proc/*/mountinfo|grep ec743b1c55a524fd85421621314aa5acd44a29601f917f1f2eaed5f1a6d6c727 | awk -F ":" '&#123;print $1&#125;' | awk -F "/" '&#123;print $3&#125;'</span><br><span class="line">20910</span><br><span class="line">21073</span><br><span class="line">[root@test-java nexus]# kill -9 20910</span><br><span class="line">[root@test-java nexus]# kill -9 21073</span><br><span class="line">-bash: kill: (21073) - No such process</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;再次启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@test-java nexus]# docker-compose up -d</span><br><span class="line">Removing nexus_nexus_1</span><br><span class="line">Recreating c67cf4bdefd9_nexus_nexus_1 ... done</span><br><span class="line">[root@test-java nexus]#</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;启动成功！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、docker-compose启的nexus仓库意外dead&quot;&gt;&lt;a href=&quot;#1、docker-compose启的nexus仓库意外dead&quot; class=&quot;headerlink&quot; title=&quot;1、docker-compose启的nexus仓库意外dead&quot;&gt;&lt;/a&gt;1、docker-compose启的nexus仓库意外dead&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;公司的maven私服nexus是通过docker-compose启动的，不知道什么原因意外死掉了。再次启动的时候报错：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@test-java nexus]# docker-compose up -d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Removing nexus_nexus_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ERROR: driver &quot;overlay&quot; failed to remove root filesystem for 738f492a57f80951b279c3bd82f59b6230275a298ab74d7f26c4564cf3d1cf2c: remove /var/lib/docker/overlay/6031651302dba6053c5fde07937f4fd00dfc063577fa343b12c83f1c26b77887/merged: device or resource busy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>PyCharm创建普通项目配置支持jinja2语法</title>
    <link href="http://yoursite.com/2019/09/30/PyCharm%E5%88%9B%E5%BB%BA%E6%99%AE%E9%80%9A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%94%AF%E6%8C%81jinja2%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/30/PyCharm创建普通项目配置支持jinja2语法/</id>
    <published>2019-09-30T05:53:56.000Z</published>
    <updated>2019-09-30T05:55:01.473Z</updated>
    
    <content type="html"><![CDATA[<p>打开项目的根目录的.idea文件夹中<code>项目名.iml</code>文件（隐藏文件）</p><p>打开这个iml文件，在component标签的同级，添加如下代码：</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;component name="TemplatesService"&gt;</span><br><span class="line">&lt;option name="TEMPLATE_CONFIGURATION" value="Jinja2" /&gt;</span><br><span class="line">&lt;option name="TEMPLATE_FOLDERS"&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;option value="$MODULE_DIR$/templates" /&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/option&gt;</span><br><span class="line">&lt;/component&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打开项目的根目录的.idea文件夹中&lt;code&gt;项目名.iml&lt;/code&gt;文件（隐藏文件）&lt;/p&gt;
&lt;p&gt;打开这个iml文件，在component标签的同级，添加如下代码：&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="PyCharm" scheme="http://yoursite.com/tags/PyCharm/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>PHP编译安装完成之后没有&#39;php.ini&#39;文件的处理方法</title>
    <link href="http://yoursite.com/2019/09/30/PHP%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E4%B9%8B%E5%90%8E%E6%B2%A1%E6%9C%89-php-ini-%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/30/PHP编译安装完成之后没有-php-ini-文件的处理方法/</id>
    <published>2019-09-30T05:49:08.000Z</published>
    <updated>2019-09-30T05:51:20.075Z</updated>
    
    <content type="html"><![CDATA[<p>在我们编译安装PHP的时候，编译安装完成是不会自动生成php.ini文件的，所以需要我们手动生成。</p><a id="more"></a><h3 id="1-通过命令行确定php-ini文件的位置"><a href="#1-通过命令行确定php-ini文件的位置" class="headerlink" title="1.通过命令行确定php.ini文件的位置"></a>1.通过命令行确定<code>php.ini</code>文件的位置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">"phpinfo();"</span> | grep <span class="string">'php.ini'</span></span><br></pre></td></tr></table></figure><p>上面的命令需要在编译安装完PHP之后配好了环境变量，如果没有的话需要使用绝对路径来执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/php/bin/php -r <span class="string">'phpinfo();'</span> | grep <span class="string">'php.ini'</span></span><br></pre></td></tr></table></figure><p><code>/usr/local/php/bin/php</code>就是PHP编译安装后所在的路径。</p><p><img src="http://static.staryjie.com/static/images/20190409155837.png" alt></p><p>如图所示，<code>php.ini</code>文件应该放在<code>/usr/local/php/lib/</code>目录下面。</p><h3 id="2-生成php-ini文件"><a href="#2-生成php-ini文件" class="headerlink" title="2.生成php.ini文件"></a>2.生成<code>php.ini</code>文件</h3><p>一般在PHP源码包中都会有现成的默认配置文件存在，只需要根据需要将他们做一定的修改即可使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@ggy-php ~]<span class="comment"># find /tools/php-7.1.9/ -name "php.ini*"</span></span><br><span class="line">/tools/php-7.1.9/php.ini-production</span><br><span class="line">/tools/php-7.1.9/php.ini-development</span><br><span class="line">[root@ggy-php ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>通过find命令可以找到两个配置文件，一个是开发环境使用的，一个是生产环境使用的。根据自己的需要，修改配置文件并复制到<code>/usr/local/php/lib/</code>目录下，重启PHP即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /tools/php-7.1.9/php.ini-production /usr/local/php/lib/php.ini</span><br><span class="line">killall php-fpm</span><br><span class="line">/usr/local/php/sbin/php-fpm &amp;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们编译安装PHP的时候，编译安装完成是不会自动生成php.ini文件的，所以需要我们手动生成。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>FTP服务搭建配置</title>
    <link href="http://yoursite.com/2019/09/27/FTP%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/09/27/FTP服务搭建配置/</id>
    <published>2019-09-27T06:45:08.000Z</published>
    <updated>2019-09-27T06:46:09.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、什么是文件共享服务？"><a href="#1、什么是文件共享服务？" class="headerlink" title="1、什么是文件共享服务？"></a>1、什么是文件共享服务？</h3><p>简单来说就是文件域存储块设备可以共享给他人使用。</p><h4 id="1-1-实现文件共享服务的三种方式"><a href="#1-1-实现文件共享服务的三种方式" class="headerlink" title="1.1 实现文件共享服务的三种方式"></a>1.1 实现文件共享服务的三种方式</h4><ol><li>FTP：属于应用层服务，可以跨平台使用</li><li>NFS：属于内核模式，不可以跨平台使用</li><li><p>Samba：可以跨平台使用</p><a id="more"></a><h4 id="1-2-实现存储设备域服务器连接的三种方式"><a href="#1-2-实现存储设备域服务器连接的三种方式" class="headerlink" title="1.2 实现存储设备域服务器连接的三种方式"></a>1.2 实现存储设备域服务器连接的三种方式</h4></li><li><p>DAS：连接磁盘</p></li><li>NAS：通过nfs/cifs协议实现网络文件共享(文件存储方式)，电子邮件、网页服务器、多媒体流服务、档案分享等就适用于NAS存储架构</li><li>SAS：通过网线或者光纤实现ISCSI和FCSAN将物理存储设备连接起来使用(块存储方式比较底层，需要格式化并挂载当本地磁盘使用)，数据库有关的应用适用于SAS存储架构</li></ol><h3 id="2、FTP简介"><a href="#2、FTP简介" class="headerlink" title="2、FTP简介"></a>2、FTP简介</h3><p>FTP是File Transfer Protocol文件传输协议的缩写，基于网络来传输文件的应用层协议。</p><p>FTP能够通过网络来传输文件，主要是因为工作再应用层所以不会受到平台的限制。</p><h4 id="2-1-FTP的工作方式"><a href="#2-1-FTP的工作方式" class="headerlink" title="2.1 FTP的工作方式"></a>2.1 FTP的工作方式</h4><p><img src="http://static.staryjie.com/static/images/20190702114521.png" alt></p><p>客户端通过TCP三次握手与服务端建立连接，连接建立成功之后才可以进行文件传输。</p><ol><li>FTP的数据传输分为命令数据与文件数据，命令传输的就是客户端要执行的命令，服务端收到后返回给客户端执行结果，如ls命令就返回给当前目录下的所有文件个目录。文件传输就是客户端要传输的数据，服务端与客户端连接来传输文件数据。</li><li>FTP的服务端与客户端建立连接大体有三个步骤，建立连接、传输数据、断开连接。</li><li>FTP是基于TCP协议来传输数据的，使用21端口来建立认证通道，20端口来建立数据通道。</li><li>FTP是明文传输的。</li><li>FTP的用户可以分为实体用户(real user)，匿名用户(anonymous user)，访客用户(guest user)。</li></ol><h4 id="2-2-FTP的工作模式"><a href="#2-2-FTP的工作模式" class="headerlink" title="2.2 FTP的工作模式"></a>2.2 FTP的工作模式</h4><p>由于现在的网络架构中都会有防火墙来阻止端口与高位端口被主动连接，特别20端口是被禁止主动连接的，因为20端口是FTP的数据端口，所以为了解决客户端或者服务端的防火墙问题，FTP就有了主动和被动两种工作模式，通过防火墙内的一端来主动连接防火墙外端的一方，这样子就不会被防火墙阻拦。</p><h5 id="2-2-1-主动模式"><a href="#2-2-1-主动模式" class="headerlink" title="2.2.1 主动模式"></a>2.2.1 主动模式</h5><p><img src="http://static.staryjie.com/static/images/20190703095025.png" alt></p><p>一般用于服务端存在防火墙的情况，客户端无法主动连接到服务端的20数据端口，需要由服务端主动连接到客户端的两个端口。</p><ol><li>两端在建立TCP通信通道后，客户端会发送port请求与服务端的21端口认证连接并开放用来建立数据连接的高位端口。</li><li>服务端在收到请求后，会通过20端口发送ACK响应请求。</li><li>服务端通过20端口与客户端发送的高位端口建立数据连接通道。</li></ol><h5 id="2-2-2-被动模式"><a href="#2-2-2-被动模式" class="headerlink" title="2.2.2 被动模式"></a>2.2.2 被动模式</h5><p><img src="http://static.staryjie.com/static/images/20190703095051.png" alt></p><p>一般用于客户端存在防火墙的情况，服务端在收到连接请求后因为客户端存在防火墙而无法达到客户端高位端口，需要客户端主动连接至服务端的数据传输端口。</p><ol><li>两端在建立TCP通信通道连接后，客户端会发送PASV请求给服务端。</li><li>服务端在收到PASV请求后就会打开一个高位端口作为数据传输端口来响应给客户端等待客户端连接。</li><li>客户端在收到响应后，就会去连接服务端响应的端口建立数据传输通道。</li></ol><h4 id="2-3-FTP的用户类型"><a href="#2-3-FTP的用户类型" class="headerlink" title="2.3 FTP的用户类型"></a>2.3 FTP的用户类型</h4><ol><li><p>匿名用户</p><p>anonymous或ftp</p></li><li><p>本地用户</p><p>账号名称、密码等信息保存在passwd、shadow文件中</p></li><li><p>虚拟用户</p><p>使用独立的账号/密码数据文件</p><p>user_list ftp_user1  123456  /var/pub</p></li></ol><h3 id="3、VSFTPD的安装及使用"><a href="#3、VSFTPD的安装及使用" class="headerlink" title="3、VSFTPD的安装及使用"></a>3、VSFTPD的安装及使用</h3><p>官方网站：<a href="http://vsftpd.beasts.org" target="_blank" rel="noopener">http://vsftpd.beasts.org</a></p><h4 id="3-1-关闭防火墙和SELINUX"><a href="#3-1-关闭防火墙和SELINUX" class="headerlink" title="3.1 关闭防火墙和SELINUX"></a>3.1 关闭防火墙和SELINUX</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disabled firewalled.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.关闭SELINUX</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 2.1 永久关闭，需要重启服务器</span></span></span><br><span class="line">sed -i 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/sysconfig/selinux</span><br><span class="line">reboot</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 2.2 临时关闭</span></span></span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><h4 id="3-2-安装vsftpd"><a href="#3-2-安装vsftpd" class="headerlink" title="3.2 安装vsftpd"></a>3.2 安装vsftpd</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure><h4 id="3-3-查看安装生成的文件"><a href="#3-3-查看安装生成的文件" class="headerlink" title="3.3 查看安装生成的文件"></a>3.3 查看安装生成的文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[root@ftp ~]# rpm -qa|grep vsftpd</span><br><span class="line">vsftpd-3.0.2-25.el7.x86_64</span><br><span class="line">[root@ftp ~]# rpm -ql vsftpd</span><br><span class="line">/etc/logrotate.d/vsftpd</span><br><span class="line">/etc/pam.d/vsftpd# pam认证文件</span><br><span class="line">/etc/vsftpd</span><br><span class="line">/etc/vsftpd/ftpusers# 限制登录文件</span><br><span class="line">/etc/vsftpd/user_list</span><br><span class="line">/etc/vsftpd/vsftpd.conf# 主配置文件</span><br><span class="line">/etc/vsftpd/vsftpd_conf_migrate.sh</span><br><span class="line">/usr/lib/systemd/system-generators/vsftpd-generator</span><br><span class="line">/usr/lib/systemd/system/vsftpd.service</span><br><span class="line">/usr/lib/systemd/system/vsftpd.target</span><br><span class="line">/usr/lib/systemd/system/vsftpd@.service</span><br><span class="line">/usr/sbin/vsftpd# 程序文件</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/AUDIT</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/BENCHMARKS</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/BUGS</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/COPYING</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/Changelog</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE/README.configuration</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE/vsftpd.conf</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE/vsftpd.xinetd</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE_NOINETD</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE_NOINETD/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE_NOINETD/README.configuration</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/INTERNET_SITE_NOINETD/vsftpd.conf</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/PER_IP_CONFIG</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/PER_IP_CONFIG/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/PER_IP_CONFIG/README.configuration</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/PER_IP_CONFIG/hosts.allow</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_HOSTS</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_HOSTS/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS/README.configuration</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS/logins.txt</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS/vsftpd.conf</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS/vsftpd.pam</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS_2</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/EXAMPLE/VIRTUAL_USERS_2/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/FAQ</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/INSTALL</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/LICENSE</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/README</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/README.security</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/REWARD</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/SECURITY</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/SECURITY/DESIGN</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/SECURITY/IMPLEMENTATION</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/SECURITY/OVERVIEW</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/SECURITY/TRUST</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/SIZE</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/SPEED</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/TODO</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/TUNING</span><br><span class="line">/usr/share/doc/vsftpd-3.0.2/vsftpd.xinetd</span><br><span class="line">/usr/share/man/man5/vsftpd.conf.5.gz</span><br><span class="line">/usr/share/man/man8/vsftpd.8.gz</span><br><span class="line">/var/ftp# FTP家目录</span><br><span class="line">/var/ftp/pub</span><br><span class="line">[root@ftp ~]#</span><br></pre></td></tr></table></figure><h4 id="3-4-基于匿名用户的访问控制"><a href="#3-4-基于匿名用户的访问控制" class="headerlink" title="3.4 基于匿名用户的访问控制"></a>3.4 基于匿名用户的访问控制</h4><p>要配置基于匿名用户的访问控制，需要修改vsftpd的主配置文件<code>/etc/vsftpd/vsftpd.conf</code>，主要有下面几个参数：</p><ul><li>anonymous_enable=YES：启用匿名用户</li><li>anon_upload_enable=YES：允许匿名用户上传文件</li><li>anon_mkdir_write_enable=YES：是否允许匿名用户创建目录，要考虑文件系统上的家目录，必须要有写权限</li><li>anon_other_write_enable=YES：允许匿名用户更多于上传或者建立目录之外的权限，譬如删除或者重命名</li><li>anon_umask=077：指定上传文件的默认所有者和权限</li></ul><h5 id="3-4-1-运行匿名用户登录"><a href="#3-4-1-运行匿名用户登录" class="headerlink" title="3.4.1 运行匿名用户登录"></a>3.4.1 运行匿名用户登录</h5><p>不修改配置文件直接启动后，直接通过FTP软件连接即可，用户名默认是ftp，没有密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start vsftpd.service</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190703141914.png" alt></p><p>但是此时匿名用户是不能上传文件和创建目录的：</p><p><img src="http://static.staryjie.com/static/images/20190703142455.png" alt></p><h5 id="3-4-2-运行匿名用户上传文件、创建目录"><a href="#3-4-2-运行匿名用户上传文件、创建目录" class="headerlink" title="3.4.2 运行匿名用户上传文件、创建目录"></a>3.4.2 运行匿名用户上传文件、创建目录</h5><p>开启允许匿名用户上传文件和创建文件夹的权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/vsftpd/</span><br><span class="line">vim vsftpd.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启下面三个权限</span></span><br><span class="line">anonymous_enable=YES</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入ftp家目录，创建一个文件夹并授权</span></span><br><span class="line">[root@ftp ~]# cd /var/ftp/</span><br><span class="line">[root@ftp ftp]# mkdir -p ./testdir</span><br><span class="line">[root@ftp ftp]# setfacl -m u:ftp:rwx ./testdir/</span><br><span class="line">[root@ftp ftp]# getfacl ./testdir/</span><br><span class="line"><span class="meta">#</span><span class="bash"> file: testdir/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> owner: root</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">user:ftp:rwx</span><br><span class="line">group::r-x</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br><span class="line">[root@ftp ftp]#</span><br></pre></td></tr></table></figure><p>重新登录ftp，在testdir目录中可以创建目录和上传文件，但是却没有删除文件和重命名文件的权限。</p><p><img src="http://static.staryjie.com/static/images/20190705170142.png" alt></p><h5 id="3-4-3-开启匿名用户删除和重命名权限"><a href="#3-4-3-开启匿名用户删除和重命名权限" class="headerlink" title="3.4.3 开启匿名用户删除和重命名权限"></a>3.4.3 开启匿名用户删除和重命名权限</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加下面的内容，重启vsftpd服务</span></span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure><p>测试删除文件和重命名：</p><p><img src="http://static.staryjie.com/static/images/20190703145738.png" alt></p><h4 id="3-5-基于本地用户的访问控制"><a href="#3-5-基于本地用户的访问控制" class="headerlink" title="3.5 基于本地用户的访问控制"></a>3.5 基于本地用户的访问控制</h4><p>默认情况下，操作系统的账户是可以直接使用用户名和密码登陆的。并且登陆之后，默认进入自己的家目录。</p><p>基于本地用户的访问控制也通过修改vsftpd的配置文件来实现，主要有一下几个参数：</p><ol><li>local_enable=YES：是否允许Linux用户登录，默认是允许的，当然也可以禁止</li><li>write_enable=YES：是否允许系统用户上传文件</li><li>local_root=/ftproot：非匿名用户登录所在目录，当使用Linux用户登录成功之后，就不会默认在自己的家目录了。相反，会位于指定的目录之下</li><li>local_umask=022：指定系统用户上传文件的默认权限</li></ol><h5 id="3-5-1-允许系统用户登录并上传文件"><a href="#3-5-1-允许系统用户登录并上传文件" class="headerlink" title="3.5.1 允许系统用户登录并上传文件"></a>3.5.1 允许系统用户登录并上传文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认以下三个参数都是开启的</span></span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加一个系统用户并设置密码</span></span><br><span class="line">useradd centos</span><br><span class="line">echo "123456"|passwd --stdin centos</span><br></pre></td></tr></table></figure><p>系统用户默认具有上传文件、创建目录、删除和重命名的权限。</p><p><img src="http://static.staryjie.com/static/images/20190703150846.png" alt></p><p>系统用户默认也可以进入其他目录，所以并不安全，所以如果要启用系统用户登陆FTP那么就要修改配置文件，禁止系统用户访问除了家目录以外的其他目录。</p><h5 id="3-5-2-配置本地用户只能访问自己的家目录"><a href="#3-5-2-配置本地用户只能访问自己的家目录" class="headerlink" title="3.5.2 配置本地用户只能访问自己的家目录"></a>3.5.2 配置本地用户只能访问自己的家目录</h5><p>修改vsftpd.conf配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启下面的参数</span></span><br><span class="line">chroot_local_user=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个参数是全局的，开启后所有的本地用户都不能访问除了家目录以外的目录</span></span><br></pre></td></tr></table></figure><p>但是开启这个参数之后，由于vsftpd更新到2.3.5之后，vsftpd增强了安全检查，如果用户被限定在了其主目录下，则该用户的主目录不能再具有写权限了！如果检查发现还有写权限，就会报该错误。</p><p>要解决这个错误有两种方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.方式一：将对应家目录的写权限去除</span></span><br><span class="line">chmod a-w /home/centos</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.方式二：在配置文件在加入下面的参数</span></span><br><span class="line">allow_writeable_chroot=YES</span><br></pre></td></tr></table></figure><h5 id="3-5-3-配置指定的本地用户只能访问家目录"><a href="#3-5-3-配置指定的本地用户只能访问家目录" class="headerlink" title="3.5.3 配置指定的本地用户只能访问家目录"></a>3.5.3 配置指定的本地用户只能访问家目录</h5><p>配置指定用户只能访问家目录，其他用户可以访问其他目录，需要在配置文件中关闭全局设置的参数<code>allow_writeable_chroot=YES</code>，开启下面两个参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chroot_list_enable=YES</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br></pre></td></tr></table></figure><p>然后需要创建指定的文件<code>chroot_list</code>并在文件中指定对应的用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/chroot_list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 限制只能在家目录</span></span><br><span class="line">centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启vsftpd服务</span></span><br><span class="line">systemctl restart vsftpd.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个用户并设置密码</span></span><br><span class="line">useradd redhat</span><br><span class="line">echo "123456"|passwd --stdin redhat</span><br></pre></td></tr></table></figure><p>用centos用户访问，只能在自己的家目录中：</p><p><img src="http://static.staryjie.com/static/images/20190703162409.png" alt></p><p>用redhat用户访问，可以访问除了家目录以外的其他目录：</p><p><img src="http://static.staryjie.com/static/images/20190703162439.png" alt></p><h4 id="3-6-设置chroot"><a href="#3-6-设置chroot" class="headerlink" title="3.6 设置chroot"></a>3.6 设置chroot</h4><p>在默认配置中，本地用户可以切换到自己家目录以外的其他目录进行浏览，并在权限许可的范围内进行下载和上传。这样的设置对于一个FTP服务器来说是不安全的。</p><p>如果希望本地用户登录之后不能访问除了家目录以外的目录，则需要设置chroot选项，具体设置下面三个选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chroot_local_user</span><br><span class="line">chroot_list_enable</span><br><span class="line">chroot_list_file</span><br></pre></td></tr></table></figure><h5 id="3-6-1-设置所有用户只需chroot"><a href="#3-6-1-设置所有用户只需chroot" class="headerlink" title="3.6.1 设置所有用户只需chroot"></a>3.6.1 设置所有用户只需chroot</h5><p>只需要将<code>chroot_local_user</code>选项设置为<code>YES</code>，所有的本地用户都只能访问自己的家目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chroot_local_user=YES</span><br></pre></td></tr></table></figure><h5 id="2-6-2-设置部分指定用户执行chroot"><a href="#2-6-2-设置部分指定用户执行chroot" class="headerlink" title="2.6.2 设置部分指定用户执行chroot"></a>2.6.2 设置部分指定用户执行chroot</h5><p>需要注释全局的设置或者设为NO，然后开启另外两个选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chroot_local_user=NO</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line">chroot_list_file=/etc/vaftpd/chroot_list</span><br></pre></td></tr></table></figure><p>这样，文件<code>/etc/vaftpd/chroot_list</code>中的用户就只能访问自己的家目录，其他本地用户可以访问除了家目录的其他目录。</p><p>配置基于本地用户的访问限制，需要修改配置文件，主要有以下两种方式：</p><ol><li><p>限制指定的本地用户不能访问，而其他本地用户可以访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userlist_enable=YES</span><br><span class="line">userlist_deny=YES</span><br><span class="line">userlist_file=/etc/vsftpd/user_list</span><br></pre></td></tr></table></figure><p>使文件/etc/vsftpd/user_list中指定的本地用户不能访问FTP服务器，而其他的本地用户可以访问FTP服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userlist_enable=YES</span><br><span class="line">userlist_deny=NO</span><br><span class="line">userlist_file=/etc/vsftpd/user_list</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-7-提示信息"><a href="#3-7-提示信息" class="headerlink" title="3.7 提示信息"></a>3.7 提示信息</h4><h5 id="3-7-1-登陆提示信息"><a href="#3-7-1-登陆提示信息" class="headerlink" title="3.7.1 登陆提示信息"></a>3.7.1 登陆提示信息</h5><p>登陆提示信息图形界面(FTP软件)是看不到的，只适用于ftp作为客户端的时候。可以使用下面的方式进行配置。但是优先级却不一样。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果限制用户只能访问家目录，下面这个配置优先生效</span></span><br><span class="line">ftpd_banner="Welcome to Mage Ftp Server!"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面这个优先级较上一个配置低</span></span><br><span class="line">banner_file=/etc/vsftpd/ftpbanner.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其他情况当两个配置都在的时候，默认banner_file的优先生效</span></span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190703165059.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190703164725.png" alt></p><h5 id="3-7-2-访问目录提示信息"><a href="#3-7-2-访问目录提示信息" class="headerlink" title="3.7.2 访问目录提示信息"></a>3.7.2 访问目录提示信息</h5><p>当用户进入某一目录后，可以给用户一个提示消息。用来提示这个目录的作用。在相应的目录下新建一个隐藏文件<code>.message</code>，该文件中进行提示信息描述。需要添加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dirmessage_enable=YES</span><br><span class="line">message_file=.message</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在/var/ftp/pub下新建.message</span></span><br><span class="line">vim /var/ftp/pub/.message</span><br><span class="line">This is the public floder.</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190703165457.png" alt></p><h4 id="3-8-进一步配置VSFTPD"><a href="#3-8-进一步配置VSFTPD" class="headerlink" title="3.8 进一步配置VSFTPD"></a>3.8 进一步配置VSFTPD</h4><h5 id="3-8-1-最大传输速率限制"><a href="#3-8-1-最大传输速率限制" class="headerlink" title="3.8.1 最大传输速率限制"></a>3.8.1 最大传输速率限制</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_max_rate=50000</span><br><span class="line">anon_max_rate=30000</span><br></pre></td></tr></table></figure><p>上面的设置是将本地用户的最大传输速率限制为50kbytes/s，匿名用户最大传输速率限制为30kbytes/s。</p><h5 id="3-8-2-设置客户端连接时的端口范围"><a href="#3-8-2-设置客户端连接时的端口范围" class="headerlink" title="3.8.2 设置客户端连接时的端口范围"></a>3.8.2 设置客户端连接时的端口范围</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pasv_min_port=50000</span><br><span class="line">pasv_max_port=60000</span><br></pre></td></tr></table></figure><p>上面的设置将客户端连接时的端口范围限制在50000-60000之间，提高系统安全性。</p><h5 id="3-8-3-基本性能和安全选项配置"><a href="#3-8-3-基本性能和安全选项配置" class="headerlink" title="3.8.3 基本性能和安全选项配置"></a>3.8.3 基本性能和安全选项配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.设置空闲用户会话中断时间(单位:秒)</span></span><br><span class="line">idle_session_timeout=6000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.设置空闲的数据连接的终端时间(单位:秒)</span></span><br><span class="line">date_connection_timeout=120</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.设置客户端空闲时的自动中断和激活连接时间(单位:秒)</span></span><br><span class="line">accept_timeout=60</span><br><span class="line">connect_timeout=60</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上面的配置将是客户端1分钟后自动中断，在中断一分钟后自动激活连接</span></span><br></pre></td></tr></table></figure><h3 id="4、VSFTPD虚拟用户"><a href="#4、VSFTPD虚拟用户" class="headerlink" title="4、VSFTPD虚拟用户"></a>4、VSFTPD虚拟用户</h3><h4 id="4-1-虚拟用户"><a href="#4-1-虚拟用户" class="headerlink" title="4.1 虚拟用户"></a>4.1 虚拟用户</h4><ul><li>所有虚拟用户会统一映射为一个指定的系统账号：访问共享设置，即为此系统账号的家目录。</li><li>各虚拟账户可以被赋予不同的访问权限，通过匿名用户的权限控制参数进行指定。</li></ul><h4 id="4-2-虚拟账号的存储方式"><a href="#4-2-虚拟账号的存储方式" class="headerlink" title="4.2 虚拟账号的存储方式"></a>4.2 虚拟账号的存储方式</h4><h5 id="4-2-1-文本"><a href="#4-2-1-文本" class="headerlink" title="4.2.1 文本"></a>4.2.1 文本</h5><p>编辑文本文件，该文件需要被编码为hash格式。奇数行为用户名、偶数行为密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db_load -T -t hash -f vusers.txt vusers.db</span><br></pre></td></tr></table></figure><ul><li><p>基于文件验证的vsftpd虚拟用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.创建用户数据库文件</span></span><br><span class="line">vim /etc/vsftpd/vusers.txt</span><br><span class="line">zhangsan</span><br><span class="line">123456</span><br><span class="line">lisi</span><br><span class="line">123456</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 生成数据库文件</span></span><br><span class="line">cd /etc/vsftpd/</span><br><span class="line">db_load -T -t hash -f vusers.txt vusers.db</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.修改数据库文件权限</span></span><br><span class="line">chmod 600 ./vusers.db</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.创建系统用户和访问FTP目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建系统用户并指定家目录</span></span><br><span class="line">useradd -d /var/ftproot -s /sbin/nologin vuser</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改家目录权限</span></span><br><span class="line">chmod +rwx /var/ftproot</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.创建pam配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改pam配置文件，让vsftpd支持pam模块进行身份验证</span></span><br><span class="line">vim /etc/pam.d/vsftpd.db</span><br><span class="line">auth required pam_userdb.so db=/etc/vsftpd/vusers</span><br><span class="line">account required pam_userdb.so db=/etc/vsftpd/vusers</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.修改vsftpd主配置文件指定pam配置文件</span></span><br><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">guest_enable=YES</span><br><span class="line">guest_username=vuser</span><br><span class="line">pam_service_name=vsftpd.db</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7.修改虚拟用户权限配置</span></span><br><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">user_config_dir=/etc/vsftpd/vusers.d/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建配置目录并给用户设置权限(权限配置文件与用户名一样)</span></span><br><span class="line">mkdir -p /etc/vsftpd/vusers.d/</span><br><span class="line">cd /etc/vsftpd/vusers.d/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 给zhangsan设置权限</span></span><br><span class="line">vim zhangsan</span><br><span class="line"><span class="meta">#</span><span class="bash"> 虚拟用户上传权限</span></span><br><span class="line">anon_upload_enable=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"> 虚拟用户创建文件夹</span></span><br><span class="line">anon_mkdir_write_enable=NO</span><br><span class="line"><span class="meta">#</span><span class="bash"> 虚拟的其他用户对指定用户目录的写权限</span></span><br><span class="line">anon_other_write_enable=NO</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改登录目录至其他目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> local_root=/ftproot</span></span><br></pre></td></tr></table></figure><p>重启vsftpd服务，用zhangsan用户登录，只能上传文件，不能创建文件夹和删除文件：</p><p><img src="http://static.staryjie.com/static/images/20190705150335.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 给lisi配置权限</span></span><br><span class="line">cd /etc/vsftpd/vusers.d/</span><br><span class="line">vim lisi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 虚拟用户上传权限</span></span><br><span class="line">anon_upload_enable=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"> 虚拟用户创建文件夹</span></span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"> 虚拟的其他用户对指定用户目录的写权限</span></span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改登录目录至其他目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash">local_root=/ftproot</span></span><br></pre></td></tr></table></figure><p>重启vsftpd服务，用lisi账号登陆，可以上传、新建、删除：</p><p><img src="http://static.staryjie.com/static/images/20190705150834.png" alt></p></li></ul><h5 id="4-2-2-关系型数据库"><a href="#4-2-2-关系型数据库" class="headerlink" title="4.2.2 关系型数据库"></a>4.2.2 关系型数据库</h5><p>实时查询数据库完成用户认证。</p><ul><li><p>MySQL</p><p><a href="https://www.cnblogs.com/zhenhui/p/5916116.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhenhui/p/5916116.html</a></p><p>pam需要依赖于pam_mysql</p><ul><li>/lib/security/pam_mysql.so</li><li>/usr/share/doc/pam_mysql-0.7/README</li></ul></li></ul><ol><li>安装MySQL及pam_mysql插件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mariadb-server pam-devel mariadb-devel vsftpd ftp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载pam_mysql源码包</span></span><br><span class="line">wget http://www.huzs.net/soft/vsftpd/pam_mysql-0.7RC1.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译安装pam_mysql</span></span><br><span class="line">tar xf pam_mysql-0.7RC1.tar.gz &amp;&amp; cd pam_mysql-0.7RC1</span><br><span class="line">./configure --with-openssl --with-pam-mods-dir=/lib/security/</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ol><li>创建vsftpd数据库和用户表</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动数据库</span></span><br><span class="line">systemctl enable mariadb.service</span><br><span class="line">systemctl start mariadb.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化数据库</span></span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> vsftpd;</span><br><span class="line"><span class="keyword">use</span> vsftpd;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> AUTO_INCREMENT <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">20</span>) <span class="built_in">binary</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">password</span> <span class="built_in">char</span>(<span class="number">48</span>) <span class="built_in">binary</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190705154517.png" alt></p><ol><li>创建虚拟用户</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span>(<span class="keyword">name</span>,<span class="keyword">password</span>) <span class="keyword">values</span>(<span class="string">'jack'</span>,<span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>)),(<span class="string">'tom'</span>,<span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>));</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190705154758.png" alt></p><ol><li>授权</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> vsftpd.* <span class="keyword">TO</span> <span class="string">'vsftpd'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'vsftpdpass'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> vsftpd.* <span class="keyword">TO</span> <span class="string">'vsftpd'</span>@<span class="string">'127.0.0.1'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'vsftpdpass'</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><ol><li>配置pam认证</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.建立pam认证所需文件</span></span><br><span class="line">vim /etc/pam.d/vsftpd.mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.添加下面两行</span></span><br><span class="line">auth required /lib/security/pam_mysql.so user=vsftpd passwd=vsftpdpass host=127.0.0.1 db=vsftpd table=users usercolumn=name passwdcolumn=password crypt=2</span><br><span class="line">account required /lib/security/pam_mysql.so user=vsftpd passwd=vsftpdpass host=127.0.0.1 db=vsftpd table=users usercolumn=name passwdcolumn=password crypt=2</span><br></pre></td></tr></table></figure><ol><li>创建虚拟用户的映射用户</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin -d /var/ftproot vuser</span><br><span class="line">setfacl -m u:vuser:rwx /var/ftproot</span><br></pre></td></tr></table></figure><ol><li>修改vsftpd的配置文件，使其适应mysql认证</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">pam_service_name=vsftpd.mysql</span><br><span class="line">guest_enable=YES</span><br><span class="line">guest_username=vuser</span><br></pre></td></tr></table></figure><ol><li>配置虚拟用户具有不同的访问权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.配置虚拟用户有单独的权限设定</span></span><br><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">user_config_dir=/etc/vsftpd/vusers_conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.创建所需目录，并为虚拟用户提供配置文件</span></span><br><span class="line">mkdir /etc/vsftpd/vusers_conf</span><br><span class="line">cd /etc/vsftpd/vusers_conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置虚拟用户具有不同的访问权限</span></span><br><span class="line">vim jack</span><br><span class="line"><span class="meta">#</span><span class="bash"> 写入以下内容</span></span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line"></span><br><span class="line">vim tom</span><br><span class="line"><span class="meta">#</span><span class="bash"> 写入以下内容</span></span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=NO</span><br><span class="line">anon_other_write_enable=NO</span><br></pre></td></tr></table></figure><ol><li>重启vsftpd服务并测试</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure><p>登陆jack账户，有上传、新建、删除、重命名的权限：</p><p><img src="http://static.staryjie.com/static/images/20190705161128.png" alt></p><p>登陆tom账户，只有上传的权限：</p><p><img src="http://static.staryjie.com/static/images/20190705161328.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、什么是文件共享服务？&quot;&gt;&lt;a href=&quot;#1、什么是文件共享服务？&quot; class=&quot;headerlink&quot; title=&quot;1、什么是文件共享服务？&quot;&gt;&lt;/a&gt;1、什么是文件共享服务？&lt;/h3&gt;&lt;p&gt;简单来说就是文件域存储块设备可以共享给他人使用。&lt;/p&gt;
&lt;h4 id=&quot;1-1-实现文件共享服务的三种方式&quot;&gt;&lt;a href=&quot;#1-1-实现文件共享服务的三种方式&quot; class=&quot;headerlink&quot; title=&quot;1.1 实现文件共享服务的三种方式&quot;&gt;&lt;/a&gt;1.1 实现文件共享服务的三种方式&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;FTP：属于应用层服务，可以跨平台使用&lt;/li&gt;
&lt;li&gt;NFS：属于内核模式，不可以跨平台使用&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Samba：可以跨平台使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="FTP" scheme="http://yoursite.com/categories/FTP/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="FTP" scheme="http://yoursite.com/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装Anaconda3</title>
    <link href="http://yoursite.com/2019/09/27/Mac%E4%B8%8B%E5%AE%89%E8%A3%85Anaconda3/"/>
    <id>http://yoursite.com/2019/09/27/Mac下安装Anaconda3/</id>
    <published>2019-09-27T06:42:54.000Z</published>
    <updated>2019-09-27T06:43:41.947Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-下载Anaconda3安装包"><a href="#1-下载Anaconda3安装包" class="headerlink" title="1.下载Anaconda3安装包"></a>1.下载Anaconda3安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.0-MacOSX-x86_64.pkg</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><p>正常安装</p><h3 id="3-添加环境变量"><a href="#3-添加环境变量" class="headerlink" title="3.添加环境变量"></a>3.添加环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 'export PATH="~/anaconda3/bin:$PATH"' &gt;&gt; ~/.bash_profile</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><h3 id="4-检查"><a href="#4-检查" class="headerlink" title="4.检查"></a>4.检查</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --versions</span><br></pre></td></tr></table></figure><blockquote><p>参考：<br><a href="http://python.jobbole.com/86236/" target="_blank" rel="noopener">Anaconda使用总结 - Python - 伯乐在线</a></p></blockquote><p><a href="https://www.jianshu.com/p/d250a4245d81" target="_blank" rel="noopener">macOS Anaconda 安装和卸载 - 简书</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-下载Anaconda3安装包&quot;&gt;&lt;a href=&quot;#1-下载Anaconda3安装包&quot; class=&quot;headerlink&quot; title=&quot;1.下载Anaconda3安装包&quot;&gt;&lt;/a&gt;1.下载Anaconda3安装包&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.0-MacOSX-x86_64.pkg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>Mac下Homebrew的安装与使用</title>
    <link href="http://yoursite.com/2019/09/27/Mac%E4%B8%8BHomebrew%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/27/Mac下Homebrew的安装与使用/</id>
    <published>2019-09-27T06:29:49.000Z</published>
    <updated>2019-09-27T06:30:37.929Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Homebrew是什么？"><a href="#Homebrew是什么？" class="headerlink" title="Homebrew是什么？"></a>Homebrew是什么？</h3><p>官方解释：<br>Homebrew是以最简单，最灵活的方式来安装苹果公司在MacOS中不包含的UNIX工具。 </p><a id="more"></a><h3 id="Homebrew-怎么安装-？怎么卸载-？"><a href="#Homebrew-怎么安装-？怎么卸载-？" class="headerlink" title="Homebrew 怎么安装 ？怎么卸载 ？"></a>Homebrew 怎么安装 ？怎么卸载 ？</h3><ol><li>安装，打开终端，复制粘贴，大约1分钟左右，下载完成，过程中需要输入密码，其他无需任何操作：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><ol><li>卸载，有安装就要有卸载，打开终端，复制粘贴：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"</span><br></pre></td></tr></table></figure><h3 id="Homebrew-怎么使用？常用命令有哪些？"><a href="#Homebrew-怎么使用？常用命令有哪些？" class="headerlink" title="Homebrew 怎么使用？常用命令有哪些？"></a>Homebrew 怎么使用？常用命令有哪些？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装软件，如：brew install oclint</span><br><span class="line">卸载软件，如：brew uninstall oclint</span><br><span class="line">搜索软件，如：brew search oclint</span><br><span class="line">更新软件，如：brew upgrade oclint</span><br><span class="line">查看安装列表， 如：brew list</span><br><span class="line">更新Homebrew，如：brew update</span><br></pre></td></tr></table></figure><h3 id="安装wget命令"><a href="#安装wget命令" class="headerlink" title="安装wget命令"></a>安装wget命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install wget --with-libressl</span><br></pre></td></tr></table></figure><h3 id="安装ftp客户端"><a href="#安装ftp客户端" class="headerlink" title="安装ftp客户端"></a>安装ftp客户端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install telnet </span><br><span class="line">brew install inetutils </span><br><span class="line">brew link --overwrite inetutils</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Homebrew是什么？&quot;&gt;&lt;a href=&quot;#Homebrew是什么？&quot; class=&quot;headerlink&quot; title=&quot;Homebrew是什么？&quot;&gt;&lt;/a&gt;Homebrew是什么？&lt;/h3&gt;&lt;p&gt;官方解释：&lt;br&gt;Homebrew是以最简单，最灵活的方式来安装苹果公司在MacOS中不包含的UNIX工具。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins构建完成之后运行脚本可以杀掉TomCat但是起不来的解决方法</title>
    <link href="http://yoursite.com/2019/09/27/Jenkins%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%88%90%E4%B9%8B%E5%90%8E%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%E5%8F%AF%E4%BB%A5%E6%9D%80%E6%8E%89TomCat%E4%BD%86%E6%98%AF%E8%B5%B7%E4%B8%8D%E6%9D%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/27/Jenkins构建完成之后运行脚本可以杀掉TomCat但是起不来的解决方法/</id>
    <published>2019-09-27T06:17:31.000Z</published>
    <updated>2019-09-27T06:23:11.431Z</updated>
    
    <content type="html"><![CDATA[<p>写了一个重启TomCat的脚本，让jenkins编译、打包、发布时调用。在本地写好重启tomcat的脚本后，本地执行脚本没有问题，但在远程服务器上SSH免密登录执行后。发现可以把TomCat杀死，但TomCat却起不来。试了很多次发现都是只能够杀掉TomCat但是启动不起来。</p><p>百度了一下，有人说脚本远程运行的话，远程会话结束以后会把这个子进程干掉。也就是说当Jenkins远程执行完这个脚本之后，这个脚本所衍生的所有子进程都会被杀掉。<br><a id="more"></a><br>重启Tomcat的脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>重启tomcat服务器</span><br><span class="line">pid=`lsof -i:8080|awk 'NR==2&#123;print $2&#125;'`</span><br><span class="line">kill -9 $pid</span><br><span class="line">sh /home/tomcat/bin/startup.sh &amp;</span><br></pre></td></tr></table></figure><p>为了证实这一说法，修改了脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>重启tomcat服务器</span><br><span class="line">pid=`lsof -i:8080|awk 'NR==2&#123;print $2&#125;'`</span><br><span class="line">kill -9 $pid</span><br><span class="line">cd /home/tomcat/bin/</span><br><span class="line">sh ./startup.sh</span><br><span class="line">sleep 60</span><br></pre></td></tr></table></figure><p>Jenkins再次构建并执行该脚本，发现TomCat启来了，有日志了，也看到端口了，60秒后端口就自动消失了，同时这个不会写到日志里。说明上面关于远程执行的脚本会话结束以后会把这个子进程干掉的说法是成立的。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在脚本的启动命令前加上nohup ,即如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sh /home/tomcat/bin/startup.sh &amp;</span><br></pre></td></tr></table></figure><p>或者：</p><p>在使用jenkins的时候shell脚本里边加上这一行就行了：<code>BUILD_ID=DONTKILLME</code></p><p>在jenkins中配置自动更新部署项目时，如果采取用execute shell启动/关闭tomcat，会发现可以进行关闭tomcat，但是无法启动tomcat，虽然构建会显示执行成功，但是查看进程，tomcat是没有启动的。这是因为Jenkins默认会在Build结束后Kill掉所有的衍生进程。需要进行以下配置，才能避免此类情况发生:重设环境变量build_id，在execute shell输入框中加入BUILD_ID=DONTKILLME,即可防止jenkins杀死启动的tomcat进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BUILD_ID=DONTKILLME</span><br><span class="line"><span class="meta">#</span>重启tomcat服务器</span><br><span class="line">pid=`lsof -i:8080|awk 'NR==2&#123;print $2&#125;'`</span><br><span class="line">kill -9 $pid</span><br><span class="line">sh /home/tomcat/bin/startup.sh &amp;</span><br></pre></td></tr></table></figure><p>参考链接：<br><a href="https://www.cnblogs.com/superjt/p/4079013.html" target="_blank" rel="noopener">SSH远程启动tomcat后，退出SSH,tomcat也退出</a><br><a href="http://blog.csdn.net/zhengxu189891/article/details/18710155" target="_blank" rel="noopener">jenkins中通过execute shell启动的进程会被杀死的问题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写了一个重启TomCat的脚本，让jenkins编译、打包、发布时调用。在本地写好重启tomcat的脚本后，本地执行脚本没有问题，但在远程服务器上SSH免密登录执行后。发现可以把TomCat杀死，但TomCat却起不来。试了很多次发现都是只能够杀掉TomCat但是启动不起来。&lt;/p&gt;
&lt;p&gt;百度了一下，有人说脚本远程运行的话，远程会话结束以后会把这个子进程干掉。也就是说当Jenkins远程执行完这个脚本之后，这个脚本所衍生的所有子进程都会被杀掉。&lt;br&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>修改mysql时区的三种方法</title>
    <link href="http://yoursite.com/2019/09/27/%E4%BF%AE%E6%94%B9mysql%E6%97%B6%E5%8C%BA%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/27/修改mysql时区的三种方法/</id>
    <published>2019-09-27T06:15:30.000Z</published>
    <updated>2019-09-27T06:16:55.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法一：通过mysql命令行模式下动态修改"><a href="#方法一：通过mysql命令行模式下动态修改" class="headerlink" title="方法一：通过mysql命令行模式下动态修改"></a>方法一：通过mysql命令行模式下动态修改</h3><h4 id="1-1-查看mysql当前时间，当前时区"><a href="#1-1-查看mysql当前时间，当前时区" class="headerlink" title="1.1 查看mysql当前时间，当前时区"></a>1.1 查看mysql当前时间，当前时区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select curtime();  <span class="comment">#或select now()也可以</span></span></span><br><span class="line">+-----------+</span><br><span class="line">| curtime() |</span><br><span class="line">+-----------+</span><br><span class="line">| 15:18:10 |</span><br><span class="line">+-----------+</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show variables like <span class="string">"%time_zone%"</span>;</span></span><br><span class="line">+------------------+--------+</span><br><span class="line">| Variable_name  | Value |</span><br><span class="line">+------------------+--------+</span><br><span class="line">| system_time_zone | CST  |</span><br><span class="line">| time_zone    | SYSTEM |</span><br><span class="line">+------------------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>time_zone说明mysql使用system的时区，system_time_zone说明system使用CST时区</p></blockquote><a id="more"></a><h4 id="1-2-修改时区"><a href="#1-2-修改时区" class="headerlink" title="1.2 修改时区"></a>1.2 修改时区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; set global time_zone = &apos;+8:00&apos;; ##修改mysql全局时区为北京时间，即我们所在的东8区</span><br><span class="line">&gt; set time_zone = &apos;+8:00&apos;; ##修改当前会话时区</span><br><span class="line">&gt; flush privileges; #立即生效</span><br></pre></td></tr></table></figure><h3 id="方法二：通过修改my-cnf配置文件来修改时区"><a href="#方法二：通过修改my-cnf配置文件来修改时区" class="headerlink" title="方法二：通过修改my.cnf配置文件来修改时区"></a>方法二：通过修改my.cnf配置文件来修改时区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vim /etc/my.cnf ##在[mysqld]区域中加上</span><br><span class="line">default-time_zone = &apos;+8:00&apos;</span><br><span class="line"># /etc/init.d/mysqld restart ##重启mysql使新时区生效</span><br></pre></td></tr></table></figure><h3 id="方法三：如果不方便重启mysql，又想临时解决时区问题，可以通过php或其他语言在初始化mysql时初始化mysql时区"><a href="#方法三：如果不方便重启mysql，又想临时解决时区问题，可以通过php或其他语言在初始化mysql时初始化mysql时区" class="headerlink" title="方法三：如果不方便重启mysql，又想临时解决时区问题，可以通过php或其他语言在初始化mysql时初始化mysql时区"></a>方法三：如果不方便重启mysql，又想临时解决时区问题，可以通过php或其他语言在初始化mysql时初始化mysql时区</h3><p>这里，以php为例，在mysql_connect()下使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(&quot;SET time_zone = &apos;+8:00&apos;&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>这样可以在保证你不重启的情况下改变时区。但是mysql的某些系统函数还是不能用如：now()。这句，还是不能理解。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方法一：通过mysql命令行模式下动态修改&quot;&gt;&lt;a href=&quot;#方法一：通过mysql命令行模式下动态修改&quot; class=&quot;headerlink&quot; title=&quot;方法一：通过mysql命令行模式下动态修改&quot;&gt;&lt;/a&gt;方法一：通过mysql命令行模式下动态修改&lt;/h3&gt;&lt;h4 id=&quot;1-1-查看mysql当前时间，当前时区&quot;&gt;&lt;a href=&quot;#1-1-查看mysql当前时间，当前时区&quot; class=&quot;headerlink&quot; title=&quot;1.1 查看mysql当前时间，当前时区&quot;&gt;&lt;/a&gt;1.1 查看mysql当前时间，当前时区&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; select curtime();  &lt;span class=&quot;comment&quot;&gt;#或select now()也可以&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| curtime() |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 15:18:10 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; show variables like &lt;span class=&quot;string&quot;&gt;&quot;%time_zone%&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+--------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Variable_name  | Value |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+--------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| system_time_zone | CST  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| time_zone    | SYSTEM |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+--------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 rows in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;time_zone说明mysql使用system的时区，system_time_zone说明system使用CST时区&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>解决zabbix设置为中文后图形中中文乱码的问题</title>
    <link href="http://yoursite.com/2019/09/27/%E8%A7%A3%E5%86%B3zabbix%E8%AE%BE%E7%BD%AE%E4%B8%BA%E4%B8%AD%E6%96%87%E5%90%8E%E5%9B%BE%E5%BD%A2%E4%B8%AD%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/09/27/解决zabbix设置为中文后图形中中文乱码的问题/</id>
    <published>2019-09-27T06:08:10.000Z</published>
    <updated>2019-09-27T06:13:35.480Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、下载汉化的字体"><a href="#1、下载汉化的字体" class="headerlink" title="1、下载汉化的字体"></a>1、下载汉化的字体</h3><p>zabbix3.4中，存放字体的目录在<code>/usr/share/zabbix/fonts/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /usr/share/zabbix/fonts/msyh.ttf https://raw.githubusercontent.com/chenqing/ng-mini/master/font/msyh.ttf</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h3><p>修改<code>/usr/share/zabbix/include/defines.inc.php</code>文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/share/zabbix/include/defines.inc.php</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20180620140701.png" alt></p><p><img src="http://static.staryjie.com/static/images/20180620140744.png" alt></p><h3 id="3、重启zabbix-server"><a href="#3、重启zabbix-server" class="headerlink" title="3、重启zabbix-server"></a>3、重启zabbix-server</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-server.service</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20180620140937.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、下载汉化的字体&quot;&gt;&lt;a href=&quot;#1、下载汉化的字体&quot; class=&quot;headerlink&quot; title=&quot;1、下载汉化的字体&quot;&gt;&lt;/a&gt;1、下载汉化的字体&lt;/h3&gt;&lt;p&gt;zabbix3.4中，存放字体的目录在&lt;code&gt;/usr/share/zabbix/fonts/&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget -O /usr/share/zabbix/fonts/msyh.ttf https://raw.githubusercontent.com/chenqing/ng-mini/master/font/msyh.ttf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="zabbix" scheme="http://yoursite.com/categories/zabbix/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS将U盘格式化为ext2/3/4格式</title>
    <link href="http://yoursite.com/2019/09/27/Mac-OS%E5%B0%86U%E7%9B%98%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%BAext2-3-4%E6%A0%BC%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/09/27/Mac-OS将U盘格式化为ext2-3-4格式/</id>
    <published>2019-09-27T06:04:35.000Z</published>
    <updated>2019-09-27T06:13:25.198Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、安装HomeBrew"><a href="#1、安装HomeBrew" class="headerlink" title="1、安装HomeBrew"></a>1、安装HomeBrew</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、安装e2fsprogs插件"><a href="#2、安装e2fsprogs插件" class="headerlink" title="2、安装e2fsprogs插件"></a>2、安装e2fsprogs插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install e2fsprogs</span><br></pre></td></tr></table></figure><h3 id="3、找到U盘盘符"><a href="#3、找到U盘盘符" class="headerlink" title="3、找到U盘盘符"></a>3、找到U盘盘符</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskutil list</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190728191811.png" alt></p><h3 id="4、取消U盘挂载"><a href="#4、取消U盘挂载" class="headerlink" title="4、取消U盘挂载"></a>4、取消U盘挂载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskutil unmountdisk /dev/disk2</span><br></pre></td></tr></table></figure><h3 id="5、格式化为ext4格式"><a href="#5、格式化为ext4格式" class="headerlink" title="5、格式化为ext4格式"></a>5、格式化为ext4格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo $(brew --prefix e2fsprogs)/sbin/mkfs.ext4 /dev/disk2</span><br></pre></td></tr></table></figure><p>回车，输入 Mac 密码再回车，过程需要稍等片刻，等待完成即可拔掉 U盘，这时候 U盘格式已经为 ext4 了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、安装HomeBrew&quot;&gt;&lt;a href=&quot;#1、安装HomeBrew&quot; class=&quot;headerlink&quot; title=&quot;1、安装HomeBrew&quot;&gt;&lt;/a&gt;1、安装HomeBrew&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7安装Google Authenticator进行登陆二次验证</title>
    <link href="http://yoursite.com/2019/09/27/CentOS-7%E5%AE%89%E8%A3%85Google-Authenticator%E8%BF%9B%E8%A1%8C%E7%99%BB%E9%99%86%E4%BA%8C%E6%AC%A1%E9%AA%8C%E8%AF%81/"/>
    <id>http://yoursite.com/2019/09/27/CentOS-7安装Google-Authenticator进行登陆二次验证/</id>
    <published>2019-09-27T05:57:12.000Z</published>
    <updated>2019-09-27T05:58:00.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-* mercurial autoconf automake libtool pam-devel</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、安装google-authenticator"><a href="#2、安装google-authenticator" class="headerlink" title="2、安装google-authenticator"></a>2、安装google-authenticator</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y google-authenticator</span><br></pre></td></tr></table></figure><h3 id="4、PAM组件配置google-authenticator"><a href="#4、PAM组件配置google-authenticator" class="headerlink" title="4、PAM组件配置google-authenticator"></a>4、PAM组件配置google-authenticator</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pam.d/sshd</span><br><span class="line">auth required pam_google_authenticator.so</span><br><span class="line"><span class="meta">#</span> 或者</span><br><span class="line">echo   "auth       required     pam_google_authenticator.so" &gt;&gt;/etc/pam.d/sshd</span><br></pre></td></tr></table></figure><h3 id="5、修改SSH配置"><a href="#5、修改SSH配置" class="headerlink" title="5、修改SSH配置"></a>5、修改SSH配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="meta">#</span> 将</span><br><span class="line">ChallengeResponseAuthentication no</span><br><span class="line"><span class="meta">#</span> 改为</span><br><span class="line">ChallengeResponseAuthentication yes</span><br><span class="line"><span class="meta">#</span> 或者</span><br><span class="line">sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><h3 id="6、重启SSH服务"><a href="#6、重启SSH服务" class="headerlink" title="6、重启SSH服务"></a>6、重启SSH服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure><h3 id="7、生成google-authenticator配置"><a href="#7、生成google-authenticator配置" class="headerlink" title="7、生成google-authenticator配置"></a>7、生成google-authenticator配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">google-authenticator</span><br><span class="line">Do you want authentication tokens to be time-based (y/n) y</span><br><span class="line">Warning: pasting the following URL into your browser exposes the OTP secret to Google:</span><br><span class="line">  https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/root@demo%3Fsecret%3DXQ2WB526GLPJ7SI64Z3RZISOEE%26issuer%3Ddemo</span><br><span class="line">                                                        </span><br><span class="line">                                                                                  </span><br><span class="line">                                                                                  </span><br><span class="line">                                                                                  </span><br><span class="line">             这里会有一个二维码，需要在手机上下载`googleauthenticator`APP扫码绑定</span><br><span class="line">             安卓 IOS手机都可以在应用商店搜索安装</span><br><span class="line">                                                                                  </span><br><span class="line">                                                                                  </span><br><span class="line">                                                                                                                                                                     </span><br><span class="line">Your new secret key is: XQ2WB526GLPJ7SI64Z3RZISOEE</span><br><span class="line">Your verification code is 917990</span><br><span class="line">Your emergency scratch codes are:</span><br><span class="line">  42623319</span><br><span class="line">  72314571</span><br><span class="line">  14476695</span><br><span class="line">  95764389</span><br><span class="line">  38976136</span><br><span class="line"></span><br><span class="line">Do you want me to update your "/root/.google_authenticator" file? (y/n) y</span><br><span class="line"></span><br><span class="line">Do you want to disallow multiple uses of the same authentication</span><br><span class="line">token? This restricts you to one login about every 30s, but it increases</span><br><span class="line">your chances to notice or even prevent man-in-the-middle attacks (y/n) y</span><br><span class="line"></span><br><span class="line">By default, a new token is generated every 30 seconds by the mobile app.</span><br><span class="line">In order to compensate for possible time-skew between the client and the server,</span><br><span class="line">we allow an extra token before and after the current time. This allows for a</span><br><span class="line">time skew of up to 30 seconds between authentication server and client. If you</span><br><span class="line">experience problems with poor time synchronization, you can increase the window</span><br><span class="line">from its default size of 3 permitted codes (one previous code, the current</span><br><span class="line">code, the next code) to 17 permitted codes (the 8 previous codes, the current</span><br><span class="line">code, and the 8 next codes). This will permit for a time skew of up to 4 minutes</span><br><span class="line">between client and server.</span><br><span class="line">Do you want to do so? (y/n) y</span><br><span class="line"></span><br><span class="line">If the computer that you are logging into isn't hardened against brute-force</span><br><span class="line">login attempts, you can enable rate-limiting for the authentication module.</span><br><span class="line">By default, this limits attackers to no more than 3 login attempts every 30s.</span><br><span class="line">Do you want to enable rate-limiting? (y/n) y</span><br></pre></td></tr></table></figure><h3 id="8、调整XShell登陆配置"><a href="#8、调整XShell登陆配置" class="headerlink" title="8、调整XShell登陆配置"></a>8、调整XShell登陆配置</h3><p>XShell登陆需要更改为Keyboard Interactive验证登陆。</p><p><img src="http://static.staryjie.com/static/images/20190614102458.png" alt="img"></p><h3 id="9、登陆时需要结合手机APP上的验证码才可以登陆"><a href="#9、登陆时需要结合手机APP上的验证码才可以登陆" class="headerlink" title="9、登陆时需要结合手机APP上的验证码才可以登陆"></a>9、登陆时需要结合手机APP上的验证码才可以登陆</h3><p>登陆的时候选择Keyboard Interactive验证登陆。</p><p><img src="http://static.staryjie.com/static/images/20190614103039.png" alt></p><p>然后输入服务器密码</p><p><img src="http://static.staryjie.com/static/images/20190614103127.png" alt></p><p>输入手机APP上的验证码</p><p><img src="http://static.staryjie.com/static/images/20190614103231.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190614102721.png" alt></p><p>登陆成功</p><p><img src="http://static.staryjie.com/static/images/20190614103304.png" alt></p><blockquote><p>因为手机上的 google authenticator这个APP是根据时间来生成随机验证码的，所以必须保证服务器上的时间和手机时间一致，不然可能会出现无法登陆的情况！</p><p>建议安装时间同步服务器或者安装一个自动同步时间的软件(例如：chrony)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y chrony</span><br><span class="line">systemctl enable chronyd</span><br><span class="line">systemctl start chronyd</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、安装依赖&quot;&gt;&lt;a href=&quot;#1、安装依赖&quot; class=&quot;headerlink&quot; title=&quot;1、安装依赖&quot;&gt;&lt;/a&gt;1、安装依赖&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y epel-* mercurial autoconf automake libtool pam-devel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Security" scheme="http://yoursite.com/categories/Security/"/>
    
    
      <category term="Security" scheme="http://yoursite.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins自定义主题安装</title>
    <link href="http://yoursite.com/2019/09/27/Jenkins%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/09/27/Jenkins自定义主题安装/</id>
    <published>2019-09-27T05:50:54.000Z</published>
    <updated>2019-09-27T05:51:59.070Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>首先必须先安装<code>Simple Theme Plugin</code>插件</p></li><li><p>在<a href="http://afonsof.com/jenkins-material-theme/网站中生成需要的主题css文件" target="_blank" rel="noopener">http://afonsof.com/jenkins-material-theme/网站中生成需要的主题css文件</a></p></li><li><p>将<code>jenkins-material-theme.css</code>文件上传到Jenkins服务器</p></li><li><p>创建目录，并将css文件放在对应的目录中。Jenkins默认的目录在<code>/var/jenkins_home/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/jenkins_home/userContent/material/</span><br><span class="line">cp jenkins-material-theme.css /var/jenkins_home/userContent/material/</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>在Jenkins中设置</li></ul><p><img src="http://static.staryjie.com/static/images/20190715152354.png" alt></p><ul><li>保存之后会自动重新加载主题</li></ul><p><img src="http://static.staryjie.com/static/images/20190715152442.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先必须先安装&lt;code&gt;Simple Theme Plugin&lt;/code&gt;插件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;a href=&quot;http://afonsof.com/jenkins-material-theme/网站中生成需要的主题css文件&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://afonsof.com/jenkins-material-theme/网站中生成需要的主题css文件&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将&lt;code&gt;jenkins-material-theme.css&lt;/code&gt;文件上传到Jenkins服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建目录，并将css文件放在对应的目录中。Jenkins默认的目录在&lt;code&gt;/var/jenkins_home/&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p /var/jenkins_home/userContent/material/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp jenkins-material-theme.css /var/jenkins_home/userContent/material/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+GitLab+Ansible-playbook的环境安装(yum)</title>
    <link href="http://yoursite.com/2019/09/27/Jenkins-GitLab-Ansible-playbook%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-yum/"/>
    <id>http://yoursite.com/2019/09/27/Jenkins-GitLab-Ansible-playbook的环境安装-yum/</id>
    <published>2019-09-27T05:49:43.000Z</published>
    <updated>2019-09-27T06:58:33.972Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、安装GitLab"><a href="#1、安装GitLab" class="headerlink" title="1、安装GitLab"></a>1、安装GitLab</h3><h4 id="1-1-配置gitlab的yum源"><a href="#1-1-配置gitlab的yum源" class="headerlink" title="1.1 配置gitlab的yum源"></a>1.1 配置gitlab的yum源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 参考：https://packages.gitlab.com/gitlab/gitlab-ce/install#bash-rpm</span><br><span class="line">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh|bash</span><br><span class="line">yum install -y gitlab-ce</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="1-2-启动GitLab与管理"><a href="#1-2-启动GitLab与管理" class="headerlink" title="1.2 启动GitLab与管理"></a>1.2 启动GitLab与管理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl start</span><br><span class="line">gitlab-ctl status</span><br><span class="line">gitlab-ctl stop</span><br><span class="line">gitlab-ctl restart</span><br><span class="line">ps -aux|grep runsvdir</span><br></pre></td></tr></table></figure><h3 id="2、安装JDK"><a href="#2、安装JDK" class="headerlink" title="2、安装JDK"></a>2、安装JDK</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk</span><br></pre></td></tr></table></figure><h3 id="3、安装Jenkins"><a href="#3、安装Jenkins" class="headerlink" title="3、安装Jenkins"></a>3、安装Jenkins</h3><h4 id="3-1-配置Jenkins的yum源"><a href="#3-1-配置Jenkins的yum源" class="headerlink" title="3.1 配置Jenkins的yum源"></a>3.1 配置Jenkins的yum源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line">rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure><h4 id="3-2-安装Jenkins"><a href="#3-2-安装Jenkins" class="headerlink" title="3.2 安装Jenkins"></a>3.2 安装Jenkins</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y jenkins</span><br></pre></td></tr></table></figure><h4 id="3-3-启动jenkins"><a href="#3-3-启动jenkins" class="headerlink" title="3.3 启动jenkins"></a>3.3 启动jenkins</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start jenkins</span><br><span class="line">systemctl enable jenkins</span><br><span class="line">systemctl status jenkins</span><br></pre></td></tr></table></figure><h4 id="3-4-修改Jenkins配置文件"><a href="#3-4-修改Jenkins配置文件" class="headerlink" title="3.4 修改Jenkins配置文件"></a>3.4 修改Jenkins配置文件</h4><h5 id="3-4-1-修改Jenkins运行用户"><a href="#3-4-1-修改Jenkins运行用户" class="headerlink" title="3.4.1 修改Jenkins运行用户"></a>3.4.1 修改Jenkins运行用户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 修改$JENKINS_USER，并去掉当前行的注释</span><br><span class="line"><span class="meta">$</span>JENKINS_USER='work'</span><br></pre></td></tr></table></figure><h5 id="3-4-2-修改Jenkins相关文件夹用户权限"><a href="#3-4-2-修改Jenkins相关文件夹用户权限" class="headerlink" title="3.4.2 修改Jenkins相关文件夹用户权限"></a>3.4.2 修改Jenkins相关文件夹用户权限</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown -R work:work /var/lib/jenkins</span><br><span class="line">chown -R work:work /var/cache/jenkins</span><br><span class="line">chown -R work:work /var/log/jenkins</span><br></pre></td></tr></table></figure><h5 id="3-4-3-重启Jenkins服务并检查运行Jenkins的用户是否已经切换为work"><a href="#3-4-3-重启Jenkins服务并检查运行Jenkins的用户是否已经切换为work" class="headerlink" title="3.4.3 重启Jenkins服务并检查运行Jenkins的用户是否已经切换为work"></a>3.4.3 重启Jenkins服务并检查运行Jenkins的用户是否已经切换为work</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart jenkins</span><br><span class="line">ps -ef|grep jenkins</span><br></pre></td></tr></table></figure><h4 id="3-5-Jenkins插件推荐"><a href="#3-5-Jenkins插件推荐" class="headerlink" title="3.5 Jenkins插件推荐"></a>3.5 Jenkins插件推荐</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.Git Parameter# 构建参数</span><br><span class="line">2.build-name-setter# $&#123;BUILD_NUMBER&#125;-$moudle-$release_tag</span><br><span class="line">3.user build vars plugin# 获取运行job的用户名</span><br><span class="line">4.Jenkins修改本地默认主题</span><br><span class="line">主题URL：http://afonsof.com/jenkins-material-theme/</span><br><span class="line">1) Jenkins安装 Simple Theme插件</span><br><span class="line">2) 浏览器下载stylish css导入服务器。放到 /var/cache/jenkins/war/css</span><br><span class="line">3) 然后在Jenkins的系统配置中添加Theme配置 http://10.0.0.100:8080/css/jenkins-material-theme.css</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、安装GitLab&quot;&gt;&lt;a href=&quot;#1、安装GitLab&quot; class=&quot;headerlink&quot; title=&quot;1、安装GitLab&quot;&gt;&lt;/a&gt;1、安装GitLab&lt;/h3&gt;&lt;h4 id=&quot;1-1-配置gitlab的yum源&quot;&gt;&lt;a href=&quot;#1-1-配置gitlab的yum源&quot; class=&quot;headerlink&quot; title=&quot;1.1 配置gitlab的yum源&quot;&gt;&lt;/a&gt;1.1 配置gitlab的yum源&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; 参考：https://packages.gitlab.com/gitlab/gitlab-ce/install#bash-rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh|bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install -y gitlab-ce&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Docker构建持续集成环境</title>
    <link href="http://yoursite.com/2019/09/27/Docker%E6%9E%84%E5%BB%BA%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2019/09/27/Docker构建持续集成环境/</id>
    <published>2019-09-27T05:43:13.000Z</published>
    <updated>2019-09-27T05:47:51.234Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、CI-CD介绍"><a href="#1、CI-CD介绍" class="headerlink" title="1、CI/CD介绍"></a>1、CI/CD介绍</h3><p>CI/CD是一个持续的闭环的流程。</p><p><img src="http://static.staryjie.com/static/images/20190626160504.png" alt="CI/CD"></p><a id="more"></a><h4 id="1-1-什么是CI？"><a href="#1-1-什么是CI？" class="headerlink" title="1.1 什么是CI？"></a>1.1 什么是CI？</h4><p>​        在软件工程中，持续集成（CI）是指将所有开发者的工作副本每天多次合并到主干的做法。Grady Booch 在1991年的 Booch method 中首次命名并提出了 CI 的概念，尽管在当时他并不主张每天多次集成。而 XP（Extreme programming，极限编程）采用了 CI 的概念，并提倡每天不止一次集成。</p><h4 id="1-2-什么是CD？"><a href="#1-2-什么是CD？" class="headerlink" title="1.2 什么是CD？"></a>1.2 什么是CD？</h4><p>​        持续交付/持续部署(CD)就是在持续集成的基础上，产品不断的迭代更新，最终能够交付到客户手中或者部署到生成环境。</p><h4 id="1-3-CI-CD的优点"><a href="#1-3-CI-CD的优点" class="headerlink" title="1.3 CI/CD的优点"></a>1.3 CI/CD的优点</h4><ol><li><p>解放了重复性劳动</p><p>自动化部署工作可以解放集成、测试、部署等重复性劳动，而机器集成的频率明显比手工高很多。</p></li><li><p>更快地修复问题</p><p>持续集成更早的获取变更，更早的进入测试，更早的发现问题，解决问题的成本显著下降。</p></li><li><p>更快的交付成果</p><p>更早发现错误减少解决错误所需的工作量。集成服务器在构建环节发现错误可以及时通知开发人员修复。集成服务器在部署环节发现错误可以回退到上一版本，服务器始终有一个可用的版本。</p></li><li><p>减少手工的错误</p><p>在重复性动作上，人容易犯错，而机器犯错的几率几乎为零。</p></li><li><p>减少了等待时间</p><p>缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间可以出现的等待时机。持续集成，意味着开发、集成、测试、部署也得以持续。</p></li><li><p>更高的产品质量</p><p>集成服务器往往提供代码质量检测等功能，对不规范或有错误的地方会进行标致，也可以设置邮件和短信等进行警告。</p></li></ol><h4 id="1-4-CI-CD最佳实践"><a href="#1-4-CI-CD最佳实践" class="headerlink" title="1.4 CI/CD最佳实践"></a>1.4 CI/CD最佳实践</h4><ol><li><p>频繁检出代码</p><p>有时候代码冲突无可避免，频繁检出代码，可以让本地的副本和代码库中的版本最小差异化。</p></li><li><p>频繁提交代码</p><p>与频繁检出代码的原理类似，频繁提交代码，可以让其他人检出副本和代码库中的版本最小差异化。</p></li><li><p>减少分支，回归主干</p><p>多个分支并行应及早将变更集成到主干中，避免同时维护软件的多个版本。</p></li><li><p>使用自动化构建</p><p>可以使用Maven、Ant等来实现自动化构建，可以在构建过程中实现自动化测试。前提是有写单元测试用例。</p></li><li><p>提交测试</p><p>在提交工作之前，每个程序员必须本地集成所有代码，做一个完整的构建和运行，并通过所有的单元测试，这样能减少集成测试在集成服务器上构建失败的风险。</p></li><li><p>当前状态对每个人都可见</p><p>集成服务器在持续集成过程中发现问题应及时发送警告给相关的干系人。</p></li></ol><h3 id="2、发布流程设计"><a href="#2、发布流程设计" class="headerlink" title="2、发布流程设计"></a>2、发布流程设计</h3><p><img src="http://static.staryjie.com/static/images/20190627094657.png" alt></p><h4 id="2-1-发布流程"><a href="#2-1-发布流程" class="headerlink" title="2.1 发布流程"></a>2.1 发布流程</h4><ol><li>开发将代码提交到Git服务器(GitLab/GitHub/SVN等)</li><li>Jenkins拉取Git服务器上的代码通过Maven或者Ant构建</li><li>docker结合脚本(docker build &amp; docker run)将构建好的代码封装在docker镜像中并推送到Docker镜像仓库</li><li>不同的环境的配置文件可以通过配置中心来配置，测试环境拉取对应的镜像和配置文件到测试环境中运行</li><li>测试通过后，结合配置中心，拉取镜像和正式环境配置文件，在正式环境中运行</li></ol><h4 id="2-2-配置中心的必要性"><a href="#2-2-配置中心的必要性" class="headerlink" title="2.2 配置中心的必要性"></a>2.2 配置中心的必要性</h4><p>​        配置中心能够根据不同的环境配置好不同的配置文件，免去了人工替换配置文件的步骤，减少了出错率，大大的提高持续集成、持续部署、持续交付的效率。目前常用的配置中心有<a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">apollo</a>和<a href="https://github.com/knightliao/disconf" target="_blank" rel="noopener">disconf</a>等。</p><p>​        配置中心的搭建可以在网上找到各种文档，也可以在参考官方的安装文档。<a href="https://blog.csdn.net/luhong327/article/details/81453001" target="_blank" rel="noopener">apollo安装</a>、<a href="https://www.cnblogs.com/garfieldcgf/p/6439221.html" target="_blank" rel="noopener">disconf安装</a></p><h3 id="3、部署Git服务器"><a href="#3、部署Git服务器" class="headerlink" title="3、部署Git服务器"></a>3、部署Git服务器</h3><h4 id="3-1-安装git"><a href="#3-1-安装git" class="headerlink" title="3.1 安装git"></a>3.1 安装git</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><h4 id="3-2-添加git用户并设置密码"><a href="#3-2-添加git用户并设置密码" class="headerlink" title="3.2 添加git用户并设置密码"></a>3.2 添加git用户并设置密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd git</span><br><span class="line">passwd git</span><br></pre></td></tr></table></figure><h4 id="3-3-创建项目"><a href="#3-3-创建项目" class="headerlink" title="3.3 创建项目"></a>3.3 创建项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.切换到git用户</span></span><br><span class="line">su - git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.创建项目</span></span><br><span class="line">mkdir -p solo.git</span><br><span class="line">cd solo.git/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.初始化项目</span></span><br><span class="line">git --bare init</span><br></pre></td></tr></table></figure><h4 id="4-4-Jenkins服务器实现免密码交互"><a href="#4-4-Jenkins服务器实现免密码交互" class="headerlink" title="4.4 Jenkins服务器实现免密码交互"></a>4.4 Jenkins服务器实现免密码交互</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.生成私钥</span></span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.将公钥发送到Git服务器</span></span><br><span class="line">ssh-copy-id git@10.0.0.20</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190629160945.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190629161138.png" alt></p><h3 id="4、部署Harbor镜像仓库"><a href="#4、部署Harbor镜像仓库" class="headerlink" title="4、部署Harbor镜像仓库"></a>4、部署Harbor镜像仓库</h3><h4 id="4-1-部署方式"><a href="#4-1-部署方式" class="headerlink" title="4.1 部署方式"></a>4.1 部署方式</h4><ol><li>在线安装</li><li>离线安装</li><li>OVA程序安装</li></ol><h4 id="4-2-离线安装"><a href="#4-2-离线安装" class="headerlink" title="4.2 离线安装"></a>4.2 离线安装</h4><h5 id="4-2-1-安装docker和docker-compose"><a href="#4-2-1-安装docker和docker-compose" class="headerlink" title="4.2.1 安装docker和docker-compose"></a>4.2.1 安装docker和docker-compose</h5><p>​        因为Harbor离线安装方式是基于docker-compose编排安装的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.获取docker-compose</span></span><br><span class="line">sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.给予可执行权限</span></span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.加入环境变量，有多种方式，个人认为下面的方式最简单有效</span></span><br><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.检查</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h5 id="4-2-2-下载Harbor离线安装包"><a href="#4-2-2-下载Harbor离线安装包" class="headerlink" title="4.2.2 下载Harbor离线安装包"></a>4.2.2 下载Harbor离线安装包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Harbor下载地址https://github.com/goharbor/harbor/releases</span></span><br><span class="line">cd /opt &amp;&amp; wget https://storage.googleapis.com/harbor-releases/release-1.8.0/harbor-offline-installer-v1.8.0.tgz</span><br></pre></td></tr></table></figure><h5 id="4-2-3-安装Harbor"><a href="#4-2-3-安装Harbor" class="headerlink" title="4.2.3 安装Harbor"></a>4.2.3 安装Harbor</h5><h6 id="4-2-3-1-解压安装包"><a href="#4-2-3-1-解压安装包" class="headerlink" title="4.2.3.1 解压安装包"></a>4.2.3.1 解压安装包</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.解压安装包</span></span><br><span class="line">tar xf harbor-offline-installer-v1.8.0.tar</span><br></pre></td></tr></table></figure><h6 id="4-2-3-2-修改配置文件"><a href="#4-2-3-2-修改配置文件" class="headerlink" title="4.2.3.2 修改配置文件"></a>4.2.3.2 修改配置文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/harbor/harbor.yml</span><br><span class="line"></span><br><span class="line">hostname: harbor.biu2ful.xyz</span><br><span class="line">https:</span><br><span class="line">   port: 443</span><br><span class="line">   certificate: /etc/docker/certs.d/harbor.biu2ful.xyz/ca.crt</span><br><span class="line">   private_key: /etc/docker/certs.d/harbor.biu2ful.xyz/ca.key</span><br><span class="line">harbor_admin_password: Harbor123456</span><br><span class="line">database:</span><br><span class="line">  password: root123</span><br><span class="line">data_volume: /data</span><br><span class="line">clair:</span><br><span class="line">  updaters_interval: 12</span><br><span class="line">  http_proxy:</span><br><span class="line">  https_proxy:</span><br><span class="line">  no_proxy: 127.0.0.1,localhost,core,registry</span><br><span class="line">jobservice:</span><br><span class="line">  max_job_workers: 10</span><br><span class="line">chart:</span><br><span class="line">  absolute_url: disabled</span><br><span class="line">log:</span><br><span class="line">  level: info</span><br><span class="line">  rotate_count: 50</span><br><span class="line">  rotate_size: 200M</span><br><span class="line">  location: /var/log/harbor</span><br><span class="line">_version: 1.8.0</span><br></pre></td></tr></table></figure><p>​        精简后的配置文件如下图：</p><p><img src="http://static.staryjie.com/static/images/20190630212517.png" alt></p><h6 id="4-2-3-3-生成对应的签名证书文件"><a href="#4-2-3-3-生成对应的签名证书文件" class="headerlink" title="4.2.3.3 生成对应的签名证书文件"></a>4.2.3.3 生成对应的签名证书文件</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.创建证书存放路径</span></span><br><span class="line">mkdir -p /etc/docker/certs.d/harbor.biu2ful.xyz/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.生成自签名证书key文件</span></span><br><span class="line">openssl genrsa -out /etc/docker/certs.d/harbor.biu2ful.xyz/ca.key 2048</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.生成自签名证书crt文件</span></span><br><span class="line">openssl req -x509 -new -nodes -key /etc/docker/certs.d/harbor.biu2ful.xyz/ca.key -subj "/CN=harbor.biu2ful.xyz" -days 100000 -out /etc/docker/certs.d/harbor.biu2ful.xyz/ca.crt</span><br></pre></td></tr></table></figure><h6 id="4-2-3-4-配置Harbor"><a href="#4-2-3-4-配置Harbor" class="headerlink" title="4.2.3.4 配置Harbor"></a>4.2.3.4 配置Harbor</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/harbor/ &amp;&amp; ./prepare</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215243.png" alt></p><h6 id="4-2-3-4-安装Harbor"><a href="#4-2-3-4-安装Harbor" class="headerlink" title="4.2.3.4 安装Harbor"></a>4.2.3.4 安装Harbor</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215318.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190630215331.png" alt></p><h4 id="4-3-客户端配置"><a href="#4-3-客户端配置" class="headerlink" title="4.3 客户端配置"></a>4.3 客户端配置</h4><h5 id="4-3-1-创建证书存放路径"><a href="#4-3-1-创建证书存放路径" class="headerlink" title="4.3.1 创建证书存放路径"></a>4.3.1 创建证书存放路径</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/docker/certs.d/harbor.biu2ful.xyz/</span><br></pre></td></tr></table></figure><h5 id="4-3-2-获取自签名证书crt文件"><a href="#4-3-2-获取自签名证书crt文件" class="headerlink" title="4.3.2 获取自签名证书crt文件"></a>4.3.2 获取自签名证书crt文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从Harbor所在服务器scp证书文件到docker客户端，其中10.0.0.30是docker客户端的地址，根据自己的对应修改。</span></span><br><span class="line">scp ca.crt root@10.0.0.30:/etc/docker/certs.d/harbor.biu2ful.xyz/</span><br></pre></td></tr></table></figure><h5 id="4-3-3-重启docker服务"><a href="#4-3-3-重启docker服务" class="headerlink" title="4.3.3 重启docker服务"></a>4.3.3 重启docker服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure><h4 id="4-4-测试是否能够正常使用"><a href="#4-4-测试是否能够正常使用" class="headerlink" title="4.4 测试是否能够正常使用"></a>4.4 测试是否能够正常使用</h4><h5 id="4-4-1浏览器访问"><a href="#4-4-1浏览器访问" class="headerlink" title="4.4.1浏览器访问"></a>4.4.1浏览器访问</h5><p>​        访问：<a href="https://harbor.biu2ful.xyz/" target="_blank" rel="noopener">https://harbor.biu2ful.xyz/</a></p><p><img src="http://static.staryjie.com/static/images/20190630215555.png" alt></p><h5 id="4-4-2-docker客户端登陆"><a href="#4-4-2-docker客户端登陆" class="headerlink" title="4.4.2 docker客户端登陆"></a>4.4.2 docker客户端登陆</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login harbor.biu2ful.xyz</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215733.png" alt></p><h5 id="4-4-3-推送和拉取镜像"><a href="#4-4-3-推送和拉取镜像" class="headerlink" title="4.4.3 推送和拉取镜像"></a>4.4.3 推送和拉取镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 推送镜像到Harbor仓库</span></span><br><span class="line">docker tag mysql:5.6 harbor.biu2ful.xyz/library/mysql:5.6</span><br><span class="line">docker push harbor.biu2ful.xyz/library/mysql:5.6</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215828.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从Harbor仓库拉取镜像</span></span><br><span class="line">docker image rm harbor.biu2ful.xyz/library/mysql:5.6</span><br><span class="line">docker pull harbor.biu2ful.xyz/library/mysql:5.6</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215855.png" alt></p><h3 id="5、构建业务基础镜像"><a href="#5、构建业务基础镜像" class="headerlink" title="5、构建业务基础镜像"></a>5、构建业务基础镜像</h3><h4 id="5-1-编写Dockerfile"><a href="#5-1-编写Dockerfile" class="headerlink" title="5.1 编写Dockerfile"></a>5.1 编写Dockerfile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER staryjie@gmail.com</span><br><span class="line"></span><br><span class="line">RUN yum install unzip iproute -y</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_141/</span><br><span class="line">ADD apache-tomcat-8.0.46.tar.gz /usr/local</span><br><span class="line">RUN mv /usr/local/apache-tomcat-8.0.46.tar.gz /usr/local/tomcat</span><br><span class="line">WORKDIR /usr/local/tomcat</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [&quot;./bin/catalina.sh&quot;, &quot;run&quot;]</span><br></pre></td></tr></table></figure><h4 id="5-2-通过Dockerfile构建镜像"><a href="#5-2-通过Dockerfile构建镜像" class="headerlink" title="5.2 通过Dockerfile构建镜像"></a>5.2 通过Dockerfile构建镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t tomcat:v1 .</span><br></pre></td></tr></table></figure><h4 id="5-3-将镜像推送到Harbor仓库"><a href="#5-3-将镜像推送到Harbor仓库" class="headerlink" title="5.3 将镜像推送到Harbor仓库"></a>5.3 将镜像推送到Harbor仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag tomcat:v1 harbor.biu2ful.xyz/test/tomcat:v</span><br><span class="line">docker push harbor.biu2ful.xyz/test/tomcat:v1</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190629163516.png" alt></p><h3 id="6、测试服务器安装Docker"><a href="#6、测试服务器安装Docker" class="headerlink" title="6、测试服务器安装Docker"></a>6、测试服务器安装Docker</h3><h4 id="6-1-安装依赖"><a href="#6-1-安装依赖" class="headerlink" title="6.1 安装依赖"></a>6.1 安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 chrony</span><br></pre></td></tr></table></figure><h5 id="6-2-添加阿里云的docker仓库"><a href="#6-2-添加阿里云的docker仓库" class="headerlink" title="6.2 添加阿里云的docker仓库"></a>6.2 添加阿里云的docker仓库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h5 id="6-3-安装docker"><a href="#6-3-安装docker" class="headerlink" title="6.3 安装docker"></a>6.3 安装docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h5 id="6-4-启动并设置开机自启"><a href="#6-4-启动并设置开机自启" class="headerlink" title="6.4 启动并设置开机自启"></a>6.4 启动并设置开机自启</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker.service</span><br><span class="line">systemctl enable docker.service</span><br></pre></td></tr></table></figure><h5 id="6-5-配置daocloud加速"><a href="#6-5-配置daocloud加速" class="headerlink" title="6.5 配置daocloud加速"></a>6.5 配置daocloud加速</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker.service</span><br><span class="line">systemctl enable docker.service</span><br><span class="line">systemctl start chronyd.service</span><br><span class="line">systemctl enable chronyd.service</span><br></pre></td></tr></table></figure><h5 id="6-6-重启docker服务"><a href="#6-6-重启docker服务" class="headerlink" title="6.6 重启docker服务"></a>6.6 重启docker服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h5 id="6-7-检查是否正常安装docker"><a href="#6-7-检查是否正常安装docker" class="headerlink" title="6.7 检查是否正常安装docker"></a>6.7 检查是否正常安装docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><blockquote><p> 下面是一个很简单的安装脚本：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.安装依赖</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 chrony</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.添加阿里云的docker仓库</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.安装docker</span></span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.启动并设置开机自启</span></span><br><span class="line">systemctl start docker.service</span><br><span class="line">systemctl enable docker.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. 配置daocloud加速</span></span><br><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.重启docker服务</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 7.检查是否正常安装docker</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="7、Jenkins安装"><a href="#7、Jenkins安装" class="headerlink" title="7、Jenkins安装"></a>7、Jenkins安装</h3><h4 id="7-1-构建jenkins镜像"><a href="#7-1-构建jenkins镜像" class="headerlink" title="7.1 构建jenkins镜像"></a>7.1 构建jenkins镜像</h4><p>​        编写Dockerfile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM jenkins/jenkins</span><br><span class="line">USER root</span><br><span class="line">RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; wget http://static.staryjie.com/sources.list -O /etc/apt/sources.list</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y git libltdl-dev</span><br></pre></td></tr></table></figure><p>​        通过Dockerfile构建镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t jenkins:v1 .</span><br></pre></td></tr></table></figure><blockquote><p>在安装的时候发现版本太低的Jenkins很多插件都装不上，建议使用最新版本的Jenkins。</p><p><a href="https://www.cnblogs.com/sxdcgaq8080/p/10489326.html" target="_blank" rel="noopener">https://www.cnblogs.com/sxdcgaq8080/p/10489326.html</a></p></blockquote><h4 id="7-2-通过镜像启动容器"><a href="#7-2-通过镜像启动容器" class="headerlink" title="7.2 通过镜像启动容器"></a>7.2 通过镜像启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name jenkins \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-p 50000:50000 \</span><br><span class="line"><span class="meta">#</span><span class="bash"> jenkins目录</span></span><br><span class="line">-v /var/jenkins_home/:/var/jenkins_home \</span><br><span class="line"><span class="meta">#</span><span class="bash"> 挂载宿主机maven到jenkins容器</span></span><br><span class="line">-v /usr/local/maven3.6/:/usr/local/maven \</span><br><span class="line"><span class="meta">#</span><span class="bash"> 挂载宿主机jdk到jenkins容器</span></span><br><span class="line">-v /usr/local/jdk1.8.0_141/:/usr/local/jdk \</span><br><span class="line"><span class="meta">#</span><span class="bash"> 挂载宿主机docker到jenkins容器</span></span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将docker相关命令挂载到jenkins容器</span></span><br><span class="line">-v $(which docker):/usr/bin/docker \</span><br><span class="line"><span class="meta">#</span><span class="bash"> 挂载sshkey，实现免密码</span></span><br><span class="line">-v ~/.ssh:/root/.ssh \</span><br><span class="line">jenkins:v1</span><br><span class="line"><span class="meta">#</span><span class="bash"> registry.cn-hangzhou.aliyuncs.com/harbor-aliyun/jenkins:v1</span></span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190629160309.png" alt></p><h4 id="7-3-浏览器访问http-ip-8080"><a href="#7-3-浏览器访问http-ip-8080" class="headerlink" title="7.3 浏览器访问http://ip:8080"></a>7.3 浏览器访问<a href="http://ip:8080" target="_blank" rel="noopener">http://ip:8080</a></h4><p><img src="http://static.staryjie.com/static/images/20190629160423.png" alt></p><h4 id="7-4-自定义安装Jenkins插件"><a href="#7-4-自定义安装Jenkins插件" class="headerlink" title="7.4 自定义安装Jenkins插件"></a>7.4 自定义安装Jenkins插件</h4><p><img src="http://static.staryjie.com/static/images/20190629161631.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190629161741.png" alt></p><h4 id="7-5-创建管理员账号"><a href="#7-5-创建管理员账号" class="headerlink" title="7.5 创建管理员账号"></a>7.5 创建管理员账号</h4><p><img src="http://static.staryjie.com/static/images/20190630124544.png" alt></p><h3 id="8、Jenkins基本配置"><a href="#8、Jenkins基本配置" class="headerlink" title="8、Jenkins基本配置"></a>8、Jenkins基本配置</h3><h4 id="8-1-配置Jenkins的URL"><a href="#8-1-配置Jenkins的URL" class="headerlink" title="8.1 配置Jenkins的URL"></a>8.1 配置Jenkins的URL</h4><p>​        根据自己的实际情况设置，可以直接是ip+端口，或者域名通过nginx或者其他web中间件代理。</p><p><img src="http://static.staryjie.com/static/images/20190630124656.png" alt></p><h4 id="8-2-开始使用Jenkins"><a href="#8-2-开始使用Jenkins" class="headerlink" title="8.2 开始使用Jenkins"></a>8.2 开始使用Jenkins</h4><p><img src="http://static.staryjie.com/static/images/20190630125049.png" alt></p><p>开始使用Jenkins之后进到Jenkins的首页：</p><p><img src="http://static.staryjie.com/static/images/20190630125137.png" alt></p><h4 id="8-3-系统管理-全局配置"><a href="#8-3-系统管理-全局配置" class="headerlink" title="8.3 系统管理-全局配置"></a>8.3 系统管理-全局配置</h4><h5 id="8-3-1-配置JDK"><a href="#8-3-1-配置JDK" class="headerlink" title="8.3.1 配置JDK"></a>8.3.1 配置JDK</h5><p>​        在启动jenkins容器的时候我们将宿主机的jdk挂载到了容器中，所以不需要勾选自动安装，只需要将启动时候指定的路径填写好即可：</p><p><img src="http://static.staryjie.com/static/images/20190630125555.png" alt></p><h5 id="8-3-2-配置git"><a href="#8-3-2-配置git" class="headerlink" title="8.3.2 配置git"></a>8.3.2 配置git</h5><p>​        git是通过yum安装的，所以配置直接使用默认的就可以：</p><p><img src="http://static.staryjie.com/static/images/20190630125837.png" alt></p><h5 id="8-3-3-配置Maven"><a href="#8-3-3-配置Maven" class="headerlink" title="8.3.3 配置Maven"></a>8.3.3 配置Maven</h5><p>​        和jdk配置一样，在启动jenkins容器的时候就已经将宿主机的Maven挂载在容器中了，所以只要配置好路径即可：</p><p><img src="http://static.staryjie.com/static/images/20190630130047.png" alt></p><h4 id="8-4-系统管理-系统配置"><a href="#8-4-系统管理-系统配置" class="headerlink" title="8.4 系统管理-系统配置"></a>8.4 系统管理-系统配置</h4><h5 id="8-4-1-SSH-remote-hosts配置"><a href="#8-4-1-SSH-remote-hosts配置" class="headerlink" title="8.4.1 SSH remote hosts配置"></a>8.4.1 SSH remote hosts配置</h5><p>​        增加一个Jenkins要访问的docker主机的ip，为了实现免密码交互，将Jenkins主机的公钥发送到docker主机：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id root@10.0.0.30</span><br></pre></td></tr></table></figure><p>​        在Jenkins中添加凭据：</p><p><img src="http://static.staryjie.com/static/images/20190630131002.png" alt></p><p>​        在系统配置中添加SSH remote hosts配置：</p><p><img src="http://static.staryjie.com/static/images/20190630131541.png" alt></p><h3 id="9、Jenkins创建项目"><a href="#9、Jenkins创建项目" class="headerlink" title="9、Jenkins创建项目"></a>9、Jenkins创建项目</h3><h4 id="9-1-创建项目"><a href="#9-1-创建项目" class="headerlink" title="9.1 创建项目"></a>9.1 创建项目</h4><p>​        在首页有一个创建新任务的选项。</p><p><img src="http://static.staryjie.com/static/images/20190630131704.png" alt></p><p>​        创建一个Maven的项目：</p><p><img src="http://static.staryjie.com/static/images/20190630131803.png" alt></p><h4 id="9-2-项目配置"><a href="#9-2-项目配置" class="headerlink" title="9.2 项目配置"></a>9.2 项目配置</h4><h5 id="9-2-1-源码管理"><a href="#9-2-1-源码管理" class="headerlink" title="9.2.1 源码管理"></a>9.2.1 源码管理</h5><p>​        在源码管理选项中选择自己的源码管理方式和源码拉取地址：</p><p><img src="http://static.staryjie.com/static/images/20190630132104.png" alt></p><h5 id="9-2-2-Maven构建前-配置Maven跳过项目测试用例"><a href="#9-2-2-Maven构建前-配置Maven跳过项目测试用例" class="headerlink" title="9.2.2 Maven构建前-配置Maven跳过项目测试用例"></a>9.2.2 Maven构建前-配置Maven跳过项目测试用例</h5><p>​        参数是：clean package -Dmaven.test.skip=true</p><p><img src="http://static.staryjie.com/static/images/20190630132326.png" alt></p><h5 id="9-2-3-Maven构建后配置"><a href="#9-2-3-Maven构建后配置" class="headerlink" title="9.2.3 Maven构建后配置"></a>9.2.3 Maven构建后配置</h5><p>​        通过构建后配置将war包基于基础业务镜像进行构建新的镜像，并上传到Harbor镜像仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd $WORKSPACE</span><br><span class="line">docker login -u admin -p Harbor123456 harbor.biu2ful.xyz</span><br><span class="line">cat &gt; Dockerfile &lt;&lt; EOF</span><br><span class="line">FROM harbor.biu2ful.xyz/test/tomcat:v1</span><br><span class="line">MAINTAINER staryjie@gmail.com</span><br><span class="line"></span><br><span class="line">COPY target/solo.war /tmp/ROOT.war</span><br><span class="line">RUN rm -rf /usr/local/tomcat/webapps/* &amp;&amp;  \</span><br><span class="line">         unzip /tmp/ROOT.war -d /usr/local/tomcat/webapps/ROOT &amp;&amp; \</span><br><span class="line">         rm -f /tmp/ROOT.war</span><br><span class="line">ENTRYPOINT ["./bin/catalina.sh", "run"]</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker build -t harbor.biu2ful.xyz/test/solo:v1 .</span><br><span class="line">docker push harbor.biu2ful.xyz/test/solo:v1</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630143110.png" alt></p><h5 id="9-2-4-构建完成后在远程主机上执行命令"><a href="#9-2-4-构建完成后在远程主机上执行命令" class="headerlink" title="9.2.4 构建完成后在远程主机上执行命令"></a>9.2.4 构建完成后在远程主机上执行命令</h5><p>​        上一步将新构建的镜像推送到Harbor仓库，这一步通过仓库的镜像在远程主机上启动一个容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BUILD_ID=DONTKILLME</span><br><span class="line">docker login -uadmin -pHarbor123456 harbor.biu2ful.xyz</span><br><span class="line">docker rm -f solo|true</span><br><span class="line">docker image rm -f harbor.biu2ful.xyz/test/solo:v1|true</span><br><span class="line">docker run -d --name solo -p 8888:8080 -v /usr/local/jdk1.8.0_141/:/usr/local/jdk1.8.0_141/ harbor.biu2ful.xyz/test/solo:v1</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630144948.png" alt></p><h3 id="10、测试"><a href="#10、测试" class="headerlink" title="10、测试"></a>10、测试</h3><h4 id="10-1-将项目代码推送到Git服务器"><a href="#10-1-将项目代码推送到Git服务器" class="headerlink" title="10.1 将项目代码推送到Git服务器"></a>10.1 将项目代码推送到Git服务器</h4><p>​        这里通过一个GitHub上java的开源博客系统来测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.将Git服务器新建的仓库<span class="built_in">clone</span>到本地</span></span><br><span class="line">cd /root/cicd &amp;&amp; git clone root@10.0.0.20:/home/git/solo.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.获取代码</span></span><br><span class="line">git clone https://github.com/b3log/solo.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.将GitHub上<span class="built_in">clone</span>的代码复制到从Git仓库<span class="built_in">clone</span>的空仓库里面</span></span><br><span class="line">cp ./solo-master/* ./solo/ -rf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.将代码通过git提交到Git服务器创建好的仓库</span></span><br><span class="line">git config --global user.email "staryjie@163.com"</span><br><span class="line">git config --global user.name "staryjie"</span><br><span class="line">git add .</span><br><span class="line">git commit -m "all"</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h4 id="10-2-Jenkins构建"><a href="#10-2-Jenkins构建" class="headerlink" title="10.2 Jenkins构建"></a>10.2 Jenkins构建</h4><h5 id="10-2-1-构建项目"><a href="#10-2-1-构建项目" class="headerlink" title="10.2.1 构建项目"></a>10.2.1 构建项目</h5><p>​        通过上面已经创建的Maven项目solo_blog来构建：</p><p><img src="http://static.staryjie.com/static/images/20190630133041.png" alt></p><h5 id="10-2-3-查看控制台输出"><a href="#10-2-3-查看控制台输出" class="headerlink" title="10.2.3 查看控制台输出"></a>10.2.3 查看控制台输出</h5><p>​        点击立即构建之后就可以点击查看控制台输出来查看整个构建过程:</p><p><img src="http://static.staryjie.com/static/images/20190630133217.png" alt></p><p>​        第一次构建需要花费的时间比较多，耐心等待一会儿就可以看到构建结果：</p><p><img src="http://static.staryjie.com/static/images/20190630134051.png" alt></p><p>​        在服务器上查看构建好的war包：</p><p><img src="http://static.staryjie.com/static/images/20190630134258.png" alt></p><p>​        添加构建后将war包和基础镜像构建新镜像并推送到Harbor仓库的配置后，再次构建：</p><p><img src="http://static.staryjie.com/static/images/20190630143336.png" alt></p><p>​        在Harbor仓库查看镜像：</p><p><img src="http://static.staryjie.com/static/images/20190630143506.png" alt></p><p>​        配置了远程主机拉取镜像并运行容器之后，查看Jenkins执行结果：</p><p><img src="http://static.staryjie.com/static/images/20190630211739.png" alt></p><p>​        在远程主机查看是否有对应的镜像和已经运行的叫solo的容器：</p><p><img src="http://static.staryjie.com/static/images/20190630211617.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190630213434.png" alt></p><p>​        在浏览器上访问：<a href="http://10.0.0.30:8888" target="_blank" rel="noopener">http://10.0.0.30:8888</a></p><p><img src="http://static.staryjie.com/static/images/20190630211855.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、CI-CD介绍&quot;&gt;&lt;a href=&quot;#1、CI-CD介绍&quot; class=&quot;headerlink&quot; title=&quot;1、CI/CD介绍&quot;&gt;&lt;/a&gt;1、CI/CD介绍&lt;/h3&gt;&lt;p&gt;CI/CD是一个持续的闭环的流程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.staryjie.com/static/images/20190626160504.png&quot; alt=&quot;CI/CD&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CI&amp;CD" scheme="http://yoursite.com/categories/CI-CD/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="CI&amp;CD" scheme="http://yoursite.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>通过阿里云Python SDK管理ECS安全组</title>
    <link href="http://yoursite.com/2019/09/27/%E9%80%9A%E8%BF%87%E9%98%BF%E9%87%8C%E4%BA%91Python-SDK%E7%AE%A1%E7%90%86ECS%E5%AE%89%E5%85%A8%E7%BB%84/"/>
    <id>http://yoursite.com/2019/09/27/通过阿里云Python-SDK管理ECS安全组/</id>
    <published>2019-09-27T05:36:23.000Z</published>
    <updated>2019-09-27T05:37:21.152Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.服务器操作系统 CentOS7</span><br><span class="line">2.Python版本 2.7.5</span><br><span class="line">3.阿里云账号、Access Key ID、Access Key Secret、安全组ID、Region ID(如cn-shanghai)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1、安装pip"><a href="#1、安装pip" class="headerlink" title="1、安装pip"></a>1、安装pip</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认没有安装pip，首先先安装pip</span></span><br><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br><span class="line">python get-pip.py</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查是否安装完成</span></span><br><span class="line">pip -V</span><br></pre></td></tr></table></figure><h3 id="2、安装阿里云Python-SDK"><a href="#2、安装阿里云Python-SDK" class="headerlink" title="2、安装阿里云Python SDK"></a>2、安装阿里云Python SDK</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install aliyun-python-sdk-ecs</span><br></pre></td></tr></table></figure><h3 id="3、Python-SDK实现安全组的增加和删除"><a href="#3、Python-SDK实现安全组的增加和删除" class="headerlink" title="3、Python SDK实现安全组的增加和删除"></a>3、Python SDK实现安全组的增加和删除</h3><h4 id="3-1-增加安全组规则"><a href="#3-1-增加安全组规则" class="headerlink" title="3.1 增加安全组规则"></a>3.1 增加安全组规则</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python2</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkecs.request.v20140526 <span class="keyword">import</span> AuthorizeSecurityGroupRequest</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliGroup</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, AccessKey, AccessSecret, RegionId)</span>:</span></span><br><span class="line">        self.AccessKey = AccessKey</span><br><span class="line">        self.AccessSecret = AccessSecret</span><br><span class="line">        self.RegionId = RegionId</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">client</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""用于创建AcsClient实例</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        client = AcsClient(self.AccessKey, self.AccessSecret, self.RegionId)</span><br><span class="line">        <span class="keyword">return</span> client</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authorizeSecurityGroupRequest</span><span class="params">(self, PortRange, SourceCidrIp, Priority=<span class="number">1</span>, IpProtocol=<span class="string">'tcp'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      SecurityGroupId=<span class="string">'sg-bp1be0nm1c8es3sonuyy'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""用于添加安全组规则</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 创建AuthorizeSecurityGroupRequest实例</span></span><br><span class="line">        request = AuthorizeSecurityGroupRequest.AuthorizeSecurityGroupRequest()</span><br><span class="line">        <span class="comment"># 设置安全组ID</span></span><br><span class="line">        request.set_SecurityGroupId(SecurityGroupId)</span><br><span class="line">        <span class="comment"># 设置协议，比如TCP或者UDP</span></span><br><span class="line">        request.set_IpProtocol(IpProtocol)</span><br><span class="line">        <span class="comment"># 设置端口范围</span></span><br><span class="line">        request.set_PortRange(PortRange)</span><br><span class="line">        <span class="comment"># 如果存在源ip，则设置源ip</span></span><br><span class="line">        <span class="keyword">if</span> SourceCidrIp:</span><br><span class="line">            request.set_SourceCidrIp(SourceCidrIp)</span><br><span class="line">        <span class="comment"># 设置优先级</span></span><br><span class="line">        request.set_Priority(Priority)</span><br><span class="line">        <span class="comment"># 设置规则的动作为接受</span></span><br><span class="line">        request.set_Policy(<span class="string">'accept'</span>)</span><br><span class="line">        <span class="comment"># 设置接收数据格式为json</span></span><br><span class="line">        request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">        <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># AliGroup类实例化</span></span><br><span class="line">    ali = AliGroup(<span class="string">"LTAIgURtYA5lRIdF"</span>, <span class="string">"Bz4X2kHtW9EbLP3uAU4Bx7kT1xUUbn"</span>, <span class="string">"cn-hangzhou"</span>)</span><br><span class="line">    <span class="comment"># 创建AcsClient实例</span></span><br><span class="line">    clt = ali.client()</span><br><span class="line">    <span class="comment"># 添加安全组规则，由于优先级、协议和安全组ID已经设置默认参数，所以只需要在运行脚本时输入端口范围和源ip两个参数</span></span><br><span class="line">    add = ali.authorizeSecurityGroupRequest(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="comment"># 打印输出</span></span><br><span class="line">    res = clt.do_action_with_exception(add)</span><br><span class="line">    <span class="keyword">print</span> res</span><br></pre></td></tr></table></figure><h4 id="3-2-删除安全组规则"><a href="#3-2-删除安全组规则" class="headerlink" title="3.2 删除安全组规则"></a>3.2 删除安全组规则</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python2</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkecs.request.v20140526 <span class="keyword">import</span> RevokeSecurityGroupRequest</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliGroup</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, AccessKey, AccessSecret, RegionId)</span>:</span></span><br><span class="line">        self.AccessKey = AccessKey</span><br><span class="line">        self.AccessSecret = AccessSecret</span><br><span class="line">        self.RegionId = RegionId</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">client</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""用于创建AcsClient的实例</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        client = AcsClient(self.AccessKey, self.AccessSecret, self.RegionId)</span><br><span class="line">        <span class="keyword">return</span> client</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">revokeSecurityGroupRequest</span><span class="params">(self, PortRange, SourceCidrIp, Priority=<span class="number">1</span>, IpProtocol=<span class="string">'tcp'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   SecurityGroupId=<span class="string">'sg-bp1be0nm1c8es3sonuyy'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""删除安全组规则</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        request = RevokeSecurityGroupRequest.RevokeSecurityGroupRequest()</span><br><span class="line">        request.set_SecurityGroupId(SecurityGroupId)</span><br><span class="line">        request.set_IpProtocol(IpProtocol)</span><br><span class="line">        request.set_PortRange(PortRange)</span><br><span class="line">        <span class="keyword">if</span> SourceCidrIp:</span><br><span class="line">            request.set_SourceCidrIp(SourceCidrIp)</span><br><span class="line">        request.set_Policy(<span class="string">'accept'</span>)</span><br><span class="line">        request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">        <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ali = AliGroup(<span class="string">"LTAIgURtYA5lRIdF"</span>, <span class="string">"Bz4X2kHtW9EbLP3uAU4Bx7kT1xUUbn"</span>, <span class="string">"cn-hangzhou"</span>)</span><br><span class="line">    clt = ali.client()</span><br><span class="line">    rem = ali.revokeSecurityGroupRequest(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    res = clt.do_action_with_exception(rem)</span><br><span class="line">    <span class="keyword">print</span> res</span><br></pre></td></tr></table></figure><h3 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h3><h4 id="4-1-测试新增安全组规则"><a href="#4-1-测试新增安全组规则" class="headerlink" title="4.1 测试新增安全组规则"></a>4.1 测试新增安全组规则</h4><ul><li>执行脚本添加规则</li></ul><p><img src="http://static.staryjie.com/static/images/20190725114537.png" alt></p><ul><li>web控制台查看安全组</li></ul><p><img src="http://static.staryjie.com/static/images/20190725114709.png" alt></p><h4 id="4-2-测试删除安全组规则"><a href="#4-2-测试删除安全组规则" class="headerlink" title="4.2 测试删除安全组规则"></a>4.2 测试删除安全组规则</h4><ul><li>执行脚本删除规则</li></ul><p><img src="http://static.staryjie.com/static/images/20190725114813.png" alt></p><ul><li>web控制台查看安全组</li></ul><p><img src="http://static.staryjie.com/static/images/20190725114844.png" alt></p><p>很明显，之前添加的规则已经被删除了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.服务器操作系统 CentOS7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.Python版本 2.7.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.阿里云账号、Access Key ID、Access Key Secret、安全组ID、Region ID(如cn-shanghai)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="aliyun" scheme="http://yoursite.com/categories/aliyun/"/>
    
    
      <category term="aliyun" scheme="http://yoursite.com/tags/aliyun/"/>
    
      <category term="SDK" scheme="http://yoursite.com/tags/SDK/"/>
    
  </entry>
  
  <entry>
    <title>pyecharts报错&#39;pyecharts&#39; has no attribute &#39;Bar&#39;的解决办法</title>
    <link href="http://yoursite.com/2019/09/27/pyecharts%E6%8A%A5%E9%94%99-pyecharts-has-no-attribute-Bar-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/27/pyecharts报错-pyecharts-has-no-attribute-Bar-的解决办法/</id>
    <published>2019-09-27T05:30:38.000Z</published>
    <updated>2019-09-27T05:38:39.721Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、出错原因"><a href="#1、出错原因" class="headerlink" title="1、出错原因"></a>1、出错原因</h3><p>因为用下面语句安装<code>pyecharts</code>时，默认会安装最新版本的<code>pyecharts</code>，python解释器版本更新的速度慢很多，现在的python解释器默认的是与0.1.9.4版本的<code>pyecharts</code>配合，你安装最新的，python解释器不能识别，所以会报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyecharts</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、解决方法"><a href="#2、解决方法" class="headerlink" title="2、解决方法"></a>2、解决方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.先安装wheel</span></span><br><span class="line">pip install wheel</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.再安装pyecharts0.1.9.4版本</span></span><br><span class="line">pip install pyecharts==0.1.9.4</span><br></pre></td></tr></table></figure><h3 id="3、验证"><a href="#3、验证" class="headerlink" title="3、验证"></a>3、验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line">bar1 = Bar(<span class="string">"我的第一个图表"</span>, <span class="string">"副标题"</span>)</span><br><span class="line">bar1.add(<span class="string">"服装"</span>, [<span class="string">'衬衣'</span>, <span class="string">'羊毛衫'</span>, <span class="string">'雪纺衫'</span>, <span class="string">'裤子'</span>, <span class="string">'高跟鞋'</span>, <span class="string">'袜子'</span>], [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>, <span class="number">90</span>])</span><br><span class="line">bar1.show_config()</span><br><span class="line">bar1.render()</span><br></pre></td></tr></table></figure><p>运行上面的代码会生成如下的render.html文件：</p><p><img src="http://static.staryjie.com/static/images/20190821102409.png" alt></p><p>在浏览器打开：</p><p><img src="http://static.staryjie.com/static/images/20190821102534.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、出错原因&quot;&gt;&lt;a href=&quot;#1、出错原因&quot; class=&quot;headerlink&quot; title=&quot;1、出错原因&quot;&gt;&lt;/a&gt;1、出错原因&lt;/h3&gt;&lt;p&gt;因为用下面语句安装&lt;code&gt;pyecharts&lt;/code&gt;时，默认会安装最新版本的&lt;code&gt;pyecharts&lt;/code&gt;，python解释器版本更新的速度慢很多，现在的python解释器默认的是与0.1.9.4版本的&lt;code&gt;pyecharts&lt;/code&gt;配合，你安装最新的，python解释器不能识别，所以会报错。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install pyecharts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="pyecharts" scheme="http://yoursite.com/tags/pyecharts/"/>
    
  </entry>
  
  <entry>
    <title>pipenv简单使用</title>
    <link href="http://yoursite.com/2019/09/27/pipenv%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/27/pipenv简单使用/</id>
    <published>2019-09-27T05:06:02.000Z</published>
    <updated>2019-09-27T05:07:55.413Z</updated>
    
    <content type="html"><![CDATA[<p>pipenv 是 Pipfile 主要倡导者、requests 作者 Kenneth Reitz 写的一个命令行工具，主要包含了Pipfile、pip、click、requests和virtualenv。Pipfile和pipenv本来都是Kenneth Reitz的个人项目，后来贡献给了pypa组织。Pipfile是社区拟定的依赖管理文件，用于替代过于简陋的 requirements.txt 文件。</p><a id="more"></a><h2 id="1、安装pipenv"><a href="#1、安装pipenv" class="headerlink" title="1、安装pipenv"></a>1、安装pipenv</h2><blockquote><p>参考：<a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">https://github.com/pypa/pipenv</a></p></blockquote><h3 id="1-1-pip安装"><a href="#1-1-pip安装" class="headerlink" title="1.1 pip安装"></a>1.1 pip安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure><h3 id="1-2-Mac通过brew安装"><a href="#1-2-Mac通过brew安装" class="headerlink" title="1.2 Mac通过brew安装"></a>1.2 Mac通过brew安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pipenv</span><br></pre></td></tr></table></figure><h2 id="2、pipenv简单使用"><a href="#2、pipenv简单使用" class="headerlink" title="2、pipenv简单使用"></a>2、pipenv简单使用</h2><h3 id="2-1-创建虚拟环境"><a href="#2-1-创建虚拟环境" class="headerlink" title="2.1 创建虚拟环境"></a>2.1 创建虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入项目目录</span></span><br><span class="line">cd projectdir</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建虚拟环境</span></span><br><span class="line">pipenv install</span><br></pre></td></tr></table></figure><blockquote><p>上面的命令会自动在~/.local/share/virtualenvs/目录下创建一个projectdir加一串随机字符串的虚拟环境目录。</p></blockquote><h3 id="2-2-创建指定python版本的虚拟环境"><a href="#2-2-创建指定python版本的虚拟环境" class="headerlink" title="2.2 创建指定python版本的虚拟环境"></a>2.2 创建指定python版本的虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定python版本为3.6.5</span></span><br><span class="line">pipenv install --python 3.6.5</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">pipenv --python 3.6.5</span><br></pre></td></tr></table></figure><h3 id="2-3-修改pipenv默认虚拟环境位置为当前目录下"><a href="#2-3-修改pipenv默认虚拟环境位置为当前目录下" class="headerlink" title="2.3 修改pipenv默认虚拟环境位置为当前目录下"></a>2.3 修改pipenv默认虚拟环境位置为当前目录下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量PIPENV_VENV_IN_PROJECT=1</span></span><br><span class="line">export export PIPENV_VENV_IN_PROJECT=1</span><br></pre></td></tr></table></figure><blockquote><h6 id="在初始化虚拟环境的时候，pipenv默认会把虚拟环境的python目录以-及后来安装的各种模块放到-home-username-local-share-virtualenvs里，一般-和home是在一个分区的-之前就遇到过-所在的分区写满了，整个服务器都挂掉了-，如果想放到其他地方可以有以下几种方法："><a href="#在初始化虚拟环境的时候，pipenv默认会把虚拟环境的python目录以-及后来安装的各种模块放到-home-username-local-share-virtualenvs里，一般-和home是在一个分区的-之前就遇到过-所在的分区写满了，整个服务器都挂掉了-，如果想放到其他地方可以有以下几种方法：" class="headerlink" title="在初始化虚拟环境的时候，pipenv默认会把虚拟环境的python目录以 及后来安装的各种模块放到/home/$username/.local/share/virtualenvs里，一般/和home是在一个分区的(之前就遇到过/所在的分区写满了，整个服务器都挂掉了)，如果想放到其他地方可以有以下几种方法："></a>在初始化虚拟环境的时候，pipenv默认会把虚拟环境的python目录以 及后来安装的各种模块放到/home/$username/.local/share/virtualenvs里，一般/和home是在一个分区的(之前就遇到过/所在的分区写满了，整个服务器都挂掉了)，如果想放到其他地方可以有以下几种方法：</h6><ol><li>export PIPENV_VENV_IN_PROJECT=1 设置这个环境变量，pipenv会在当前目录下创建.venv的目录，以后都会把模块装到这个.venv下。</li><li>自己在项目目录下手动创建.venv的目录，然后运行 pipenv run 或者 pipenv shell pipenv都会在.venv下创建虚拟环境。</li><li>设置WORKON_HOME到其他的地方 （<strong>如果当前目录下已经有.venv,此项设置失效</strong>）。</li></ol></blockquote><h3 id="2-4-激活虚拟环境"><a href="#2-4-激活虚拟环境" class="headerlink" title="2.4 激活虚拟环境"></a>2.4 激活虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv shell</span><br></pre></td></tr></table></figure><h3 id="2-5-安装相关模块并加入到Pipfile"><a href="#2-5-安装相关模块并加入到Pipfile" class="headerlink" title="2.5 安装相关模块并加入到Pipfile"></a>2.5 安装相关模块并加入到Pipfile</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pipenv install packagename</span><br><span class="line"><span class="meta">#</span><span class="bash"> 比如</span></span><br><span class="line">pipenv install flask</span><br></pre></td></tr></table></figure><h3 id="2-6-安装固定版本模块并加入到Pipfile"><a href="#2-6-安装固定版本模块并加入到Pipfile" class="headerlink" title="2.6 安装固定版本模块并加入到Pipfile"></a>2.6 安装固定版本模块并加入到Pipfile</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install django==1.11</span><br></pre></td></tr></table></figure><h3 id="2-7-显示虚拟环境信息"><a href="#2-7-显示虚拟环境信息" class="headerlink" title="2.7 显示虚拟环境信息"></a>2.7 显示虚拟环境信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv --venv</span><br></pre></td></tr></table></figure><h3 id="2-8-显示目录信息"><a href="#2-8-显示目录信息" class="headerlink" title="2.8 显示目录信息"></a>2.8 显示目录信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv --where</span><br></pre></td></tr></table></figure><h3 id="2-9-显示Python解释器信息"><a href="#2-9-显示Python解释器信息" class="headerlink" title="2.9 显示Python解释器信息"></a>2.9 显示Python解释器信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv --py</span><br></pre></td></tr></table></figure><h3 id="2-10-查看目前安装的库及其依赖"><a href="#2-10-查看目前安装的库及其依赖" class="headerlink" title="2.10 查看目前安装的库及其依赖"></a>2.10 查看目前安装的库及其依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv graph</span><br></pre></td></tr></table></figure><h3 id="2-11-检查安全漏洞"><a href="#2-11-检查安全漏洞" class="headerlink" title="2.11 检查安全漏洞"></a>2.11 检查安全漏洞</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv check</span><br></pre></td></tr></table></figure><h3 id="2-12-卸载全部包"><a href="#2-12-卸载全部包" class="headerlink" title="2.12 卸载全部包"></a>2.12 卸载全部包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv uninstall --all</span><br></pre></td></tr></table></figure><h2 id="3、设置pipenv安装源为国内源"><a href="#3、设置pipenv安装源为国内源" class="headerlink" title="3、设置pipenv安装源为国内源"></a>3、设置pipenv安装源为国内源</h2><p>修改当前目录下Pipfile文件，将[source]下的url属性改成国内的源即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[source]]</span><br><span class="line">url = &quot;https://mirrors.aliyun.com/pypi/simple&quot;</span><br><span class="line">verify_ssl = true</span><br><span class="line">name = &quot;pypi&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pipenv 是 Pipfile 主要倡导者、requests 作者 Kenneth Reitz 写的一个命令行工具，主要包含了Pipfile、pip、click、requests和virtualenv。Pipfile和pipenv本来都是Kenneth Reitz的个人项目，后来贡献给了pypa组织。Pipfile是社区拟定的依赖管理文件，用于替代过于简陋的 requirements.txt 文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
</feed>
