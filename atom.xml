<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>59Devops</title>
  
  <subtitle>一个运维小菜鸡的个人博客网站。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-27T06:16:55.314Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>StaryJie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>修改mysql时区的三种方法</title>
    <link href="http://yoursite.com/2019/09/27/%E4%BF%AE%E6%94%B9mysql%E6%97%B6%E5%8C%BA%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/27/修改mysql时区的三种方法/</id>
    <published>2019-09-27T06:15:30.000Z</published>
    <updated>2019-09-27T06:16:55.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法一：通过mysql命令行模式下动态修改"><a href="#方法一：通过mysql命令行模式下动态修改" class="headerlink" title="方法一：通过mysql命令行模式下动态修改"></a>方法一：通过mysql命令行模式下动态修改</h3><h4 id="1-1-查看mysql当前时间，当前时区"><a href="#1-1-查看mysql当前时间，当前时区" class="headerlink" title="1.1 查看mysql当前时间，当前时区"></a>1.1 查看mysql当前时间，当前时区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> select curtime();  #或select now()也可以</span><br><span class="line">+-----------+</span><br><span class="line">| curtime() |</span><br><span class="line">+-----------+</span><br><span class="line">| 15:18:10 |</span><br><span class="line">+-----------+</span><br><span class="line"><span class="meta">&gt;</span> show variables like "%time_zone%";</span><br><span class="line">+------------------+--------+</span><br><span class="line">| Variable_name  | Value |</span><br><span class="line">+------------------+--------+</span><br><span class="line">| system_time_zone | CST  |</span><br><span class="line">| time_zone    | SYSTEM |</span><br><span class="line">+------------------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>time_zone说明mysql使用system的时区，system_time_zone说明system使用CST时区</p></blockquote><a id="more"></a><h4 id="1-2-修改时区"><a href="#1-2-修改时区" class="headerlink" title="1.2 修改时区"></a>1.2 修改时区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; set global time_zone = &apos;+8:00&apos;; ##修改mysql全局时区为北京时间，即我们所在的东8区</span><br><span class="line">&gt; set time_zone = &apos;+8:00&apos;; ##修改当前会话时区</span><br><span class="line">&gt; flush privileges; #立即生效</span><br></pre></td></tr></table></figure><h3 id="方法二：通过修改my-cnf配置文件来修改时区"><a href="#方法二：通过修改my-cnf配置文件来修改时区" class="headerlink" title="方法二：通过修改my.cnf配置文件来修改时区"></a>方法二：通过修改my.cnf配置文件来修改时区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vim /etc/my.cnf ##在[mysqld]区域中加上</span><br><span class="line">default-time_zone = &apos;+8:00&apos;</span><br><span class="line"># /etc/init.d/mysqld restart ##重启mysql使新时区生效</span><br></pre></td></tr></table></figure><h3 id="方法三：如果不方便重启mysql，又想临时解决时区问题，可以通过php或其他语言在初始化mysql时初始化mysql时区"><a href="#方法三：如果不方便重启mysql，又想临时解决时区问题，可以通过php或其他语言在初始化mysql时初始化mysql时区" class="headerlink" title="方法三：如果不方便重启mysql，又想临时解决时区问题，可以通过php或其他语言在初始化mysql时初始化mysql时区"></a>方法三：如果不方便重启mysql，又想临时解决时区问题，可以通过php或其他语言在初始化mysql时初始化mysql时区</h3><p>这里，以php为例，在mysql_connect()下使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(&quot;SET time_zone = &apos;+8:00&apos;&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>这样可以在保证你不重启的情况下改变时区。但是mysql的某些系统函数还是不能用如：now()。这句，还是不能理解。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方法一：通过mysql命令行模式下动态修改&quot;&gt;&lt;a href=&quot;#方法一：通过mysql命令行模式下动态修改&quot; class=&quot;headerlink&quot; title=&quot;方法一：通过mysql命令行模式下动态修改&quot;&gt;&lt;/a&gt;方法一：通过mysql命令行模式下动态修改&lt;/h3&gt;&lt;h4 id=&quot;1-1-查看mysql当前时间，当前时区&quot;&gt;&lt;a href=&quot;#1-1-查看mysql当前时间，当前时区&quot; class=&quot;headerlink&quot; title=&quot;1.1 查看mysql当前时间，当前时区&quot;&gt;&lt;/a&gt;1.1 查看mysql当前时间，当前时区&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&lt;/span&gt; select curtime();  #或select now()也可以&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| curtime() |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 15:18:10 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&lt;/span&gt; show variables like &quot;%time_zone%&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+--------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Variable_name  | Value |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+--------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| system_time_zone | CST  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| time_zone    | SYSTEM |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+--------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 rows in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;time_zone说明mysql使用system的时区，system_time_zone说明system使用CST时区&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>解决zabbix设置为中文后图形中中文乱码的问题</title>
    <link href="http://yoursite.com/2019/09/27/%E8%A7%A3%E5%86%B3zabbix%E8%AE%BE%E7%BD%AE%E4%B8%BA%E4%B8%AD%E6%96%87%E5%90%8E%E5%9B%BE%E5%BD%A2%E4%B8%AD%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/09/27/解决zabbix设置为中文后图形中中文乱码的问题/</id>
    <published>2019-09-27T06:08:10.000Z</published>
    <updated>2019-09-27T06:13:35.480Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、下载汉化的字体"><a href="#1、下载汉化的字体" class="headerlink" title="1、下载汉化的字体"></a>1、下载汉化的字体</h3><p>zabbix3.4中，存放字体的目录在<code>/usr/share/zabbix/fonts/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /usr/share/zabbix/fonts/msyh.ttf https://raw.githubusercontent.com/chenqing/ng-mini/master/font/msyh.ttf</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h3><p>修改<code>/usr/share/zabbix/include/defines.inc.php</code>文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/share/zabbix/include/defines.inc.php</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20180620140701.png" alt></p><p><img src="http://static.staryjie.com/static/images/20180620140744.png" alt></p><h3 id="3、重启zabbix-server"><a href="#3、重启zabbix-server" class="headerlink" title="3、重启zabbix-server"></a>3、重启zabbix-server</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-server.service</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20180620140937.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、下载汉化的字体&quot;&gt;&lt;a href=&quot;#1、下载汉化的字体&quot; class=&quot;headerlink&quot; title=&quot;1、下载汉化的字体&quot;&gt;&lt;/a&gt;1、下载汉化的字体&lt;/h3&gt;&lt;p&gt;zabbix3.4中，存放字体的目录在&lt;code&gt;/usr/share/zabbix/fonts/&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget -O /usr/share/zabbix/fonts/msyh.ttf https://raw.githubusercontent.com/chenqing/ng-mini/master/font/msyh.ttf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="zabbix" scheme="http://yoursite.com/categories/zabbix/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS将U盘格式化为ext2/3/4格式</title>
    <link href="http://yoursite.com/2019/09/27/Mac-OS%E5%B0%86U%E7%9B%98%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%BAext2-3-4%E6%A0%BC%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/09/27/Mac-OS将U盘格式化为ext2-3-4格式/</id>
    <published>2019-09-27T06:04:35.000Z</published>
    <updated>2019-09-27T06:13:25.198Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、安装HomeBrew"><a href="#1、安装HomeBrew" class="headerlink" title="1、安装HomeBrew"></a>1、安装HomeBrew</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、安装e2fsprogs插件"><a href="#2、安装e2fsprogs插件" class="headerlink" title="2、安装e2fsprogs插件"></a>2、安装e2fsprogs插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install e2fsprogs</span><br></pre></td></tr></table></figure><h3 id="3、找到U盘盘符"><a href="#3、找到U盘盘符" class="headerlink" title="3、找到U盘盘符"></a>3、找到U盘盘符</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskutil list</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190728191811.png" alt></p><h3 id="4、取消U盘挂载"><a href="#4、取消U盘挂载" class="headerlink" title="4、取消U盘挂载"></a>4、取消U盘挂载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskutil unmountdisk /dev/disk2</span><br></pre></td></tr></table></figure><h3 id="5、格式化为ext4格式"><a href="#5、格式化为ext4格式" class="headerlink" title="5、格式化为ext4格式"></a>5、格式化为ext4格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo $(brew --prefix e2fsprogs)/sbin/mkfs.ext4 /dev/disk2</span><br></pre></td></tr></table></figure><p>回车，输入 Mac 密码再回车，过程需要稍等片刻，等待完成即可拔掉 U盘，这时候 U盘格式已经为 ext4 了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、安装HomeBrew&quot;&gt;&lt;a href=&quot;#1、安装HomeBrew&quot; class=&quot;headerlink&quot; title=&quot;1、安装HomeBrew&quot;&gt;&lt;/a&gt;1、安装HomeBrew&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="Others" scheme="http://yoursite.com/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7安装Google Authenticator进行登陆二次验证</title>
    <link href="http://yoursite.com/2019/09/27/CentOS-7%E5%AE%89%E8%A3%85Google-Authenticator%E8%BF%9B%E8%A1%8C%E7%99%BB%E9%99%86%E4%BA%8C%E6%AC%A1%E9%AA%8C%E8%AF%81/"/>
    <id>http://yoursite.com/2019/09/27/CentOS-7安装Google-Authenticator进行登陆二次验证/</id>
    <published>2019-09-27T05:57:12.000Z</published>
    <updated>2019-09-27T05:58:00.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-* mercurial autoconf automake libtool pam-devel</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、安装google-authenticator"><a href="#2、安装google-authenticator" class="headerlink" title="2、安装google-authenticator"></a>2、安装google-authenticator</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y google-authenticator</span><br></pre></td></tr></table></figure><h3 id="4、PAM组件配置google-authenticator"><a href="#4、PAM组件配置google-authenticator" class="headerlink" title="4、PAM组件配置google-authenticator"></a>4、PAM组件配置google-authenticator</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pam.d/sshd</span><br><span class="line">auth required pam_google_authenticator.so</span><br><span class="line"><span class="meta">#</span> 或者</span><br><span class="line">echo   "auth       required     pam_google_authenticator.so" &gt;&gt;/etc/pam.d/sshd</span><br></pre></td></tr></table></figure><h3 id="5、修改SSH配置"><a href="#5、修改SSH配置" class="headerlink" title="5、修改SSH配置"></a>5、修改SSH配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="meta">#</span> 将</span><br><span class="line">ChallengeResponseAuthentication no</span><br><span class="line"><span class="meta">#</span> 改为</span><br><span class="line">ChallengeResponseAuthentication yes</span><br><span class="line"><span class="meta">#</span> 或者</span><br><span class="line">sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><h3 id="6、重启SSH服务"><a href="#6、重启SSH服务" class="headerlink" title="6、重启SSH服务"></a>6、重启SSH服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure><h3 id="7、生成google-authenticator配置"><a href="#7、生成google-authenticator配置" class="headerlink" title="7、生成google-authenticator配置"></a>7、生成google-authenticator配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">google-authenticator</span><br><span class="line">Do you want authentication tokens to be time-based (y/n) y</span><br><span class="line">Warning: pasting the following URL into your browser exposes the OTP secret to Google:</span><br><span class="line">  https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/root@demo%3Fsecret%3DXQ2WB526GLPJ7SI64Z3RZISOEE%26issuer%3Ddemo</span><br><span class="line">                                                        </span><br><span class="line">                                                                                  </span><br><span class="line">                                                                                  </span><br><span class="line">                                                                                  </span><br><span class="line">             这里会有一个二维码，需要在手机上下载`googleauthenticator`APP扫码绑定</span><br><span class="line">             安卓 IOS手机都可以在应用商店搜索安装</span><br><span class="line">                                                                                  </span><br><span class="line">                                                                                  </span><br><span class="line">                                                                                                                                                                     </span><br><span class="line">Your new secret key is: XQ2WB526GLPJ7SI64Z3RZISOEE</span><br><span class="line">Your verification code is 917990</span><br><span class="line">Your emergency scratch codes are:</span><br><span class="line">  42623319</span><br><span class="line">  72314571</span><br><span class="line">  14476695</span><br><span class="line">  95764389</span><br><span class="line">  38976136</span><br><span class="line"></span><br><span class="line">Do you want me to update your "/root/.google_authenticator" file? (y/n) y</span><br><span class="line"></span><br><span class="line">Do you want to disallow multiple uses of the same authentication</span><br><span class="line">token? This restricts you to one login about every 30s, but it increases</span><br><span class="line">your chances to notice or even prevent man-in-the-middle attacks (y/n) y</span><br><span class="line"></span><br><span class="line">By default, a new token is generated every 30 seconds by the mobile app.</span><br><span class="line">In order to compensate for possible time-skew between the client and the server,</span><br><span class="line">we allow an extra token before and after the current time. This allows for a</span><br><span class="line">time skew of up to 30 seconds between authentication server and client. If you</span><br><span class="line">experience problems with poor time synchronization, you can increase the window</span><br><span class="line">from its default size of 3 permitted codes (one previous code, the current</span><br><span class="line">code, the next code) to 17 permitted codes (the 8 previous codes, the current</span><br><span class="line">code, and the 8 next codes). This will permit for a time skew of up to 4 minutes</span><br><span class="line">between client and server.</span><br><span class="line">Do you want to do so? (y/n) y</span><br><span class="line"></span><br><span class="line">If the computer that you are logging into isn't hardened against brute-force</span><br><span class="line">login attempts, you can enable rate-limiting for the authentication module.</span><br><span class="line">By default, this limits attackers to no more than 3 login attempts every 30s.</span><br><span class="line">Do you want to enable rate-limiting? (y/n) y</span><br></pre></td></tr></table></figure><h3 id="8、调整XShell登陆配置"><a href="#8、调整XShell登陆配置" class="headerlink" title="8、调整XShell登陆配置"></a>8、调整XShell登陆配置</h3><p>XShell登陆需要更改为Keyboard Interactive验证登陆。</p><p><img src="http://static.staryjie.com/static/images/20190614102458.png" alt="img"></p><h3 id="9、登陆时需要结合手机APP上的验证码才可以登陆"><a href="#9、登陆时需要结合手机APP上的验证码才可以登陆" class="headerlink" title="9、登陆时需要结合手机APP上的验证码才可以登陆"></a>9、登陆时需要结合手机APP上的验证码才可以登陆</h3><p>登陆的时候选择Keyboard Interactive验证登陆。</p><p><img src="http://static.staryjie.com/static/images/20190614103039.png" alt></p><p>然后输入服务器密码</p><p><img src="http://static.staryjie.com/static/images/20190614103127.png" alt></p><p>输入手机APP上的验证码</p><p><img src="http://static.staryjie.com/static/images/20190614103231.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190614102721.png" alt></p><p>登陆成功</p><p><img src="http://static.staryjie.com/static/images/20190614103304.png" alt></p><blockquote><p>因为手机上的 google authenticator这个APP是根据时间来生成随机验证码的，所以必须保证服务器上的时间和手机时间一致，不然可能会出现无法登陆的情况！</p><p>建议安装时间同步服务器或者安装一个自动同步时间的软件(例如：chrony)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y chrony</span><br><span class="line">systemctl enable chronyd</span><br><span class="line">systemctl start chronyd</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、安装依赖&quot;&gt;&lt;a href=&quot;#1、安装依赖&quot; class=&quot;headerlink&quot; title=&quot;1、安装依赖&quot;&gt;&lt;/a&gt;1、安装依赖&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y epel-* mercurial autoconf automake libtool pam-devel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Security" scheme="http://yoursite.com/categories/Security/"/>
    
    
      <category term="Security" scheme="http://yoursite.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins自定义主题安装</title>
    <link href="http://yoursite.com/2019/09/27/Jenkins%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/09/27/Jenkins自定义主题安装/</id>
    <published>2019-09-27T05:50:54.000Z</published>
    <updated>2019-09-27T05:51:59.070Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>首先必须先安装<code>Simple Theme Plugin</code>插件</p></li><li><p>在<a href="http://afonsof.com/jenkins-material-theme/网站中生成需要的主题css文件" target="_blank" rel="noopener">http://afonsof.com/jenkins-material-theme/网站中生成需要的主题css文件</a></p></li><li><p>将<code>jenkins-material-theme.css</code>文件上传到Jenkins服务器</p></li><li><p>创建目录，并将css文件放在对应的目录中。Jenkins默认的目录在<code>/var/jenkins_home/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/jenkins_home/userContent/material/</span><br><span class="line">cp jenkins-material-theme.css /var/jenkins_home/userContent/material/</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>在Jenkins中设置</li></ul><p><img src="http://static.staryjie.com/static/images/20190715152354.png" alt></p><ul><li>保存之后会自动重新加载主题</li></ul><p><img src="http://static.staryjie.com/static/images/20190715152442.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先必须先安装&lt;code&gt;Simple Theme Plugin&lt;/code&gt;插件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;a href=&quot;http://afonsof.com/jenkins-material-theme/网站中生成需要的主题css文件&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://afonsof.com/jenkins-material-theme/网站中生成需要的主题css文件&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将&lt;code&gt;jenkins-material-theme.css&lt;/code&gt;文件上传到Jenkins服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建目录，并将css文件放在对应的目录中。Jenkins默认的目录在&lt;code&gt;/var/jenkins_home/&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p /var/jenkins_home/userContent/material/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp jenkins-material-theme.css /var/jenkins_home/userContent/material/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+GitLab+Ansible-playbook的环境安装(yum)</title>
    <link href="http://yoursite.com/2019/09/27/Jenkins-GitLab-Ansible-playbook%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-yum/"/>
    <id>http://yoursite.com/2019/09/27/Jenkins-GitLab-Ansible-playbook的环境安装-yum/</id>
    <published>2019-09-27T05:49:43.000Z</published>
    <updated>2019-09-27T05:50:34.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、安装GitLab"><a href="#1、安装GitLab" class="headerlink" title="1、安装GitLab"></a>1、安装GitLab</h3><h4 id="1-1-配置gitlab的yum源"><a href="#1-1-配置gitlab的yum源" class="headerlink" title="1.1 配置gitlab的yum源"></a>1.1 配置gitlab的yum源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 参考：https://packages.gitlab.com/gitlab/gitlab-ce/install#bash-rpm</span><br><span class="line">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh|bash</span><br><span class="line">yum install -y gitlab-ce</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="1-2-启动GitLab与管理"><a href="#1-2-启动GitLab与管理" class="headerlink" title="1.2 启动GitLab与管理"></a>1.2 启动GitLab与管理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl start</span><br><span class="line">gitlab-ctl status</span><br><span class="line">gitlab-ctl stop</span><br><span class="line">gitlab-ctl restart</span><br><span class="line">ps -aux|grep runsvdir</span><br></pre></td></tr></table></figure><h3 id="2、安装JDK"><a href="#2、安装JDK" class="headerlink" title="2、安装JDK"></a>2、安装JDK</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk</span><br></pre></td></tr></table></figure><h3 id="3、安装Jenkins"><a href="#3、安装Jenkins" class="headerlink" title="3、安装Jenkins"></a>3、安装Jenkins</h3><h4 id="3-1-配置Jenkins的yum源"><a href="#3-1-配置Jenkins的yum源" class="headerlink" title="3.1 配置Jenkins的yum源"></a>3.1 配置Jenkins的yum源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line">rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure><h4 id="3-2-安装Jenkins"><a href="#3-2-安装Jenkins" class="headerlink" title="3.2 安装Jenkins"></a>3.2 安装Jenkins</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y jenkins</span><br></pre></td></tr></table></figure><h4 id="3-3-启动jenkins"><a href="#3-3-启动jenkins" class="headerlink" title="3.3 启动jenkins"></a>3.3 启动jenkins</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start jenkins</span><br><span class="line">systemctl enable jenkins</span><br><span class="line">systemctl status jenkins</span><br></pre></td></tr></table></figure><h4 id="3-4-修改Jenkins配置文件"><a href="#3-4-修改Jenkins配置文件" class="headerlink" title="3.4 修改Jenkins配置文件"></a>3.4 修改Jenkins配置文件</h4><h5 id="3-4-1-修改Jenkins运行用户"><a href="#3-4-1-修改Jenkins运行用户" class="headerlink" title="3.4.1 修改Jenkins运行用户"></a>3.4.1 修改Jenkins运行用户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 修改$JENKINS_USER，并去掉当前行的注释</span><br><span class="line"><span class="meta">$</span>JENKINS_USER='work'</span><br></pre></td></tr></table></figure><h5 id="3-4-2-修改Jenkins相关文件夹用户权限"><a href="#3-4-2-修改Jenkins相关文件夹用户权限" class="headerlink" title="3.4.2 修改Jenkins相关文件夹用户权限"></a>3.4.2 修改Jenkins相关文件夹用户权限</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown -R work:work /var/lib/jenkins</span><br><span class="line">chown -R work:work /var/cache/jenkins</span><br><span class="line">chown -R work:work /var/log/jenkins</span><br></pre></td></tr></table></figure><h5 id="3-4-3-重启Jenkins服务并检查运行Jenkins的用户是否已经切换为work"><a href="#3-4-3-重启Jenkins服务并检查运行Jenkins的用户是否已经切换为work" class="headerlink" title="3.4.3 重启Jenkins服务并检查运行Jenkins的用户是否已经切换为work"></a>3.4.3 重启Jenkins服务并检查运行Jenkins的用户是否已经切换为work</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart jenkins</span><br><span class="line">ps -ef|grep jenkins</span><br></pre></td></tr></table></figure><h4 id="3-5-Jenkins插件推荐"><a href="#3-5-Jenkins插件推荐" class="headerlink" title="3.5 Jenkins插件推荐"></a>3.5 Jenkins插件推荐</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.Git Parameter# 构建参数</span><br><span class="line">2.build-name-setter# $&#123;BUILD_NUMBER&#125;-$moudle-$release_tag</span><br><span class="line">3.user build vars plugin# 获取运行job的用户名</span><br><span class="line">4.Jenkins修改本地默认主题</span><br><span class="line">主题URL：http://afonsof.com/jenkins-material-theme/</span><br><span class="line">1) Jenkins安装 Simple Theme插件</span><br><span class="line">2) 浏览器下载stylish css导入服务器。放到 /var/cache/jenkins/war/css</span><br><span class="line">3) 然后在Jenkins的系统配置中添加Theme配置 http://10.0.0.100:8080/css/jenkins-material-theme.css</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、安装GitLab&quot;&gt;&lt;a href=&quot;#1、安装GitLab&quot; class=&quot;headerlink&quot; title=&quot;1、安装GitLab&quot;&gt;&lt;/a&gt;1、安装GitLab&lt;/h3&gt;&lt;h4 id=&quot;1-1-配置gitlab的yum源&quot;&gt;&lt;a href=&quot;#1-1-配置gitlab的yum源&quot; class=&quot;headerlink&quot; title=&quot;1.1 配置gitlab的yum源&quot;&gt;&lt;/a&gt;1.1 配置gitlab的yum源&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; 参考：https://packages.gitlab.com/gitlab/gitlab-ce/install#bash-rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh|bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install -y gitlab-ce&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Docker构建持续集成环境</title>
    <link href="http://yoursite.com/2019/09/27/Docker%E6%9E%84%E5%BB%BA%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2019/09/27/Docker构建持续集成环境/</id>
    <published>2019-09-27T05:43:13.000Z</published>
    <updated>2019-09-27T05:47:51.234Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、CI-CD介绍"><a href="#1、CI-CD介绍" class="headerlink" title="1、CI/CD介绍"></a>1、CI/CD介绍</h3><p>CI/CD是一个持续的闭环的流程。</p><p><img src="http://static.staryjie.com/static/images/20190626160504.png" alt="CI/CD"></p><a id="more"></a><h4 id="1-1-什么是CI？"><a href="#1-1-什么是CI？" class="headerlink" title="1.1 什么是CI？"></a>1.1 什么是CI？</h4><p>​        在软件工程中，持续集成（CI）是指将所有开发者的工作副本每天多次合并到主干的做法。Grady Booch 在1991年的 Booch method 中首次命名并提出了 CI 的概念，尽管在当时他并不主张每天多次集成。而 XP（Extreme programming，极限编程）采用了 CI 的概念，并提倡每天不止一次集成。</p><h4 id="1-2-什么是CD？"><a href="#1-2-什么是CD？" class="headerlink" title="1.2 什么是CD？"></a>1.2 什么是CD？</h4><p>​        持续交付/持续部署(CD)就是在持续集成的基础上，产品不断的迭代更新，最终能够交付到客户手中或者部署到生成环境。</p><h4 id="1-3-CI-CD的优点"><a href="#1-3-CI-CD的优点" class="headerlink" title="1.3 CI/CD的优点"></a>1.3 CI/CD的优点</h4><ol><li><p>解放了重复性劳动</p><p>自动化部署工作可以解放集成、测试、部署等重复性劳动，而机器集成的频率明显比手工高很多。</p></li><li><p>更快地修复问题</p><p>持续集成更早的获取变更，更早的进入测试，更早的发现问题，解决问题的成本显著下降。</p></li><li><p>更快的交付成果</p><p>更早发现错误减少解决错误所需的工作量。集成服务器在构建环节发现错误可以及时通知开发人员修复。集成服务器在部署环节发现错误可以回退到上一版本，服务器始终有一个可用的版本。</p></li><li><p>减少手工的错误</p><p>在重复性动作上，人容易犯错，而机器犯错的几率几乎为零。</p></li><li><p>减少了等待时间</p><p>缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间可以出现的等待时机。持续集成，意味着开发、集成、测试、部署也得以持续。</p></li><li><p>更高的产品质量</p><p>集成服务器往往提供代码质量检测等功能，对不规范或有错误的地方会进行标致，也可以设置邮件和短信等进行警告。</p></li></ol><h4 id="1-4-CI-CD最佳实践"><a href="#1-4-CI-CD最佳实践" class="headerlink" title="1.4 CI/CD最佳实践"></a>1.4 CI/CD最佳实践</h4><ol><li><p>频繁检出代码</p><p>有时候代码冲突无可避免，频繁检出代码，可以让本地的副本和代码库中的版本最小差异化。</p></li><li><p>频繁提交代码</p><p>与频繁检出代码的原理类似，频繁提交代码，可以让其他人检出副本和代码库中的版本最小差异化。</p></li><li><p>减少分支，回归主干</p><p>多个分支并行应及早将变更集成到主干中，避免同时维护软件的多个版本。</p></li><li><p>使用自动化构建</p><p>可以使用Maven、Ant等来实现自动化构建，可以在构建过程中实现自动化测试。前提是有写单元测试用例。</p></li><li><p>提交测试</p><p>在提交工作之前，每个程序员必须本地集成所有代码，做一个完整的构建和运行，并通过所有的单元测试，这样能减少集成测试在集成服务器上构建失败的风险。</p></li><li><p>当前状态对每个人都可见</p><p>集成服务器在持续集成过程中发现问题应及时发送警告给相关的干系人。</p></li></ol><h3 id="2、发布流程设计"><a href="#2、发布流程设计" class="headerlink" title="2、发布流程设计"></a>2、发布流程设计</h3><p><img src="http://static.staryjie.com/static/images/20190627094657.png" alt></p><h4 id="2-1-发布流程"><a href="#2-1-发布流程" class="headerlink" title="2.1 发布流程"></a>2.1 发布流程</h4><ol><li>开发将代码提交到Git服务器(GitLab/GitHub/SVN等)</li><li>Jenkins拉取Git服务器上的代码通过Maven或者Ant构建</li><li>docker结合脚本(docker build &amp; docker run)将构建好的代码封装在docker镜像中并推送到Docker镜像仓库</li><li>不同的环境的配置文件可以通过配置中心来配置，测试环境拉取对应的镜像和配置文件到测试环境中运行</li><li>测试通过后，结合配置中心，拉取镜像和正式环境配置文件，在正式环境中运行</li></ol><h4 id="2-2-配置中心的必要性"><a href="#2-2-配置中心的必要性" class="headerlink" title="2.2 配置中心的必要性"></a>2.2 配置中心的必要性</h4><p>​        配置中心能够根据不同的环境配置好不同的配置文件，免去了人工替换配置文件的步骤，减少了出错率，大大的提高持续集成、持续部署、持续交付的效率。目前常用的配置中心有<a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">apollo</a>和<a href="https://github.com/knightliao/disconf" target="_blank" rel="noopener">disconf</a>等。</p><p>​        配置中心的搭建可以在网上找到各种文档，也可以在参考官方的安装文档。<a href="https://blog.csdn.net/luhong327/article/details/81453001" target="_blank" rel="noopener">apollo安装</a>、<a href="https://www.cnblogs.com/garfieldcgf/p/6439221.html" target="_blank" rel="noopener">disconf安装</a></p><h3 id="3、部署Git服务器"><a href="#3、部署Git服务器" class="headerlink" title="3、部署Git服务器"></a>3、部署Git服务器</h3><h4 id="3-1-安装git"><a href="#3-1-安装git" class="headerlink" title="3.1 安装git"></a>3.1 安装git</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><h4 id="3-2-添加git用户并设置密码"><a href="#3-2-添加git用户并设置密码" class="headerlink" title="3.2 添加git用户并设置密码"></a>3.2 添加git用户并设置密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd git</span><br><span class="line">passwd git</span><br></pre></td></tr></table></figure><h4 id="3-3-创建项目"><a href="#3-3-创建项目" class="headerlink" title="3.3 创建项目"></a>3.3 创建项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.切换到git用户</span><br><span class="line">su - git</span><br><span class="line"><span class="meta">#</span> 2.创建项目</span><br><span class="line">mkdir -p solo.git</span><br><span class="line">cd solo.git/</span><br><span class="line"><span class="meta">#</span> 3.初始化项目</span><br><span class="line">git --bare init</span><br></pre></td></tr></table></figure><h4 id="4-4-Jenkins服务器实现免密码交互"><a href="#4-4-Jenkins服务器实现免密码交互" class="headerlink" title="4.4 Jenkins服务器实现免密码交互"></a>4.4 Jenkins服务器实现免密码交互</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.生成私钥</span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="meta">#</span> 2.将公钥发送到Git服务器</span><br><span class="line">ssh-copy-id git@10.0.0.20</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190629160945.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190629161138.png" alt></p><h3 id="4、部署Harbor镜像仓库"><a href="#4、部署Harbor镜像仓库" class="headerlink" title="4、部署Harbor镜像仓库"></a>4、部署Harbor镜像仓库</h3><h4 id="4-1-部署方式"><a href="#4-1-部署方式" class="headerlink" title="4.1 部署方式"></a>4.1 部署方式</h4><ol><li>在线安装</li><li>离线安装</li><li>OVA程序安装</li></ol><h4 id="4-2-离线安装"><a href="#4-2-离线安装" class="headerlink" title="4.2 离线安装"></a>4.2 离线安装</h4><h5 id="4-2-1-安装docker和docker-compose"><a href="#4-2-1-安装docker和docker-compose" class="headerlink" title="4.2.1 安装docker和docker-compose"></a>4.2.1 安装docker和docker-compose</h5><p>​        因为Harbor离线安装方式是基于docker-compose编排安装的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.获取docker-compose</span><br><span class="line">sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span> 2.给予可执行权限</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span> 3.加入环境变量，有多种方式，个人认为下面的方式最简单有效</span><br><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line"><span class="meta">#</span> 4.检查</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h5 id="4-2-2-下载Harbor离线安装包"><a href="#4-2-2-下载Harbor离线安装包" class="headerlink" title="4.2.2 下载Harbor离线安装包"></a>4.2.2 下载Harbor离线安装包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Harbor下载地址https://github.com/goharbor/harbor/releases</span><br><span class="line">cd /opt &amp;&amp; wget https://storage.googleapis.com/harbor-releases/release-1.8.0/harbor-offline-installer-v1.8.0.tgz</span><br></pre></td></tr></table></figure><h5 id="4-2-3-安装Harbor"><a href="#4-2-3-安装Harbor" class="headerlink" title="4.2.3 安装Harbor"></a>4.2.3 安装Harbor</h5><h6 id="4-2-3-1-解压安装包"><a href="#4-2-3-1-解压安装包" class="headerlink" title="4.2.3.1 解压安装包"></a>4.2.3.1 解压安装包</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.解压安装包</span><br><span class="line">tar xf harbor-offline-installer-v1.8.0.tar</span><br></pre></td></tr></table></figure><h6 id="4-2-3-2-修改配置文件"><a href="#4-2-3-2-修改配置文件" class="headerlink" title="4.2.3.2 修改配置文件"></a>4.2.3.2 修改配置文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/harbor/harbor.yml</span><br><span class="line"></span><br><span class="line">hostname: harbor.biu2ful.xyz</span><br><span class="line">https:</span><br><span class="line">   port: 443</span><br><span class="line">   certificate: /etc/docker/certs.d/harbor.biu2ful.xyz/ca.crt</span><br><span class="line">   private_key: /etc/docker/certs.d/harbor.biu2ful.xyz/ca.key</span><br><span class="line">harbor_admin_password: Harbor123456</span><br><span class="line">database:</span><br><span class="line">  password: root123</span><br><span class="line">data_volume: /data</span><br><span class="line">clair:</span><br><span class="line">  updaters_interval: 12</span><br><span class="line">  http_proxy:</span><br><span class="line">  https_proxy:</span><br><span class="line">  no_proxy: 127.0.0.1,localhost,core,registry</span><br><span class="line">jobservice:</span><br><span class="line">  max_job_workers: 10</span><br><span class="line">chart:</span><br><span class="line">  absolute_url: disabled</span><br><span class="line">log:</span><br><span class="line">  level: info</span><br><span class="line">  rotate_count: 50</span><br><span class="line">  rotate_size: 200M</span><br><span class="line">  location: /var/log/harbor</span><br><span class="line">_version: 1.8.0</span><br></pre></td></tr></table></figure><p>​        精简后的配置文件如下图：</p><p><img src="http://static.staryjie.com/static/images/20190630212517.png" alt></p><h6 id="4-2-3-3-生成对应的签名证书文件"><a href="#4-2-3-3-生成对应的签名证书文件" class="headerlink" title="4.2.3.3 生成对应的签名证书文件"></a>4.2.3.3 生成对应的签名证书文件</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.创建证书存放路径</span><br><span class="line">mkdir -p /etc/docker/certs.d/harbor.biu2ful.xyz/</span><br><span class="line"><span class="meta">#</span> 2.生成自签名证书key文件</span><br><span class="line">openssl genrsa -out /etc/docker/certs.d/harbor.biu2ful.xyz/ca.key 2048</span><br><span class="line"><span class="meta">#</span> 3.生成自签名证书crt文件</span><br><span class="line">openssl req -x509 -new -nodes -key /etc/docker/certs.d/harbor.biu2ful.xyz/ca.key -subj "/CN=harbor.biu2ful.xyz" -days 100000 -out /etc/docker/certs.d/harbor.biu2ful.xyz/ca.crt</span><br></pre></td></tr></table></figure><h6 id="4-2-3-4-配置Harbor"><a href="#4-2-3-4-配置Harbor" class="headerlink" title="4.2.3.4 配置Harbor"></a>4.2.3.4 配置Harbor</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/harbor/ &amp;&amp; ./prepare</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215243.png" alt></p><h6 id="4-2-3-4-安装Harbor"><a href="#4-2-3-4-安装Harbor" class="headerlink" title="4.2.3.4 安装Harbor"></a>4.2.3.4 安装Harbor</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215318.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190630215331.png" alt></p><h4 id="4-3-客户端配置"><a href="#4-3-客户端配置" class="headerlink" title="4.3 客户端配置"></a>4.3 客户端配置</h4><h5 id="4-3-1-创建证书存放路径"><a href="#4-3-1-创建证书存放路径" class="headerlink" title="4.3.1 创建证书存放路径"></a>4.3.1 创建证书存放路径</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/docker/certs.d/harbor.biu2ful.xyz/</span><br></pre></td></tr></table></figure><h5 id="4-3-2-获取自签名证书crt文件"><a href="#4-3-2-获取自签名证书crt文件" class="headerlink" title="4.3.2 获取自签名证书crt文件"></a>4.3.2 获取自签名证书crt文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 从Harbor所在服务器scp证书文件到docker客户端，其中10.0.0.30是docker客户端的地址，根据自己的对应修改。</span><br><span class="line">scp ca.crt root@10.0.0.30:/etc/docker/certs.d/harbor.biu2ful.xyz/</span><br></pre></td></tr></table></figure><h5 id="4-3-3-重启docker服务"><a href="#4-3-3-重启docker服务" class="headerlink" title="4.3.3 重启docker服务"></a>4.3.3 重启docker服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure><h4 id="4-4-测试是否能够正常使用"><a href="#4-4-测试是否能够正常使用" class="headerlink" title="4.4 测试是否能够正常使用"></a>4.4 测试是否能够正常使用</h4><h5 id="4-4-1浏览器访问"><a href="#4-4-1浏览器访问" class="headerlink" title="4.4.1浏览器访问"></a>4.4.1浏览器访问</h5><p>​        访问：<a href="https://harbor.biu2ful.xyz/" target="_blank" rel="noopener">https://harbor.biu2ful.xyz/</a></p><p><img src="http://static.staryjie.com/static/images/20190630215555.png" alt></p><h5 id="4-4-2-docker客户端登陆"><a href="#4-4-2-docker客户端登陆" class="headerlink" title="4.4.2 docker客户端登陆"></a>4.4.2 docker客户端登陆</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login harbor.biu2ful.xyz</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215733.png" alt></p><h5 id="4-4-3-推送和拉取镜像"><a href="#4-4-3-推送和拉取镜像" class="headerlink" title="4.4.3 推送和拉取镜像"></a>4.4.3 推送和拉取镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 推送镜像到Harbor仓库</span><br><span class="line">docker tag mysql:5.6 harbor.biu2ful.xyz/library/mysql:5.6</span><br><span class="line">docker push harbor.biu2ful.xyz/library/mysql:5.6</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215828.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 从Harbor仓库拉取镜像</span><br><span class="line">docker image rm harbor.biu2ful.xyz/library/mysql:5.6</span><br><span class="line">docker pull harbor.biu2ful.xyz/library/mysql:5.6</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630215855.png" alt></p><h3 id="5、构建业务基础镜像"><a href="#5、构建业务基础镜像" class="headerlink" title="5、构建业务基础镜像"></a>5、构建业务基础镜像</h3><h4 id="5-1-编写Dockerfile"><a href="#5-1-编写Dockerfile" class="headerlink" title="5.1 编写Dockerfile"></a>5.1 编写Dockerfile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER staryjie@gmail.com</span><br><span class="line"></span><br><span class="line">RUN yum install unzip iproute -y</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_141/</span><br><span class="line">ADD apache-tomcat-8.0.46.tar.gz /usr/local</span><br><span class="line">RUN mv /usr/local/apache-tomcat-8.0.46.tar.gz /usr/local/tomcat</span><br><span class="line">WORKDIR /usr/local/tomcat</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [&quot;./bin/catalina.sh&quot;, &quot;run&quot;]</span><br></pre></td></tr></table></figure><h4 id="5-2-通过Dockerfile构建镜像"><a href="#5-2-通过Dockerfile构建镜像" class="headerlink" title="5.2 通过Dockerfile构建镜像"></a>5.2 通过Dockerfile构建镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t tomcat:v1 .</span><br></pre></td></tr></table></figure><h4 id="5-3-将镜像推送到Harbor仓库"><a href="#5-3-将镜像推送到Harbor仓库" class="headerlink" title="5.3 将镜像推送到Harbor仓库"></a>5.3 将镜像推送到Harbor仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag tomcat:v1 harbor.biu2ful.xyz/test/tomcat:v</span><br><span class="line">docker push harbor.biu2ful.xyz/test/tomcat:v1</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190629163516.png" alt></p><h3 id="6、测试服务器安装Docker"><a href="#6、测试服务器安装Docker" class="headerlink" title="6、测试服务器安装Docker"></a>6、测试服务器安装Docker</h3><h4 id="6-1-安装依赖"><a href="#6-1-安装依赖" class="headerlink" title="6.1 安装依赖"></a>6.1 安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 chrony</span><br></pre></td></tr></table></figure><h5 id="6-2-添加阿里云的docker仓库"><a href="#6-2-添加阿里云的docker仓库" class="headerlink" title="6.2 添加阿里云的docker仓库"></a>6.2 添加阿里云的docker仓库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h5 id="6-3-安装docker"><a href="#6-3-安装docker" class="headerlink" title="6.3 安装docker"></a>6.3 安装docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h5 id="6-4-启动并设置开机自启"><a href="#6-4-启动并设置开机自启" class="headerlink" title="6.4 启动并设置开机自启"></a>6.4 启动并设置开机自启</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker.service</span><br><span class="line">systemctl enable docker.service</span><br></pre></td></tr></table></figure><h5 id="6-5-配置daocloud加速"><a href="#6-5-配置daocloud加速" class="headerlink" title="6.5 配置daocloud加速"></a>6.5 配置daocloud加速</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker.service</span><br><span class="line">systemctl enable docker.service</span><br><span class="line">systemctl start chronyd.service</span><br><span class="line">systemctl enable chronyd.service</span><br></pre></td></tr></table></figure><h5 id="6-6-重启docker服务"><a href="#6-6-重启docker服务" class="headerlink" title="6.6 重启docker服务"></a>6.6 重启docker服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h5 id="6-7-检查是否正常安装docker"><a href="#6-7-检查是否正常安装docker" class="headerlink" title="6.7 检查是否正常安装docker"></a>6.7 检查是否正常安装docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><blockquote><p> 下面是一个很简单的安装脚本：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 1.安装依赖</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 chrony</span><br><span class="line"><span class="meta">#</span> 2.添加阿里云的docker仓库</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span> 3.安装docker</span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta">#</span> 4.启动并设置开机自启</span><br><span class="line">systemctl start docker.service</span><br><span class="line">systemctl enable docker.service</span><br><span class="line"><span class="meta">#</span> 5. 配置daocloud加速</span><br><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br><span class="line"><span class="meta">#</span> 6.重启docker服务</span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="meta">#</span> 7.检查是否正常安装docker</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="7、Jenkins安装"><a href="#7、Jenkins安装" class="headerlink" title="7、Jenkins安装"></a>7、Jenkins安装</h3><h4 id="7-1-构建jenkins镜像"><a href="#7-1-构建jenkins镜像" class="headerlink" title="7.1 构建jenkins镜像"></a>7.1 构建jenkins镜像</h4><p>​        编写Dockerfile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM jenkins/jenkins</span><br><span class="line">USER root</span><br><span class="line">RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; wget http://static.staryjie.com/sources.list -O /etc/apt/sources.list</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y git libltdl-dev</span><br></pre></td></tr></table></figure><p>​        通过Dockerfile构建镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t jenkins:v1 .</span><br></pre></td></tr></table></figure><blockquote><p>在安装的时候发现版本太低的Jenkins很多插件都装不上，建议使用最新版本的Jenkins。</p><p><a href="https://www.cnblogs.com/sxdcgaq8080/p/10489326.html" target="_blank" rel="noopener">https://www.cnblogs.com/sxdcgaq8080/p/10489326.html</a></p></blockquote><h4 id="7-2-通过镜像启动容器"><a href="#7-2-通过镜像启动容器" class="headerlink" title="7.2 通过镜像启动容器"></a>7.2 通过镜像启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name jenkins \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-p 50000:50000 \</span><br><span class="line"><span class="meta">#</span> jenkins目录</span><br><span class="line">-v /var/jenkins_home/:/var/jenkins_home \</span><br><span class="line"><span class="meta">#</span> 挂载宿主机maven到jenkins容器</span><br><span class="line">-v /usr/local/maven3.6/:/usr/local/maven \</span><br><span class="line"><span class="meta">#</span> 挂载宿主机jdk到jenkins容器</span><br><span class="line">-v /usr/local/jdk1.8.0_141/:/usr/local/jdk \</span><br><span class="line"><span class="meta">#</span> 挂载宿主机docker到jenkins容器</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line"><span class="meta">#</span> 将docker相关命令挂载到jenkins容器</span><br><span class="line">-v $(which docker):/usr/bin/docker \</span><br><span class="line"><span class="meta">#</span> 挂载sshkey，实现免密码</span><br><span class="line">-v ~/.ssh:/root/.ssh \</span><br><span class="line">jenkins:v1</span><br><span class="line"><span class="meta">#</span> registry.cn-hangzhou.aliyuncs.com/harbor-aliyun/jenkins:v1</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190629160309.png" alt></p><h4 id="7-3-浏览器访问http-ip-8080"><a href="#7-3-浏览器访问http-ip-8080" class="headerlink" title="7.3 浏览器访问http://ip:8080"></a>7.3 浏览器访问<a href="http://ip:8080" target="_blank" rel="noopener">http://ip:8080</a></h4><p><img src="http://static.staryjie.com/static/images/20190629160423.png" alt></p><h4 id="7-4-自定义安装Jenkins插件"><a href="#7-4-自定义安装Jenkins插件" class="headerlink" title="7.4 自定义安装Jenkins插件"></a>7.4 自定义安装Jenkins插件</h4><p><img src="http://static.staryjie.com/static/images/20190629161631.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190629161741.png" alt></p><h4 id="7-5-创建管理员账号"><a href="#7-5-创建管理员账号" class="headerlink" title="7.5 创建管理员账号"></a>7.5 创建管理员账号</h4><p><img src="http://static.staryjie.com/static/images/20190630124544.png" alt></p><h3 id="8、Jenkins基本配置"><a href="#8、Jenkins基本配置" class="headerlink" title="8、Jenkins基本配置"></a>8、Jenkins基本配置</h3><h4 id="8-1-配置Jenkins的URL"><a href="#8-1-配置Jenkins的URL" class="headerlink" title="8.1 配置Jenkins的URL"></a>8.1 配置Jenkins的URL</h4><p>​        根据自己的实际情况设置，可以直接是ip+端口，或者域名通过nginx或者其他web中间件代理。</p><p><img src="http://static.staryjie.com/static/images/20190630124656.png" alt></p><h4 id="8-2-开始使用Jenkins"><a href="#8-2-开始使用Jenkins" class="headerlink" title="8.2 开始使用Jenkins"></a>8.2 开始使用Jenkins</h4><p><img src="http://static.staryjie.com/static/images/20190630125049.png" alt></p><p>开始使用Jenkins之后进到Jenkins的首页：</p><p><img src="http://static.staryjie.com/static/images/20190630125137.png" alt></p><h4 id="8-3-系统管理-全局配置"><a href="#8-3-系统管理-全局配置" class="headerlink" title="8.3 系统管理-全局配置"></a>8.3 系统管理-全局配置</h4><h5 id="8-3-1-配置JDK"><a href="#8-3-1-配置JDK" class="headerlink" title="8.3.1 配置JDK"></a>8.3.1 配置JDK</h5><p>​        在启动jenkins容器的时候我们将宿主机的jdk挂载到了容器中，所以不需要勾选自动安装，只需要将启动时候指定的路径填写好即可：</p><p><img src="http://static.staryjie.com/static/images/20190630125555.png" alt></p><h5 id="8-3-2-配置git"><a href="#8-3-2-配置git" class="headerlink" title="8.3.2 配置git"></a>8.3.2 配置git</h5><p>​        git是通过yum安装的，所以配置直接使用默认的就可以：</p><p><img src="http://static.staryjie.com/static/images/20190630125837.png" alt></p><h5 id="8-3-3-配置Maven"><a href="#8-3-3-配置Maven" class="headerlink" title="8.3.3 配置Maven"></a>8.3.3 配置Maven</h5><p>​        和jdk配置一样，在启动jenkins容器的时候就已经将宿主机的Maven挂载在容器中了，所以只要配置好路径即可：</p><p><img src="http://static.staryjie.com/static/images/20190630130047.png" alt></p><h4 id="8-4-系统管理-系统配置"><a href="#8-4-系统管理-系统配置" class="headerlink" title="8.4 系统管理-系统配置"></a>8.4 系统管理-系统配置</h4><h5 id="8-4-1-SSH-remote-hosts配置"><a href="#8-4-1-SSH-remote-hosts配置" class="headerlink" title="8.4.1 SSH remote hosts配置"></a>8.4.1 SSH remote hosts配置</h5><p>​        增加一个Jenkins要访问的docker主机的ip，为了实现免密码交互，将Jenkins主机的公钥发送到docker主机：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id root@10.0.0.30</span><br></pre></td></tr></table></figure><p>​        在Jenkins中添加凭据：</p><p><img src="http://static.staryjie.com/static/images/20190630131002.png" alt></p><p>​        在系统配置中添加SSH remote hosts配置：</p><p><img src="http://static.staryjie.com/static/images/20190630131541.png" alt></p><h3 id="9、Jenkins创建项目"><a href="#9、Jenkins创建项目" class="headerlink" title="9、Jenkins创建项目"></a>9、Jenkins创建项目</h3><h4 id="9-1-创建项目"><a href="#9-1-创建项目" class="headerlink" title="9.1 创建项目"></a>9.1 创建项目</h4><p>​        在首页有一个创建新任务的选项。</p><p><img src="http://static.staryjie.com/static/images/20190630131704.png" alt></p><p>​        创建一个Maven的项目：</p><p><img src="http://static.staryjie.com/static/images/20190630131803.png" alt></p><h4 id="9-2-项目配置"><a href="#9-2-项目配置" class="headerlink" title="9.2 项目配置"></a>9.2 项目配置</h4><h5 id="9-2-1-源码管理"><a href="#9-2-1-源码管理" class="headerlink" title="9.2.1 源码管理"></a>9.2.1 源码管理</h5><p>​        在源码管理选项中选择自己的源码管理方式和源码拉取地址：</p><p><img src="http://static.staryjie.com/static/images/20190630132104.png" alt></p><h5 id="9-2-2-Maven构建前-配置Maven跳过项目测试用例"><a href="#9-2-2-Maven构建前-配置Maven跳过项目测试用例" class="headerlink" title="9.2.2 Maven构建前-配置Maven跳过项目测试用例"></a>9.2.2 Maven构建前-配置Maven跳过项目测试用例</h5><p>​        参数是：clean package -Dmaven.test.skip=true</p><p><img src="http://static.staryjie.com/static/images/20190630132326.png" alt></p><h5 id="9-2-3-Maven构建后配置"><a href="#9-2-3-Maven构建后配置" class="headerlink" title="9.2.3 Maven构建后配置"></a>9.2.3 Maven构建后配置</h5><p>​        通过构建后配置将war包基于基础业务镜像进行构建新的镜像，并上传到Harbor镜像仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd $WORKSPACE</span><br><span class="line">docker login -u admin -p Harbor123456 harbor.biu2ful.xyz</span><br><span class="line">cat &gt; Dockerfile &lt;&lt; EOF</span><br><span class="line">FROM harbor.biu2ful.xyz/test/tomcat:v1</span><br><span class="line">MAINTAINER staryjie@gmail.com</span><br><span class="line"></span><br><span class="line">COPY target/solo.war /tmp/ROOT.war</span><br><span class="line">RUN rm -rf /usr/local/tomcat/webapps/* &amp;&amp;  \</span><br><span class="line">         unzip /tmp/ROOT.war -d /usr/local/tomcat/webapps/ROOT &amp;&amp; \</span><br><span class="line">         rm -f /tmp/ROOT.war</span><br><span class="line">ENTRYPOINT ["./bin/catalina.sh", "run"]</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker build -t harbor.biu2ful.xyz/test/solo:v1 .</span><br><span class="line">docker push harbor.biu2ful.xyz/test/solo:v1</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630143110.png" alt></p><h5 id="9-2-4-构建完成后在远程主机上执行命令"><a href="#9-2-4-构建完成后在远程主机上执行命令" class="headerlink" title="9.2.4 构建完成后在远程主机上执行命令"></a>9.2.4 构建完成后在远程主机上执行命令</h5><p>​        上一步将新构建的镜像推送到Harbor仓库，这一步通过仓库的镜像在远程主机上启动一个容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BUILD_ID=DONTKILLME</span><br><span class="line">docker login -uadmin -pHarbor123456 harbor.biu2ful.xyz</span><br><span class="line">docker rm -f solo|true</span><br><span class="line">docker image rm -f harbor.biu2ful.xyz/test/solo:v1|true</span><br><span class="line">docker run -d --name solo -p 8888:8080 -v /usr/local/jdk1.8.0_141/:/usr/local/jdk1.8.0_141/ harbor.biu2ful.xyz/test/solo:v1</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190630144948.png" alt></p><h3 id="10、测试"><a href="#10、测试" class="headerlink" title="10、测试"></a>10、测试</h3><h4 id="10-1-将项目代码推送到Git服务器"><a href="#10-1-将项目代码推送到Git服务器" class="headerlink" title="10.1 将项目代码推送到Git服务器"></a>10.1 将项目代码推送到Git服务器</h4><p>​        这里通过一个GitHub上java的开源博客系统来测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.将Git服务器新建的仓库clone到本地</span><br><span class="line">cd /root/cicd &amp;&amp; git clone root@10.0.0.20:/home/git/solo.git</span><br><span class="line"><span class="meta">#</span> 2.获取代码</span><br><span class="line">git clone https://github.com/b3log/solo.git</span><br><span class="line"><span class="meta">#</span> 3.将GitHub上clone的代码复制到从Git仓库clone的空仓库里面</span><br><span class="line">cp ./solo-master/* ./solo/ -rf</span><br><span class="line"><span class="meta">#</span> 4.将代码通过git提交到Git服务器创建好的仓库</span><br><span class="line">git config --global user.email "staryjie@163.com"</span><br><span class="line">git config --global user.name "staryjie"</span><br><span class="line">git add .</span><br><span class="line">git commit -m "all"</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h4 id="10-2-Jenkins构建"><a href="#10-2-Jenkins构建" class="headerlink" title="10.2 Jenkins构建"></a>10.2 Jenkins构建</h4><h5 id="10-2-1-构建项目"><a href="#10-2-1-构建项目" class="headerlink" title="10.2.1 构建项目"></a>10.2.1 构建项目</h5><p>​        通过上面已经创建的Maven项目solo_blog来构建：</p><p><img src="http://static.staryjie.com/static/images/20190630133041.png" alt></p><h5 id="10-2-3-查看控制台输出"><a href="#10-2-3-查看控制台输出" class="headerlink" title="10.2.3 查看控制台输出"></a>10.2.3 查看控制台输出</h5><p>​        点击立即构建之后就可以点击查看控制台输出来查看整个构建过程:</p><p><img src="http://static.staryjie.com/static/images/20190630133217.png" alt></p><p>​        第一次构建需要花费的时间比较多，耐心等待一会儿就可以看到构建结果：</p><p><img src="http://static.staryjie.com/static/images/20190630134051.png" alt></p><p>​        在服务器上查看构建好的war包：</p><p><img src="http://static.staryjie.com/static/images/20190630134258.png" alt></p><p>​        添加构建后将war包和基础镜像构建新镜像并推送到Harbor仓库的配置后，再次构建：</p><p><img src="http://static.staryjie.com/static/images/20190630143336.png" alt></p><p>​        在Harbor仓库查看镜像：</p><p><img src="http://static.staryjie.com/static/images/20190630143506.png" alt></p><p>​        配置了远程主机拉取镜像并运行容器之后，查看Jenkins执行结果：</p><p><img src="http://static.staryjie.com/static/images/20190630211739.png" alt></p><p>​        在远程主机查看是否有对应的镜像和已经运行的叫solo的容器：</p><p><img src="http://static.staryjie.com/static/images/20190630211617.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190630213434.png" alt></p><p>​        在浏览器上访问：<a href="http://10.0.0.30:8888" target="_blank" rel="noopener">http://10.0.0.30:8888</a></p><p><img src="http://static.staryjie.com/static/images/20190630211855.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、CI-CD介绍&quot;&gt;&lt;a href=&quot;#1、CI-CD介绍&quot; class=&quot;headerlink&quot; title=&quot;1、CI/CD介绍&quot;&gt;&lt;/a&gt;1、CI/CD介绍&lt;/h3&gt;&lt;p&gt;CI/CD是一个持续的闭环的流程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.staryjie.com/static/images/20190626160504.png&quot; alt=&quot;CI/CD&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CI&amp;CD" scheme="http://yoursite.com/categories/CI-CD/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="CI&amp;CD" scheme="http://yoursite.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>通过阿里云Python SDK管理ECS安全组</title>
    <link href="http://yoursite.com/2019/09/27/%E9%80%9A%E8%BF%87%E9%98%BF%E9%87%8C%E4%BA%91Python-SDK%E7%AE%A1%E7%90%86ECS%E5%AE%89%E5%85%A8%E7%BB%84/"/>
    <id>http://yoursite.com/2019/09/27/通过阿里云Python-SDK管理ECS安全组/</id>
    <published>2019-09-27T05:36:23.000Z</published>
    <updated>2019-09-27T05:37:21.152Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.服务器操作系统 CentOS7</span><br><span class="line">2.Python版本 2.7.5</span><br><span class="line">3.阿里云账号、Access Key ID、Access Key Secret、安全组ID、Region ID(如cn-shanghai)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1、安装pip"><a href="#1、安装pip" class="headerlink" title="1、安装pip"></a>1、安装pip</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 默认没有安装pip，首先先安装pip</span><br><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br><span class="line">python get-pip.py</span><br><span class="line"><span class="meta">#</span> 检查是否安装完成</span><br><span class="line">pip -V</span><br></pre></td></tr></table></figure><h3 id="2、安装阿里云Python-SDK"><a href="#2、安装阿里云Python-SDK" class="headerlink" title="2、安装阿里云Python SDK"></a>2、安装阿里云Python SDK</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install aliyun-python-sdk-ecs</span><br></pre></td></tr></table></figure><h3 id="3、Python-SDK实现安全组的增加和删除"><a href="#3、Python-SDK实现安全组的增加和删除" class="headerlink" title="3、Python SDK实现安全组的增加和删除"></a>3、Python SDK实现安全组的增加和删除</h3><h4 id="3-1-增加安全组规则"><a href="#3-1-增加安全组规则" class="headerlink" title="3.1 增加安全组规则"></a>3.1 增加安全组规则</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python2</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkecs.request.v20140526 <span class="keyword">import</span> AuthorizeSecurityGroupRequest</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliGroup</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, AccessKey, AccessSecret, RegionId)</span>:</span></span><br><span class="line">        self.AccessKey = AccessKey</span><br><span class="line">        self.AccessSecret = AccessSecret</span><br><span class="line">        self.RegionId = RegionId</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">client</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""用于创建AcsClient实例</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        client = AcsClient(self.AccessKey, self.AccessSecret, self.RegionId)</span><br><span class="line">        <span class="keyword">return</span> client</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authorizeSecurityGroupRequest</span><span class="params">(self, PortRange, SourceCidrIp, Priority=<span class="number">1</span>, IpProtocol=<span class="string">'tcp'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      SecurityGroupId=<span class="string">'sg-bp1be0nm1c8es3sonuyy'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""用于添加安全组规则</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 创建AuthorizeSecurityGroupRequest实例</span></span><br><span class="line">        request = AuthorizeSecurityGroupRequest.AuthorizeSecurityGroupRequest()</span><br><span class="line">        <span class="comment"># 设置安全组ID</span></span><br><span class="line">        request.set_SecurityGroupId(SecurityGroupId)</span><br><span class="line">        <span class="comment"># 设置协议，比如TCP或者UDP</span></span><br><span class="line">        request.set_IpProtocol(IpProtocol)</span><br><span class="line">        <span class="comment"># 设置端口范围</span></span><br><span class="line">        request.set_PortRange(PortRange)</span><br><span class="line">        <span class="comment"># 如果存在源ip，则设置源ip</span></span><br><span class="line">        <span class="keyword">if</span> SourceCidrIp:</span><br><span class="line">            request.set_SourceCidrIp(SourceCidrIp)</span><br><span class="line">        <span class="comment"># 设置优先级</span></span><br><span class="line">        request.set_Priority(Priority)</span><br><span class="line">        <span class="comment"># 设置规则的动作为接受</span></span><br><span class="line">        request.set_Policy(<span class="string">'accept'</span>)</span><br><span class="line">        <span class="comment"># 设置接收数据格式为json</span></span><br><span class="line">        request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">        <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># AliGroup类实例化</span></span><br><span class="line">    ali = AliGroup(<span class="string">"LTAIgURtYA5lRIdF"</span>, <span class="string">"Bz4X2kHtW9EbLP3uAU4Bx7kT1xUUbn"</span>, <span class="string">"cn-hangzhou"</span>)</span><br><span class="line">    <span class="comment"># 创建AcsClient实例</span></span><br><span class="line">    clt = ali.client()</span><br><span class="line">    <span class="comment"># 添加安全组规则，由于优先级、协议和安全组ID已经设置默认参数，所以只需要在运行脚本时输入端口范围和源ip两个参数</span></span><br><span class="line">    add = ali.authorizeSecurityGroupRequest(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="comment"># 打印输出</span></span><br><span class="line">    res = clt.do_action_with_exception(add)</span><br><span class="line">    <span class="keyword">print</span> res</span><br></pre></td></tr></table></figure><h4 id="3-2-删除安全组规则"><a href="#3-2-删除安全组规则" class="headerlink" title="3.2 删除安全组规则"></a>3.2 删除安全组规则</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python2</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkecs.request.v20140526 <span class="keyword">import</span> RevokeSecurityGroupRequest</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliGroup</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, AccessKey, AccessSecret, RegionId)</span>:</span></span><br><span class="line">        self.AccessKey = AccessKey</span><br><span class="line">        self.AccessSecret = AccessSecret</span><br><span class="line">        self.RegionId = RegionId</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">client</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""用于创建AcsClient的实例</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        client = AcsClient(self.AccessKey, self.AccessSecret, self.RegionId)</span><br><span class="line">        <span class="keyword">return</span> client</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">revokeSecurityGroupRequest</span><span class="params">(self, PortRange, SourceCidrIp, Priority=<span class="number">1</span>, IpProtocol=<span class="string">'tcp'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   SecurityGroupId=<span class="string">'sg-bp1be0nm1c8es3sonuyy'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""删除安全组规则</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        request = RevokeSecurityGroupRequest.RevokeSecurityGroupRequest()</span><br><span class="line">        request.set_SecurityGroupId(SecurityGroupId)</span><br><span class="line">        request.set_IpProtocol(IpProtocol)</span><br><span class="line">        request.set_PortRange(PortRange)</span><br><span class="line">        <span class="keyword">if</span> SourceCidrIp:</span><br><span class="line">            request.set_SourceCidrIp(SourceCidrIp)</span><br><span class="line">        request.set_Policy(<span class="string">'accept'</span>)</span><br><span class="line">        request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">        <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ali = AliGroup(<span class="string">"LTAIgURtYA5lRIdF"</span>, <span class="string">"Bz4X2kHtW9EbLP3uAU4Bx7kT1xUUbn"</span>, <span class="string">"cn-hangzhou"</span>)</span><br><span class="line">    clt = ali.client()</span><br><span class="line">    rem = ali.revokeSecurityGroupRequest(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    res = clt.do_action_with_exception(rem)</span><br><span class="line">    <span class="keyword">print</span> res</span><br></pre></td></tr></table></figure><h3 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h3><h4 id="4-1-测试新增安全组规则"><a href="#4-1-测试新增安全组规则" class="headerlink" title="4.1 测试新增安全组规则"></a>4.1 测试新增安全组规则</h4><ul><li>执行脚本添加规则</li></ul><p><img src="http://static.staryjie.com/static/images/20190725114537.png" alt></p><ul><li>web控制台查看安全组</li></ul><p><img src="http://static.staryjie.com/static/images/20190725114709.png" alt></p><h4 id="4-2-测试删除安全组规则"><a href="#4-2-测试删除安全组规则" class="headerlink" title="4.2 测试删除安全组规则"></a>4.2 测试删除安全组规则</h4><ul><li>执行脚本删除规则</li></ul><p><img src="http://static.staryjie.com/static/images/20190725114813.png" alt></p><ul><li>web控制台查看安全组</li></ul><p><img src="http://static.staryjie.com/static/images/20190725114844.png" alt></p><p>很明显，之前添加的规则已经被删除了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.服务器操作系统 CentOS7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.Python版本 2.7.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.阿里云账号、Access Key ID、Access Key Secret、安全组ID、Region ID(如cn-shanghai)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="aliyun" scheme="http://yoursite.com/categories/aliyun/"/>
    
    
      <category term="aliyun" scheme="http://yoursite.com/tags/aliyun/"/>
    
      <category term="SDK" scheme="http://yoursite.com/tags/SDK/"/>
    
  </entry>
  
  <entry>
    <title>pyecharts报错&#39;pyecharts&#39; has no attribute &#39;Bar&#39;的解决办法</title>
    <link href="http://yoursite.com/2019/09/27/pyecharts%E6%8A%A5%E9%94%99-pyecharts-has-no-attribute-Bar-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/27/pyecharts报错-pyecharts-has-no-attribute-Bar-的解决办法/</id>
    <published>2019-09-27T05:30:38.000Z</published>
    <updated>2019-09-27T05:38:39.721Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、出错原因"><a href="#1、出错原因" class="headerlink" title="1、出错原因"></a>1、出错原因</h3><p>因为用下面语句安装<code>pyecharts</code>时，默认会安装最新版本的<code>pyecharts</code>，python解释器版本更新的速度慢很多，现在的python解释器默认的是与0.1.9.4版本的<code>pyecharts</code>配合，你安装最新的，python解释器不能识别，所以会报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyecharts</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、解决方法"><a href="#2、解决方法" class="headerlink" title="2、解决方法"></a>2、解决方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1.先安装wheel</span><br><span class="line">pip install wheel</span><br><span class="line"><span class="meta">#</span> 2.再安装pyecharts0.1.9.4版本</span><br><span class="line">pip install pyecharts==0.1.9.4</span><br></pre></td></tr></table></figure><h3 id="3、验证"><a href="#3、验证" class="headerlink" title="3、验证"></a>3、验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line">bar1 = Bar(<span class="string">"我的第一个图表"</span>, <span class="string">"副标题"</span>)</span><br><span class="line">bar1.add(<span class="string">"服装"</span>, [<span class="string">'衬衣'</span>, <span class="string">'羊毛衫'</span>, <span class="string">'雪纺衫'</span>, <span class="string">'裤子'</span>, <span class="string">'高跟鞋'</span>, <span class="string">'袜子'</span>], [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>, <span class="number">90</span>])</span><br><span class="line">bar1.show_config()</span><br><span class="line">bar1.render()</span><br></pre></td></tr></table></figure><p>运行上面的代码会生成如下的render.html文件：</p><p><img src="http://static.staryjie.com/static/images/20190821102409.png" alt></p><p>在浏览器打开：</p><p><img src="http://static.staryjie.com/static/images/20190821102534.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、出错原因&quot;&gt;&lt;a href=&quot;#1、出错原因&quot; class=&quot;headerlink&quot; title=&quot;1、出错原因&quot;&gt;&lt;/a&gt;1、出错原因&lt;/h3&gt;&lt;p&gt;因为用下面语句安装&lt;code&gt;pyecharts&lt;/code&gt;时，默认会安装最新版本的&lt;code&gt;pyecharts&lt;/code&gt;，python解释器版本更新的速度慢很多，现在的python解释器默认的是与0.1.9.4版本的&lt;code&gt;pyecharts&lt;/code&gt;配合，你安装最新的，python解释器不能识别，所以会报错。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install pyecharts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="pyecharts" scheme="http://yoursite.com/tags/pyecharts/"/>
    
  </entry>
  
  <entry>
    <title>pipenv简单使用</title>
    <link href="http://yoursite.com/2019/09/27/pipenv%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/27/pipenv简单使用/</id>
    <published>2019-09-27T05:06:02.000Z</published>
    <updated>2019-09-27T05:07:55.413Z</updated>
    
    <content type="html"><![CDATA[<p>pipenv 是 Pipfile 主要倡导者、requests 作者 Kenneth Reitz 写的一个命令行工具，主要包含了Pipfile、pip、click、requests和virtualenv。Pipfile和pipenv本来都是Kenneth Reitz的个人项目，后来贡献给了pypa组织。Pipfile是社区拟定的依赖管理文件，用于替代过于简陋的 requirements.txt 文件。</p><a id="more"></a><h2 id="1、安装pipenv"><a href="#1、安装pipenv" class="headerlink" title="1、安装pipenv"></a>1、安装pipenv</h2><blockquote><p>参考：<a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">https://github.com/pypa/pipenv</a></p></blockquote><h3 id="1-1-pip安装"><a href="#1-1-pip安装" class="headerlink" title="1.1 pip安装"></a>1.1 pip安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure><h3 id="1-2-Mac通过brew安装"><a href="#1-2-Mac通过brew安装" class="headerlink" title="1.2 Mac通过brew安装"></a>1.2 Mac通过brew安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pipenv</span><br></pre></td></tr></table></figure><h2 id="2、pipenv简单使用"><a href="#2、pipenv简单使用" class="headerlink" title="2、pipenv简单使用"></a>2、pipenv简单使用</h2><h3 id="2-1-创建虚拟环境"><a href="#2-1-创建虚拟环境" class="headerlink" title="2.1 创建虚拟环境"></a>2.1 创建虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 进入项目目录</span><br><span class="line">cd projectdir</span><br><span class="line"><span class="meta">#</span> 创建虚拟环境</span><br><span class="line">pipenv install</span><br></pre></td></tr></table></figure><blockquote><p>上面的命令会自动在~/.local/share/virtualenvs/目录下创建一个projectdir加一串随机字符串的虚拟环境目录。</p></blockquote><h3 id="2-2-创建指定python版本的虚拟环境"><a href="#2-2-创建指定python版本的虚拟环境" class="headerlink" title="2.2 创建指定python版本的虚拟环境"></a>2.2 创建指定python版本的虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 指定python版本为3.6.5</span><br><span class="line">pipenv install --python 3.6.5</span><br><span class="line"><span class="meta">#</span> 或者</span><br><span class="line">pipenv --python 3.6.5</span><br></pre></td></tr></table></figure><h3 id="2-3-修改pipenv默认虚拟环境位置为当前目录下"><a href="#2-3-修改pipenv默认虚拟环境位置为当前目录下" class="headerlink" title="2.3 修改pipenv默认虚拟环境位置为当前目录下"></a>2.3 修改pipenv默认虚拟环境位置为当前目录下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 设置环境变量PIPENV_VENV_IN_PROJECT=1</span><br><span class="line">export export PIPENV_VENV_IN_PROJECT=1</span><br></pre></td></tr></table></figure><blockquote><h6 id="在初始化虚拟环境的时候，pipenv默认会把虚拟环境的python目录以-及后来安装的各种模块放到-home-username-local-share-virtualenvs里，一般-和home是在一个分区的-之前就遇到过-所在的分区写满了，整个服务器都挂掉了-，如果想放到其他地方可以有以下几种方法："><a href="#在初始化虚拟环境的时候，pipenv默认会把虚拟环境的python目录以-及后来安装的各种模块放到-home-username-local-share-virtualenvs里，一般-和home是在一个分区的-之前就遇到过-所在的分区写满了，整个服务器都挂掉了-，如果想放到其他地方可以有以下几种方法：" class="headerlink" title="在初始化虚拟环境的时候，pipenv默认会把虚拟环境的python目录以 及后来安装的各种模块放到/home/$username/.local/share/virtualenvs里，一般/和home是在一个分区的(之前就遇到过/所在的分区写满了，整个服务器都挂掉了)，如果想放到其他地方可以有以下几种方法："></a>在初始化虚拟环境的时候，pipenv默认会把虚拟环境的python目录以 及后来安装的各种模块放到/home/$username/.local/share/virtualenvs里，一般/和home是在一个分区的(之前就遇到过/所在的分区写满了，整个服务器都挂掉了)，如果想放到其他地方可以有以下几种方法：</h6><ol><li>export PIPENV_VENV_IN_PROJECT=1 设置这个环境变量，pipenv会在当前目录下创建.venv的目录，以后都会把模块装到这个.venv下。</li><li>自己在项目目录下手动创建.venv的目录，然后运行 pipenv run 或者 pipenv shell pipenv都会在.venv下创建虚拟环境。</li><li>设置WORKON_HOME到其他的地方 （<strong>如果当前目录下已经有.venv,此项设置失效</strong>）。</li></ol></blockquote><h3 id="2-4-激活虚拟环境"><a href="#2-4-激活虚拟环境" class="headerlink" title="2.4 激活虚拟环境"></a>2.4 激活虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv shell</span><br></pre></td></tr></table></figure><h3 id="2-5-安装相关模块并加入到Pipfile"><a href="#2-5-安装相关模块并加入到Pipfile" class="headerlink" title="2.5 安装相关模块并加入到Pipfile"></a>2.5 安装相关模块并加入到Pipfile</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pipenv install packagename</span><br><span class="line"><span class="meta">#</span> 比如</span><br><span class="line">pipenv install flask</span><br></pre></td></tr></table></figure><h3 id="2-6-安装固定版本模块并加入到Pipfile"><a href="#2-6-安装固定版本模块并加入到Pipfile" class="headerlink" title="2.6 安装固定版本模块并加入到Pipfile"></a>2.6 安装固定版本模块并加入到Pipfile</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install django==1.11</span><br></pre></td></tr></table></figure><h3 id="2-7-显示虚拟环境信息"><a href="#2-7-显示虚拟环境信息" class="headerlink" title="2.7 显示虚拟环境信息"></a>2.7 显示虚拟环境信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv --venv</span><br></pre></td></tr></table></figure><h3 id="2-8-显示目录信息"><a href="#2-8-显示目录信息" class="headerlink" title="2.8 显示目录信息"></a>2.8 显示目录信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv --where</span><br></pre></td></tr></table></figure><h3 id="2-9-显示Python解释器信息"><a href="#2-9-显示Python解释器信息" class="headerlink" title="2.9 显示Python解释器信息"></a>2.9 显示Python解释器信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv --py</span><br></pre></td></tr></table></figure><h3 id="2-10-查看目前安装的库及其依赖"><a href="#2-10-查看目前安装的库及其依赖" class="headerlink" title="2.10 查看目前安装的库及其依赖"></a>2.10 查看目前安装的库及其依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv graph</span><br></pre></td></tr></table></figure><h3 id="2-11-检查安全漏洞"><a href="#2-11-检查安全漏洞" class="headerlink" title="2.11 检查安全漏洞"></a>2.11 检查安全漏洞</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv check</span><br></pre></td></tr></table></figure><h3 id="2-12-卸载全部包"><a href="#2-12-卸载全部包" class="headerlink" title="2.12 卸载全部包"></a>2.12 卸载全部包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv uninstall --all</span><br></pre></td></tr></table></figure><h2 id="3、设置pipenv安装源为国内源"><a href="#3、设置pipenv安装源为国内源" class="headerlink" title="3、设置pipenv安装源为国内源"></a>3、设置pipenv安装源为国内源</h2><p>修改当前目录下Pipfile文件，将[source]下的url属性改成国内的源即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[source]]</span><br><span class="line">url = &quot;https://mirrors.aliyun.com/pypi/simple&quot;</span><br><span class="line">verify_ssl = true</span><br><span class="line">name = &quot;pypi&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pipenv 是 Pipfile 主要倡导者、requests 作者 Kenneth Reitz 写的一个命令行工具，主要包含了Pipfile、pip、click、requests和virtualenv。Pipfile和pipenv本来都是Kenneth Reitz的个人项目，后来贡献给了pypa组织。Pipfile是社区拟定的依赖管理文件，用于替代过于简陋的 requirements.txt 文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>利用GitHub从零开始搭建一个博客</title>
    <link href="http://yoursite.com/2019/09/27/%E5%88%A9%E7%94%A8GitHub%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/09/27/利用GitHub从零开始搭建一个博客/</id>
    <published>2019-09-27T04:47:40.000Z</published>
    <updated>2019-09-27T05:34:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般我们要搭建一个个人的博客站点需要买服务器、域名，装各种运行环境等等，非常的费钱费力。</p><p>其实就算没有这些，我们也是照样可以通过Hexo框架结合GitHub Pages搭建一个自己的博客站点的。</p><p>Hexo 这个博客框架没有那么重量级，它是 MarkDown 直接写文章的，然后 Hexo 可以直接将文章编译成静态网页文件并发布，所以这样文章的内容、标题、标签等信息就没必要存数据库里面了，是直接纯静态页面了，这就解决了数据库的问题。</p><a id="more"></a><h2 id="1、准备条件"><a href="#1、准备条件" class="headerlink" title="1、准备条件"></a>1、准备条件</h2><ul><li>GitHub账号</li><li>域名(可选)</li></ul><h2 id="2、新建GitHub项目"><a href="#2、新建GitHub项目" class="headerlink" title="2、新建GitHub项目"></a>2、新建GitHub项目</h2><p>首先在 GitHub 新建一个仓库（Repository），名称为 {username}.github.io，注意这个名比较特殊，必须要是 github.io 为后缀结尾的。比如我的用户名是59devops，那么就新建一个<code>59devops.github.io</code>的仓库。</p><p><img src="http://static.staryjie.com/static/images/20190927084640-3SKcOw.png" alt></p><h2 id="3、为仓库配置SSH-Key"><a href="#3、为仓库配置SSH-Key" class="headerlink" title="3、为仓库配置SSH-Key"></a>3、为仓库配置SSH-Key</h2><p>因为后期我们更新文章或者提交代码需要有相应的权限才可以，通过用户名和密码不方便且不安全，所以非常有必要配置SSH-Key密钥。</p><h3 id="3-1-创建密钥对"><a href="#3-1-创建密钥对" class="headerlink" title="3.1 创建密钥对"></a>3.1 创建密钥对</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/. ssh</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"邮件地址"</span></span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p><p><img src="http://static.staryjie.com/static/images/20190927085206-aIZljX.png" alt></p><p><img src="http://static.staryjie.com/static/images/20190927085536-1m8tfI.png" alt></p><h3 id="3-2-测试是否成功"><a href="#3-2-测试是否成功" class="headerlink" title="3.2 测试是否成功"></a>3.2 测试是否成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190927085829-hv5vlP.png" alt></p><p>如上图显示，则表示SSH-Key配置成功！</p><h3 id="3-3-配置Git信息"><a href="#3-3-配置Git信息" class="headerlink" title="3.3 配置Git信息"></a>3.3 配置Git信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"59devops"</span></span><br><span class="line">git config --global user.email  <span class="string">"59devops@gmail.com"</span></span><br></pre></td></tr></table></figure><h2 id="4、安装环境"><a href="#4、安装环境" class="headerlink" title="4、安装环境"></a>4、安装环境</h2><h3 id="4-1-安装Node-js"><a href="#4-1-安装Node-js" class="headerlink" title="4.1 安装Node.js"></a>4.1 安装Node.js</h3><p>首先在自己的电脑上安装 Node.js，下载地址：<a href="https://nodejs.org/zh-cn/download/，可以安装" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/，可以安装</a> Stable 版本。</p><p>安装完毕之后，确保环境变量配置好，能正常使用 <code>npm</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --version</span><br></pre></td></tr></table></figure><h3 id="4-2-安装Hexo"><a href="#4-2-安装Hexo" class="headerlink" title="4.2 安装Hexo"></a>4.2 安装Hexo</h3><p>Hexo是一个博客框架，Hexo 官方还提供了一个命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客，所以在这之前我们需要先安装 Hexo 的命令行工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完毕之后，确保环境变量配置好，能正常使用 <code>hexo</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --version</span><br></pre></td></tr></table></figure><h2 id="5、初始化项目"><a href="#5、初始化项目" class="headerlink" title="5、初始化项目"></a>5、初始化项目</h2><h3 id="5-1-创建项目"><a href="#5-1-创建项目" class="headerlink" title="5.1 创建项目"></a>5.1 创建项目</h3><p>使用 Hexo 的命令行创建一个项目，并将其在本地跑起来，整体跑通看看。</p><p>首先使用如下命令创建项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &#123;name&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>name</code>就是项目名，我这里要创建<code>59devops</code>的博客，我就把项目取名为<code>59devops</code>了，用了纯小写，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 59devops</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190927090618-SQT1A9.png" alt></p><p>这样<code>59devops</code>文件夹下就会出现 Hexo 的初始化文件，包括 themes、scaffolds、source 等文件夹。</p><h3 id="5-2-编译生成HTML代码"><a href="#5-2-编译生成HTML代码" class="headerlink" title="5.2 编译生成HTML代码"></a>5.2 编译生成HTML代码</h3><p>首先进入新生成的文件夹里面，然后调用 Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190927090829-zdemHZ.png" alt></p><p>可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。</p><h3 id="5-3-本地运行项目"><a href="#5-3-本地运行项目" class="headerlink" title="5.3 本地运行项目"></a>5.3 本地运行项目</h3><p>利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190927090958-rErDfW.png" alt></p><p>项目成功运行在本地的4000端口上，浏览器访问<code>http://localhost:4000</code>：</p><p><img src="http://static.staryjie.com/static/images/20190927091136-AKByFZ.png" alt></p><h2 id="6、部署项目"><a href="#6、部署项目" class="headerlink" title="6、部署项目"></a>6、部署项目</h2><p>将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。</p><p>Hexo 已经给我们提供一个命令，利用它我们可以直接将博客一键部署，不需要手动去配置服务器或进行其他的各项配置。</p><h3 id="6-1-修改部署地址"><a href="#6-1-修改部署地址" class="headerlink" title="6.1 修改部署地址"></a>6.1 修改部署地址</h3><p>打开根目录下的 _config.yml 文件，找到 Deployment 这个地方，把刚才新建的 Repository 的地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/59devops/59devops.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="6-2-安装Git部署插件"><a href="#6-2-安装Git部署插件" class="headerlink" title="6.2 安装Git部署插件"></a>6.2 安装Git部署插件</h3><p>需要额外安装一个支持 Git 的部署插件，名字叫做<code>hexo-deployer-git</code>，有了它我们才可以顺利将其部署到 GitHub 上面，如果不安装的话，在执行部署命令时会报如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployer not found: git</span><br></pre></td></tr></table></figure><p>安装<code>hexo-deployer-git</code>插件的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190927091833-fnNXMM.png" alt></p><h3 id="6-3-部署项目"><a href="#6-3-部署项目" class="headerlink" title="6.3 部署项目"></a>6.3 部署项目</h3><p>安装成功后，执行部署命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190927092306-jlXbrs.png" alt></p><p>如果出现类似上面的内容，就证明我们的博客已经成功部署到 GitHub Pages 上面了，这时候我们访问一下 GitHub Repository 同名的链接，比如我的<code>59devops</code>博客的 Repository 名称取的是<code>59devops.github.io</code>，那我就访问 <a href="http://59devops.github.io，这时候我们就可以看到跟本地一模一样的博客内容了。" target="_blank" rel="noopener">http://59devops.github.io，这时候我们就可以看到跟本地一模一样的博客内容了。</a></p><p>查看一下GitHub上的内容：</p><p><img src="http://static.staryjie.com/static/images/20190927092625-DglBDW.png" alt></p><p>这些内容实际上是博客文件夹下面的 public 文件夹下的所有内容，Hexo 把编译之后的静态页面内容上传到 GitHub 的 master 分支上面去了。</p><h3 id="6-4-访问测试"><a href="#6-4-访问测试" class="headerlink" title="6.4 访问测试"></a>6.4 访问测试</h3><p><img src="http://static.staryjie.com/static/images/20190927092508-wggCVy.png" alt></p><h3 id="6-5-上传博客源码到GitHub仓库"><a href="#6-5-上传博客源码到GitHub仓库" class="headerlink" title="6.5 上传博客源码到GitHub仓库"></a>6.5 上传博客源码到GitHub仓库</h3><p>那我博客的源码也想放到 GitHub 上面怎么办呢？其实很简单，新建一个其他的分支就好了，比如我这边就新建了一个 source 分支，代表博客源码的意思。</p><p>具体的添加过程就很简单了，参加如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init    <span class="comment"># 初始化项目</span></span><br><span class="line">git checkout -b <span class="built_in">source</span>    <span class="comment"># 创建并切换到source分支</span></span><br><span class="line">git add -A    <span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">"init blog"</span>    <span class="comment"># 提交并注释</span></span><br><span class="line">git remote add origin git@github.com:59devops/59devops.github.io.git    <span class="comment"># 添加到远程仓库</span></span><br><span class="line">git push origin <span class="built_in">source</span>    <span class="comment"># 将代码提交到远程的source分支</span></span><br></pre></td></tr></table></figure><p>在GitHub仓库中可以看到已经有两个分支：</p><p><img src="http://static.staryjie.com/static/images/20190927093535-zVi8el.png" alt></p><h2 id="7、配置站点信息"><a href="#7、配置站点信息" class="headerlink" title="7、配置站点信息"></a>7、配置站点信息</h2><p>完成如上内容之后，实际上我们只完成了博客搭建的一小步，因为我们仅仅是把初始化的页面部署成功了，博客里面还没有设置任何有效的信息。下面就让我们来进行一下博客的基本配置，另外换一个好看的主题，配置一些其他的内容，让博客真正变成属于我们自己的博客吧。</p><h3 id="7-1-修改站点标题、关键字信息"><a href="#7-1-修改站点标题、关键字信息" class="headerlink" title="7.1 修改站点标题、关键字信息"></a>7.1 修改站点标题、关键字信息</h3><p>修改根目录下的 _config.yml 文件，找到 Site 区域，这里面可以配置站点标题 title、副标题 subtitle 等内容、关键字 keywords 等内容，比如我的就修改为如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 59Devops</span><br><span class="line">subtitle: 一个运维小菜鸡的个人博客网站。</span><br><span class="line">description: 记录学习、工作和生活中遇到的各种问题。</span><br><span class="line">keywords: &quot;运维, Python, Shell, ...&quot;</span><br><span class="line">author: StaryJie</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure><p><code>hexo serve</code>在本地运行并在浏览器中打开测试：</p><p><img src="http://static.staryjie.com/static/images/20190927094728-6zmixV.png" alt></p><h3 id="7-2-修改主题"><a href="#7-2-修改主题" class="headerlink" title="7.2 修改主题"></a>7.2 修改主题</h3><p>目前 Hexo 里面应用最多的主题基本就是 Next 主题了，个人感觉这个主题还是挺好看的，另外它支持的插件和功能也极为丰富，配置了这个主题，我们的博客可以支持更多的扩展功能，比如阅览进度条、中英文空格排版、图片懒加载等等。</p><h4 id="7-2-1-下载主题"><a href="#7-2-1-下载主题" class="headerlink" title="7.2.1 下载主题"></a>7.2.1 下载主题</h4><p>目前 Next 主题已经更新到 7.x 版本了，我们可以直接到 Next 主题的 GitHub Repository 上把这个主题下载下来。</p><p>首先命令行进入到项目的根目录，执行如下命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p><img src="http://static.staryjie.com/static/images/20190927095052-QMlKTE.png" alt></p><p>执行完毕之后 Next 主题的源码就会出现在项目的 themes/next 文件夹下。</p><h4 id="7-2-2-修改主题"><a href="#7-2-2-修改主题" class="headerlink" title="7.2.2 修改主题"></a>7.2.2 修改主题</h4><p>修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><h4 id="7-2-3-本地预览"><a href="#7-2-3-本地预览" class="headerlink" title="7.2.3 本地预览"></a>7.2.3 本地预览</h4><p>然后本地重新开启服务，访问刷新下页面，就可以看到 next 主题就切换成功了，预览效果如下：</p><p><img src="http://static.staryjie.com/static/images/20190927095305-XHQ4Iv.png" alt></p><h3 id="7-3-配置主题"><a href="#7-3-配置主题" class="headerlink" title="7.3 配置主题"></a>7.3 配置主题</h3><p>现在我们已经成功切换到 next 主题上面了，接下来我们就对主题进行进一步地详细配置吧，比如修改样式、增加其他各项功能的支持。</p><p>Next 主题内部也提供了一个配置文件，名字同样叫做 _config.yml，只不过位置不一样，它在 themes/next 文件夹下，Next 主题里面所有的功能都可以通过这个配置文件来控制，下文所述的内容都是修改的 themes/next/_config.yml 文件。</p><h4 id="7-3-1-样式"><a href="#7-3-1-样式" class="headerlink" title="7.3.1 样式"></a>7.3.1 样式</h4><p>Next 主题还提供了多种样式，风格都是类似黑白的搭配，但整个布局位置不太一样，通过修改配置文件的 scheme 字段即可，我选了 Pisces 样式，修改 _config.yml （注意是 themes/next/_config.yml 文件）如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><p>另外还有几个可选项，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line">scheme: Pisces</span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><p>重新在本地运行，浏览器查看就已经变成<code>Pisces</code>样式了：</p><p><img src="http://static.staryjie.com/static/images/20190927095649-RwBCCP.png" alt></p><h3 id="7-4-favicon"><a href="#7-4-favicon" class="headerlink" title="7.4 favicon"></a>7.4 favicon</h3><p>favicon 就是站点标签栏的小图标，默认是用的 Hexo 的小图标，如果我们有站点 Logo 的图片的话，我们可以自己定制小图标。</p><h4 id="7-4-1-获取图标"><a href="#7-4-1-获取图标" class="headerlink" title="7.4.1 获取图标"></a>7.4.1 获取图标</h4><p>但这并不意味着我们需要自己用 PS 自己来设计，已经有一个网站可以直接将图片转化为站点小图标，站点链接为：<a href="https://realfavicongenerator.net，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。" target="_blank" rel="noopener">https://realfavicongenerator.net，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。</a></p><p><img src="http://static.staryjie.com/static/images/20190927103245-taaXfh.png" alt></p><h4 id="7-4-2-更换图标"><a href="#7-4-2-更换图标" class="headerlink" title="7.4.2 更换图标"></a>7.4.2 更换图标</h4><p>图标下载下来之后把它放在 themes/next/source/images 目录下面。</p><p>然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可，示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16.png</span><br><span class="line">  medium: /images/favicon-32x32.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon.png</span><br><span class="line">  safari_pinned_tab: /images/safari-pinned-tab.svg</span><br></pre></td></tr></table></figure><p>配置完成之后刷新页面，整个页面的标签图标就被更新了。</p><p><img src="http://static.staryjie.com/static/images/20190927103755-Y7ZUBj.png" alt></p><h3 id="7-5-avatar"><a href="#7-5-avatar" class="headerlink" title="7.5 avatar"></a>7.5 avatar</h3><p>avatar 这个就类似站点的头像，如果设置了这个，会在站点的作者信息旁边额外显示一个头像，比如我这边有一张 avatar.png 图片：</p><p><img src="http://static.staryjie.com/static/images/20190927103934-oL6J7w.jpeg" alt></p><p>将其放置到 themes/next/source/images/avatar.png 路径，然后在主题 _config.yml 文件下编辑 avatar 的配置，修改为正确的路径即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line">avatar:</span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line">  url: /images/avatar.png</span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line">  rounded: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line">  rotated: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>配置完成之后刷新页面，头像的图片就会显示出来。</p><p><img src="http://static.staryjie.com/static/images/20190927104303-Ze19WD.png" alt></p><h3 id="7-6-rss"><a href="#7-6-rss" class="headerlink" title="7.6 rss"></a>7.6 rss</h3><p>博客一般是需要 RSS 订阅的，如果要开启 RSS 订阅，这里需要安装一个插件，叫做 hexo-generator-feed，安装完成之后，站点会自动生成 RSS Feed 文件，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在项目根目录下运行这个命令，安装完成之后不需要其他的配置，以后每次编译生成站点的时候就会自动生成 RSS Feed 文件了。</p><h3 id="7-7-code"><a href="#7-7-code" class="headerlink" title="7.7 code"></a>7.7 code</h3><p>作为一个为程序员，虽然代码敲的不咋样，但是代码块的显示还是需要很讲究的，默认的代码块我个人不是特别喜欢，因此我把代码的颜色修改为黑色，并把复制按钮的样式修改为类似 Mac 的样式，修改 _config.yml 文件的 codeblock 区块如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="comment"># highlight_theme: normal</span></span><br><span class="line">  highlight_theme: night bright</span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  copy_button:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    show_result: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    style: mac</span><br></pre></td></tr></table></figure><p>修改样式前是这样的：</p><p><img src="http://static.staryjie.com/static/images/20190927104818-i1aqkb.png" alt></p><p>修改完之后是这样的：</p><p><img src="http://static.staryjie.com/static/images/20190927104934-1DNdc6.png" alt></p><h3 id="7-8-top"><a href="#7-8-top" class="headerlink" title="7.8 top"></a>7.8 top</h3><p>我们在浏览网页的时候，如果已经看完了想快速返回到网站的上端，一般都是有一个按钮来辅助的，这里也支持它的配置，修改 _config.yml 的 back2top 字段即可，我的设置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  sidebar: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  scrollpercent: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>enable 默认为 true，即默认显示。sidebar 如果设置为 true，按钮会出现在侧栏下方，个人觉得并不是很好看，就取消了，scrollpercent 就是显示阅读百分比，个人觉得还不错，就将其设置为 true。</p><h3 id="7-9-reading-process"><a href="#7-9-reading-process" class="headerlink" title="7.9 reading_process"></a>7.9 reading_process</h3><p>reading_process，阅读进度。大家可能注意到有些站点的最上侧会出现一个细细的进度条，代表页面加载进度和阅读进度，如果大家想设置的话也可以试试，我将其打开了，修改 _config.yml 如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line">reading_progress:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  position: top</span><br><span class="line">  color: <span class="string">"#222"</span></span><br><span class="line">  height: 2px</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="http://static.staryjie.com/static/images/20190927105926-6rVvO4.png" alt></p><h3 id="7-10-bookmark"><a href="#7-10-bookmark" class="headerlink" title="7.10 bookmark"></a>7.10 bookmark</h3><p>书签，可以根据阅读历史记录，在下次打开页面的时候快速帮助我们定位到上次的位置，大家可以根据喜好开启和关闭，我的配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bookmark:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">  color: <span class="string">"#222"</span></span><br><span class="line">  <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">  <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  save: auto</span><br></pre></td></tr></table></figure><h3 id="7-11-github-banner"><a href="#7-11-github-banner" class="headerlink" title="7.11 github_banner"></a>7.11 github_banner</h3><p>在一些技术博客上，大家可能注意到在页面的右上角有个 GitHub 图标，点击之后可以跳转到其源码页面，可以为 GitHub Repository 引流，大家如果想显示的话可以自行选择打开，我的配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line">github_banner:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  permalink: https://github.com/59devops/59devops.github.io.git</span><br><span class="line">  title: Follow 59devops on GitHub</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="http://static.staryjie.com/static/images/20190927110805-OXyO4V.png" alt></p><h3 id="7-12-gitalk"><a href="#7-12-gitalk" class="headerlink" title="7.12 gitalk"></a>7.12 gitalk</h3><p>由于 Hexo 的博客是静态博客，而且也没有连接数据库的功能，所以它的评论功能是不能自行集成的，但可以集成第三方的服务。</p><p>Next 主题里面提供了多种评论插件的集成，有 changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte 这些。</p><h4 id="1-12-1-注册OAuth-Application"><a href="#1-12-1-注册OAuth-Application" class="headerlink" title="1.12.1 注册OAuth Application"></a>1.12.1 注册OAuth Application</h4><p>首先需要在 GitHub 上面注册一个 OAuth Application，链接为：<a href="https://github.com/settings/applications/new，注册完毕之后拿到" target="_blank" rel="noopener">https://github.com/settings/applications/new，注册完毕之后拿到</a> Client ID、Client Secret 就可以了。</p><h4 id="1-12-2-修改配置"><a href="#1-12-2-修改配置" class="headerlink" title="1.12.2 修改配置"></a>1.12.2 修改配置</h4><p>首先需要在 _config.yml 文件的 comments 区域配置使用 gitalk：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line">comments:</span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  style: tabs</span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte</span></span><br><span class="line">  active: gitalk</span><br></pre></td></tr></table></figure><p>主要是 comments.active 字段选择对应的名称即可。</p><p>然后找打 gitalk 配置，添加它的各项配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># Demo: https://gitalk.github.io</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/gitalk/gitalk</span></span><br><span class="line">gitalk:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  github_id: 59devops</span><br><span class="line">  repo: 59devops.github.io</span><br><span class="line">  client_id: cb34a61011c438548cec</span><br><span class="line">  client_secret: 3d9c756a081ce2b91a6a286eb1a0a02a71ced6ca</span><br><span class="line">  admin_user: 59devops</span><br><span class="line">  distraction_free_mode: <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk's display language depends on user's browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure><p>进入文章之后，效果如下：</p><p><img src="http://static.staryjie.com/static/images/20190927112017-PrYFIH.png" alt></p><p>GitHub 授权登录之后就可以使用了，评论的内容会自动出现在 Issue 里面。</p><h3 id="7-13-pangu"><a href="#7-13-pangu" class="headerlink" title="7.13 pangu"></a>7.13 pangu</h3><p>如果你习惯在中文和英文之间留空格的话，pangu 就是来解决这个问题的，我们只需要在主题里面开启这个选项，在编译生成页面的时候，中英文之间就会自动添加空格，看起来更加美观。</p><p>具体的修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pangu: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="7-14-math"><a href="#7-14-math" class="headerlink" title="7.14 math"></a>7.14 math</h3><p>可能在一些情况下我们需要写一个公式，比如演示一个算法推导过程，MarkDown 是支持公式显示的，Hexo 的 Next 主题同样是支持的。</p><p>Next 主题提供了两个渲染引擎，分别是 mathjax 和 katex，后者相对前者来说渲染速度更快，而且不需要 JavaScript 的额外支持，但后者支持的功能现在还不如前者丰富，具体的对比可以看官方文档：<a href="https://theme-next.org/docs/third-party-services/math-equations。" target="_blank" rel="noopener">https://theme-next.org/docs/third-party-services/math-equations。</a></p><p>这里选择了 mathjax，通过修改配置即可启用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">math:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  per_page: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  mathjax:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    mhchem: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>mathjax 的使用需要我们额外安装一个插件，叫做 hexo-renderer-kramed，另外也可以安装 hexo-renderer-pandoc，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>另外还有其他的插件支持，大家可以到官方文档查看。</p><h3 id="7-15-pjax"><a href="#7-15-pjax" class="headerlink" title="7.15 pjax"></a>7.15 pjax</h3><p>可能大家听说过 Ajax，没听说过 pjax，这个技术实际上就是利用 Ajax 技术实现了局部页面刷新，既可以实现 URL 的更换，有可以做到无刷新加载。</p><p>要开启这个功能需要先将 pjax 功能开启，然后安装对应的 pjax 依赖库，首先修改 _config.yml 修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pjax: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后安装依赖库，切换到 next 主题下，然后安装依赖库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pjax <span class="built_in">source</span>/lib/pjax</span><br></pre></td></tr></table></figure><p>这样 pjax 就开启了，页面就可以实现无刷新加载了。</p><h3 id="7-16-其他配置"><a href="#7-16-其他配置" class="headerlink" title="7.16 其他配置"></a>7.16 其他配置</h3><p>参考官方文档：<a href="https://theme-next.org/docs/。" target="_blank" rel="noopener">https://theme-next.org/docs/。</a></p><h2 id="8、文章"><a href="#8、文章" class="headerlink" title="8、文章"></a>8、文章</h2><h3 id="8-1-新建文章"><a href="#8-1-新建文章" class="headerlink" title="8.1 新建文章"></a>8.1 新建文章</h3><p>Hexo默认安装完就会有一篇文章，我们需要借助hexo命令添加新的文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new hello-hexo</span><br></pre></td></tr></table></figure><p>创建的文章会出现在 <code>source/_posts</code> 文件夹下，是 MarkDown 格式。</p><p><img src="http://static.staryjie.com/static/images/20190927114028-8w92ij.png" alt></p><h3 id="8-2-文章标签和分类"><a href="#8-2-文章标签和分类" class="headerlink" title="8.2 文章标签和分类"></a>8.2 文章标签和分类</h3><p>在文章开头通过如下格式添加必要信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题 <span class="comment"># 自动创建，如 hello-world</span></span><br><span class="line">date: 日期 <span class="comment"># 自动创建，如 2019-09-22 01:47:21</span></span><br><span class="line">tags: </span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">- 标签3</span><br><span class="line">categories:</span><br><span class="line">- 分类1</span><br><span class="line">- 分类2</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>开头下方撰写正文，MarkDown 格式书写即可。</p><p>这样在下次编译的时候就会自动识别标题、时间、类别等等，另外还有其他的一些参数设置，可以参考文档：<a href="https://hexo.io/zh-cn/docs/writing.html。" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing.html。</a></p><h3 id="8-3-博客首页只显示文章标题和摘要"><a href="#8-3-博客首页只显示文章标题和摘要" class="headerlink" title="8.3 博客首页只显示文章标题和摘要"></a>8.3 博客首页只显示文章标题和摘要</h3><p>默认情况下<code>hexo</code>博客(如本站)的首页显示的是完整的文章 – 而文章比较长的时候这无疑会带来诸多不便。只要加入一个<code>&lt;!-- more --&gt;</code>这样的占位符在文章正文里面即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这就是一个简介</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">这里更多的内容</span><br></pre></td></tr></table></figure><p>本地运行刷新后效果如下：</p><p><img src="http://static.staryjie.com/static/images/20190927125818-W0taKN.png" alt></p><h2 id="9、标签页"><a href="#9、标签页" class="headerlink" title="9、标签页"></a>9、标签页</h2><p>现在我们的博客只有首页、文章页，如果我们想要增加标签页，可以自行添加，这里 Hexo 也给我们提供了这个功能，在根目录执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>执行这个命令之后会自动帮我们生成一个 source/tags/index.md 文件，内容就只有这样子的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-09-27 11:42:49</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>我们可以自行添加一个 type 字段来指定页面的类型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>: tags</span><br><span class="line">comments: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>本地运行刷新后，界面如下：</p><p><img src="http://static.staryjie.com/static/images/20190927115044-RoarWo.png" alt></p><p>可以看到左侧导航也出现了标签，点击之后右侧会显示标签的列表。</p><h2 id="10、分类页"><a href="#10、分类页" class="headerlink" title="10、分类页"></a>10、分类页</h2><p>分类功能和标签类似，一个文章可以对应某个分类，如果要增加分类页面可以使用如下命令创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>然后同样地，会生成一个 source/categories/index.md 文件。</p><p>我们可以自行添加一个 type 字段来指定页面的类型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>: categories</span><br><span class="line">comments: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>刷新后页面如下：</p><p><img src="http://static.staryjie.com/static/images/20190927115402-phvm0C.png" alt></p><h2 id="11、搜索页"><a href="#11、搜索页" class="headerlink" title="11、搜索页"></a>11、搜索页</h2><p>很多情况下我们需要搜索全站的内容，所以一个搜索功能的支持也是很有必要的。</p><p>如果要添加搜索的支持，需要先安装一个插件，叫做 hexo-generator-searchdb，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>然后在项目的 _config.yml 里面添加搜索设置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure><p>然后在主题的 _config.yml 里面修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 5</span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>这里用的是 Local Search，如果想启用其他是 Search Service 的话可以参考官方文档：<a href="https://theme-next.org/docs/third-party-services/search-services。" target="_blank" rel="noopener">https://theme-next.org/docs/third-party-services/search-services。</a></p><h2 id="12、404页面"><a href="#12、404页面" class="headerlink" title="12、404页面"></a>12、404页面</h2><p>另外还需要添加一个 404 页面，直接在根目录 source 文件夹新建一个 404.md 文件即可，内容可以仿照如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404 Not Found</span><br><span class="line">date: 2019-09-27 12:21:37</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;center&gt;</span><br><span class="line">对不起，您所访问的页面不存在或者已删除。</span><br><span class="line">您可以&lt;a href=<span class="string">"https://blog.59devops.com&gt;"</span>&gt;点击此处&lt;/a&gt;返回首页。</span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;blockquote class=<span class="string">"blockquote-center"</span>&gt;</span><br><span class="line">    59Dveops</span><br><span class="line">&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure><p>这里面的一些相关信息和链接可以替换成自己的。</p><p>其实 Hexo 还有很多很多功能，可以直接参考官方文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a> 查看更多的配置。</p><h2 id="15、部署脚本"><a href="#15、部署脚本" class="headerlink" title="15、部署脚本"></a>15、部署脚本</h2><p>最后我这边还增加了一个简易版的部署脚本，其实就是重新 gererate 下文件，然后重新部署。在根目录下新建一个 deploy.sh 的脚本文件，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这样我们在部署发布的时候只需要执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh deploy.sh</span><br></pre></td></tr></table></figure><p>就可以完成博客的更新了，非常简单。</p><h2 id="16、自定义域名"><a href="#16、自定义域名" class="headerlink" title="16、自定义域名"></a>16、自定义域名</h2><p>将页面修改之后可以用上面的脚本重新部署下博客，其内容便会跟着更新。</p><p>另外我们也可以在 GitHub 的 Repository 里面设置域名，找到 Settings，拉到下面，可以看到有个 GitHub Pages 的配置项，如图所示：</p><p><img src="http://static.staryjie.com/static/images/20190927123133-rb04H4.png" alt></p><p>下面有个 custom domain 的选项，输入你想自定义的域名地址，然后添加 CNAME 解析就好了。</p><p>另外下面还有一个 Enforce HTTPS 的选项，GitHub Pages 会在我们配置自定义域名之后自动帮我们配置 HTTPS 服务。刚配置完自定义域名的时候可能这个选项是不可用的，一段时间后等到其可以勾选了，直接勾选即可，这样整个博客就会变成 HTTPS 的协议的了。</p><p>另外有一个值得注意的地方，如果配置了自定义域名，在目前的情况下，每次部署的时候这个自定义域名的设置是会被自动清除的。所以为了避免这个情况，我们需要在项目目录下面新建一个 CNAME 文件，路径为 source/CNAME，内容就是自定义域名。</p><p>比如我就在 source 目录下新建了一个 CNAME 文件，内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog.59devops.com</span><br></pre></td></tr></table></figure><p>这样避免了每次部署的时候自定义域名被清除的情况了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般我们要搭建一个个人的博客站点需要买服务器、域名，装各种运行环境等等，非常的费钱费力。&lt;/p&gt;
&lt;p&gt;其实就算没有这些，我们也是照样可以通过Hexo框架结合GitHub Pages搭建一个自己的博客站点的。&lt;/p&gt;
&lt;p&gt;Hexo 这个博客框架没有那么重量级，它是 MarkDown 直接写文章的，然后 Hexo 可以直接将文章编译成静态网页文件并发布，所以这样文章的内容、标题、标签等信息就没必要存数据库里面了，是直接纯静态页面了，这就解决了数据库的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
